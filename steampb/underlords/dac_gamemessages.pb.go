// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: underlords/dac_gamemessages.proto

package underlords

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EDACGameMessages int32

const (
	EDACGameMessages_k_EMsgNetBufferContents                  EDACGameMessages = 2
	EDACGameMessages_k_EMsgClientConnectionStarted            EDACGameMessages = 3
	EDACGameMessages_k_EMsgClientConnectionComplete           EDACGameMessages = 4
	EDACGameMessages_k_EMsgClientSetDebugNetBuffer            EDACGameMessages = 5
	EDACGameMessages_k_EMsgPlayerOrder                        EDACGameMessages = 6
	EDACGameMessages_k_EMsgGameReplayActionMarker             EDACGameMessages = 7
	EDACGameMessages_k_EMsgPlayerCombinedHero                 EDACGameMessages = 8
	EDACGameMessages_k_EMsgPlayerCombatResult                 EDACGameMessages = 9
	EDACGameMessages_k_EMsgPlayerWinStreak                    EDACGameMessages = 10
	EDACGameMessages_k_EMsgNetBufferRemoved                   EDACGameMessages = 11
	EDACGameMessages_k_EMsgClientToServerChatMsg              EDACGameMessages = 12
	EDACGameMessages_k_EMsgServerToClientChatMsg              EDACGameMessages = 13
	EDACGameMessages_k_EMsgPlayerEliminated                   EDACGameMessages = 14
	EDACGameMessages_k_EMsgRecordLocalBotStats                EDACGameMessages = 15
	EDACGameMessages_k_EMsgPlayerOrderProcessed               EDACGameMessages = 16
	EDACGameMessages_k_EMsgPlayerAcquiredItem                 EDACGameMessages = 18
	EDACGameMessages_k_EMsgPlayerLevelUp                      EDACGameMessages = 19
	EDACGameMessages_k_EMsgClientToServerUpvoteNotification   EDACGameMessages = 20
	EDACGameMessages_k_EMsgServerToClientNotificationChanged  EDACGameMessages = 21
	EDACGameMessages_k_EMsgItemChangedOwner                   EDACGameMessages = 22
	EDACGameMessages_k_EMsgLocalPlayerInventory               EDACGameMessages = 23
	EDACGameMessages_k_eMsgIndividualPostMatchStats           EDACGameMessages = 24
	EDACGameMessages_k_EMsgPlayerPreferences                  EDACGameMessages = 25
	EDACGameMessages_k_EMsgPlayerStateUpdatesComplete         EDACGameMessages = 26
	EDACGameMessages_k_EMsgClientToServerTeammateDuosMessage  EDACGameMessages = 27
	EDACGameMessages_k_EMsgServerToClientTeammateDuosMessage  EDACGameMessages = 28
	EDACGameMessages_k_EMsgPlayerSelectedTalent               EDACGameMessages = 29
	EDACGameMessages_k_EMsgPlayerRecievedUnitFromDuosPartner  EDACGameMessages = 30
	EDACGameMessages_k_EMsgClientToServerLoadShareCode        EDACGameMessages = 31
	EDACGameMessages_k_EMsgPlayerBoardBuddyCommand            EDACGameMessages = 33
	EDACGameMessages_k_EMsgPlayerMapPropCommand               EDACGameMessages = 34
	EDACGameMessages_k_EMsgPlayerLoadPuzzleLeaderboardCommand EDACGameMessages = 35
	EDACGameMessages_k_EMsgClientToServerClickMsg             EDACGameMessages = 36
	EDACGameMessages_k_EMsgServerToClientClickMsg             EDACGameMessages = 37
	EDACGameMessages_k_EMsgPlayerChallengeCompletePrediction  EDACGameMessages = 38
)

// Enum value maps for EDACGameMessages.
var (
	EDACGameMessages_name = map[int32]string{
		2:  "k_EMsgNetBufferContents",
		3:  "k_EMsgClientConnectionStarted",
		4:  "k_EMsgClientConnectionComplete",
		5:  "k_EMsgClientSetDebugNetBuffer",
		6:  "k_EMsgPlayerOrder",
		7:  "k_EMsgGameReplayActionMarker",
		8:  "k_EMsgPlayerCombinedHero",
		9:  "k_EMsgPlayerCombatResult",
		10: "k_EMsgPlayerWinStreak",
		11: "k_EMsgNetBufferRemoved",
		12: "k_EMsgClientToServerChatMsg",
		13: "k_EMsgServerToClientChatMsg",
		14: "k_EMsgPlayerEliminated",
		15: "k_EMsgRecordLocalBotStats",
		16: "k_EMsgPlayerOrderProcessed",
		18: "k_EMsgPlayerAcquiredItem",
		19: "k_EMsgPlayerLevelUp",
		20: "k_EMsgClientToServerUpvoteNotification",
		21: "k_EMsgServerToClientNotificationChanged",
		22: "k_EMsgItemChangedOwner",
		23: "k_EMsgLocalPlayerInventory",
		24: "k_eMsgIndividualPostMatchStats",
		25: "k_EMsgPlayerPreferences",
		26: "k_EMsgPlayerStateUpdatesComplete",
		27: "k_EMsgClientToServerTeammateDuosMessage",
		28: "k_EMsgServerToClientTeammateDuosMessage",
		29: "k_EMsgPlayerSelectedTalent",
		30: "k_EMsgPlayerRecievedUnitFromDuosPartner",
		31: "k_EMsgClientToServerLoadShareCode",
		33: "k_EMsgPlayerBoardBuddyCommand",
		34: "k_EMsgPlayerMapPropCommand",
		35: "k_EMsgPlayerLoadPuzzleLeaderboardCommand",
		36: "k_EMsgClientToServerClickMsg",
		37: "k_EMsgServerToClientClickMsg",
		38: "k_EMsgPlayerChallengeCompletePrediction",
	}
	EDACGameMessages_value = map[string]int32{
		"k_EMsgNetBufferContents":                  2,
		"k_EMsgClientConnectionStarted":            3,
		"k_EMsgClientConnectionComplete":           4,
		"k_EMsgClientSetDebugNetBuffer":            5,
		"k_EMsgPlayerOrder":                        6,
		"k_EMsgGameReplayActionMarker":             7,
		"k_EMsgPlayerCombinedHero":                 8,
		"k_EMsgPlayerCombatResult":                 9,
		"k_EMsgPlayerWinStreak":                    10,
		"k_EMsgNetBufferRemoved":                   11,
		"k_EMsgClientToServerChatMsg":              12,
		"k_EMsgServerToClientChatMsg":              13,
		"k_EMsgPlayerEliminated":                   14,
		"k_EMsgRecordLocalBotStats":                15,
		"k_EMsgPlayerOrderProcessed":               16,
		"k_EMsgPlayerAcquiredItem":                 18,
		"k_EMsgPlayerLevelUp":                      19,
		"k_EMsgClientToServerUpvoteNotification":   20,
		"k_EMsgServerToClientNotificationChanged":  21,
		"k_EMsgItemChangedOwner":                   22,
		"k_EMsgLocalPlayerInventory":               23,
		"k_eMsgIndividualPostMatchStats":           24,
		"k_EMsgPlayerPreferences":                  25,
		"k_EMsgPlayerStateUpdatesComplete":         26,
		"k_EMsgClientToServerTeammateDuosMessage":  27,
		"k_EMsgServerToClientTeammateDuosMessage":  28,
		"k_EMsgPlayerSelectedTalent":               29,
		"k_EMsgPlayerRecievedUnitFromDuosPartner":  30,
		"k_EMsgClientToServerLoadShareCode":        31,
		"k_EMsgPlayerBoardBuddyCommand":            33,
		"k_EMsgPlayerMapPropCommand":               34,
		"k_EMsgPlayerLoadPuzzleLeaderboardCommand": 35,
		"k_EMsgClientToServerClickMsg":             36,
		"k_EMsgServerToClientClickMsg":             37,
		"k_EMsgPlayerChallengeCompletePrediction":  38,
	}
)

func (x EDACGameMessages) Enum() *EDACGameMessages {
	p := new(EDACGameMessages)
	*p = x
	return p
}

func (x EDACGameMessages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACGameMessages) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[0].Descriptor()
}

func (EDACGameMessages) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[0]
}

func (x EDACGameMessages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACGameMessages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACGameMessages(num)
	return nil
}

// Deprecated: Use EDACGameMessages.Descriptor instead.
func (EDACGameMessages) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{0}
}

type EDACDisconnectReason int32

const (
	EDACDisconnectReason_k_EDACDisconnectReason_UserLeaveMatch            EDACDisconnectReason = 1001
	EDACDisconnectReason_k_EDACDisconnectReason_UserQuitApp               EDACDisconnectReason = 1002
	EDACDisconnectReason_k_EDACDisconnectReason_UserCancel                EDACDisconnectReason = 1003
	EDACDisconnectReason_k_EDACDisconnectReason_Goodbye                   EDACDisconnectReason = 1004
	EDACDisconnectReason_k_EDACDisconnectReason_BadMessage                EDACDisconnectReason = 2001
	EDACDisconnectReason_k_EDACDisconnectReason_GameDestroyedUnexpectedly EDACDisconnectReason = 2002
	EDACDisconnectReason_k_EDACDisconnectReason_ChangingServer            EDACDisconnectReason = 2003
	EDACDisconnectReason_k_EDACDisconnectReason_OldConnection             EDACDisconnectReason = 2004
	EDACDisconnectReason_k_EDACDisconnectReason_GoodbyeUnrecognizedGame   EDACDisconnectReason = 2005
)

// Enum value maps for EDACDisconnectReason.
var (
	EDACDisconnectReason_name = map[int32]string{
		1001: "k_EDACDisconnectReason_UserLeaveMatch",
		1002: "k_EDACDisconnectReason_UserQuitApp",
		1003: "k_EDACDisconnectReason_UserCancel",
		1004: "k_EDACDisconnectReason_Goodbye",
		2001: "k_EDACDisconnectReason_BadMessage",
		2002: "k_EDACDisconnectReason_GameDestroyedUnexpectedly",
		2003: "k_EDACDisconnectReason_ChangingServer",
		2004: "k_EDACDisconnectReason_OldConnection",
		2005: "k_EDACDisconnectReason_GoodbyeUnrecognizedGame",
	}
	EDACDisconnectReason_value = map[string]int32{
		"k_EDACDisconnectReason_UserLeaveMatch":            1001,
		"k_EDACDisconnectReason_UserQuitApp":               1002,
		"k_EDACDisconnectReason_UserCancel":                1003,
		"k_EDACDisconnectReason_Goodbye":                   1004,
		"k_EDACDisconnectReason_BadMessage":                2001,
		"k_EDACDisconnectReason_GameDestroyedUnexpectedly": 2002,
		"k_EDACDisconnectReason_ChangingServer":            2003,
		"k_EDACDisconnectReason_OldConnection":             2004,
		"k_EDACDisconnectReason_GoodbyeUnrecognizedGame":   2005,
	}
)

func (x EDACDisconnectReason) Enum() *EDACDisconnectReason {
	p := new(EDACDisconnectReason)
	*p = x
	return p
}

func (x EDACDisconnectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACDisconnectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[1].Descriptor()
}

func (EDACDisconnectReason) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[1]
}

func (x EDACDisconnectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACDisconnectReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACDisconnectReason(num)
	return nil
}

// Deprecated: Use EDACDisconnectReason.Descriptor instead.
func (EDACDisconnectReason) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{1}
}

type EGameState int32

const (
	EGameState_EGameState_Intro    EGameState = 0
	EGameState_EGameState_Playing  EGameState = 1
	EGameState_EGameState_GameOver EGameState = 2
)

// Enum value maps for EGameState.
var (
	EGameState_name = map[int32]string{
		0: "EGameState_Intro",
		1: "EGameState_Playing",
		2: "EGameState_GameOver",
	}
	EGameState_value = map[string]int32{
		"EGameState_Intro":    0,
		"EGameState_Playing":  1,
		"EGameState_GameOver": 2,
	}
)

func (x EGameState) Enum() *EGameState {
	p := new(EGameState)
	*p = x
	return p
}

func (x EGameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGameState) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[2].Descriptor()
}

func (EGameState) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[2]
}

func (x EGameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGameState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGameState(num)
	return nil
}

// Deprecated: Use EGameState.Descriptor instead.
func (EGameState) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{2}
}

type ERoundState int32

const (
	ERoundState_ERoundState_Preparing ERoundState = 0
	ERoundState_ERoundState_Ready     ERoundState = 1
	ERoundState_ERoundState_Combat    ERoundState = 2
	ERoundState_ERoundState_RoundOver ERoundState = 3
)

// Enum value maps for ERoundState.
var (
	ERoundState_name = map[int32]string{
		0: "ERoundState_Preparing",
		1: "ERoundState_Ready",
		2: "ERoundState_Combat",
		3: "ERoundState_RoundOver",
	}
	ERoundState_value = map[string]int32{
		"ERoundState_Preparing": 0,
		"ERoundState_Ready":     1,
		"ERoundState_Combat":    2,
		"ERoundState_RoundOver": 3,
	}
)

func (x ERoundState) Enum() *ERoundState {
	p := new(ERoundState)
	*p = x
	return p
}

func (x ERoundState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERoundState) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[3].Descriptor()
}

func (ERoundState) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[3]
}

func (x ERoundState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERoundState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERoundState(num)
	return nil
}

// Deprecated: Use ERoundState.Descriptor instead.
func (ERoundState) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{3}
}

type EUnitKeyword int32

const (
	EUnitKeyword_EUnitKeyword_Invalid        EUnitKeyword = 0
	EUnitKeyword_EUnitKeyword_Beast          EUnitKeyword = 1
	EUnitKeyword_EUnitKeyword_Demon          EUnitKeyword = 2
	EUnitKeyword_EUnitKeyword_Dragon         EUnitKeyword = 3
	EUnitKeyword_EUnitKeyword_Dwarf          EUnitKeyword = 4
	EUnitKeyword_EUnitKeyword_Element        EUnitKeyword = 5
	EUnitKeyword_EUnitKeyword_Elf            EUnitKeyword = 6
	EUnitKeyword_EUnitKeyword_Goblin         EUnitKeyword = 7
	EUnitKeyword_EUnitKeyword_Human          EUnitKeyword = 8
	EUnitKeyword_EUnitKeyword_Naga           EUnitKeyword = 9
	EUnitKeyword_EUnitKeyword_Ogre           EUnitKeyword = 10
	EUnitKeyword_EUnitKeyword_Orc            EUnitKeyword = 11
	EUnitKeyword_EUnitKeyword_Troll          EUnitKeyword = 12
	EUnitKeyword_EUnitKeyword_Undead         EUnitKeyword = 13
	EUnitKeyword_EUnitKeyword_Satyr          EUnitKeyword = 14
	EUnitKeyword_EUnitKeyword_Assassin       EUnitKeyword = 15
	EUnitKeyword_EUnitKeyword_DemonHunter    EUnitKeyword = 16
	EUnitKeyword_EUnitKeyword_Druid          EUnitKeyword = 17
	EUnitKeyword_EUnitKeyword_Hunter         EUnitKeyword = 18
	EUnitKeyword_EUnitKeyword_Knight         EUnitKeyword = 19
	EUnitKeyword_EUnitKeyword_Mage           EUnitKeyword = 20
	EUnitKeyword_EUnitKeyword_Mech           EUnitKeyword = 21
	EUnitKeyword_EUnitKeyword_Shaman         EUnitKeyword = 22
	EUnitKeyword_EUnitKeyword_Warlock        EUnitKeyword = 23
	EUnitKeyword_EUnitKeyword_Warrior        EUnitKeyword = 24
	EUnitKeyword_EUnitKEyword_MegaWarrior    EUnitKeyword = 25
	EUnitKeyword_EUnitKeyword_MegaAssassin   EUnitKeyword = 26
	EUnitKeyword_EUnitKeyword_MegaBloodbound EUnitKeyword = 27
	EUnitKeyword_EUnitKeyword_MegaElusive    EUnitKeyword = 28
	EUnitKeyword_EUnitKeyword_MegaWarlock    EUnitKeyword = 29
	EUnitKeyword_EUnitKeyword_MegaScaled     EUnitKeyword = 30
	EUnitKeyword_EUnitKeyword_MegaTroll      EUnitKeyword = 31
	EUnitKeyword_EUnitKeyword_MegaDemon      EUnitKeyword = 32
	EUnitKeyword_EUnitKeyword_Primordial     EUnitKeyword = 33
	EUnitKeyword_EUnitKeyword_Brawny         EUnitKeyword = 34
	EUnitKeyword_EUnitKeyword_Savage         EUnitKeyword = 35
	EUnitKeyword_EUnitKeyword_Inventor       EUnitKeyword = 36
	EUnitKeyword_EUnitKeyword_Insect         EUnitKeyword = 37
	EUnitKeyword_EUnitKeyword_Spectral       EUnitKeyword = 38
	EUnitKeyword_EUnitKeyword_Summoner       EUnitKeyword = 39
	EUnitKeyword_EUnitKeyword_SpiritBrother  EUnitKeyword = 40
	EUnitKeyword_EUnitKeyword_Meepo          EUnitKeyword = 41
	EUnitKeyword_EUnitKeyword_Monk           EUnitKeyword = 42
	EUnitKeyword_EUnitKeyword_Brawler        EUnitKeyword = 43
	EUnitKeyword_EUnitKeyword_Invoker        EUnitKeyword = 44
	EUnitKeyword_EUnitKeyword_Sorceror       EUnitKeyword = 45
	EUnitKeyword_EUnitKeyword_Guardian       EUnitKeyword = 46
	EUnitKeyword_EUnitKeyword_Commander      EUnitKeyword = 47
	EUnitKeyword_EUnitKeyword_Faerie         EUnitKeyword = 48
	EUnitKeyword_EUnitKeyword_Necromancer    EUnitKeyword = 49
	EUnitKeyword_EUnitKeyword_Champion       EUnitKeyword = 50
	EUnitKeyword_EUnitKeyword_Wisp           EUnitKeyword = 51
	EUnitKeyword_EUnitKeyword_Brutal         EUnitKeyword = 52
	EUnitKeyword_EUnitKeyword_Healer         EUnitKeyword = 53
	EUnitKeyword_EUnitKeyword_Vigilant       EUnitKeyword = 54
	EUnitKeyword_EUnitKeyword_Void           EUnitKeyword = 55
)

// Enum value maps for EUnitKeyword.
var (
	EUnitKeyword_name = map[int32]string{
		0:  "EUnitKeyword_Invalid",
		1:  "EUnitKeyword_Beast",
		2:  "EUnitKeyword_Demon",
		3:  "EUnitKeyword_Dragon",
		4:  "EUnitKeyword_Dwarf",
		5:  "EUnitKeyword_Element",
		6:  "EUnitKeyword_Elf",
		7:  "EUnitKeyword_Goblin",
		8:  "EUnitKeyword_Human",
		9:  "EUnitKeyword_Naga",
		10: "EUnitKeyword_Ogre",
		11: "EUnitKeyword_Orc",
		12: "EUnitKeyword_Troll",
		13: "EUnitKeyword_Undead",
		14: "EUnitKeyword_Satyr",
		15: "EUnitKeyword_Assassin",
		16: "EUnitKeyword_DemonHunter",
		17: "EUnitKeyword_Druid",
		18: "EUnitKeyword_Hunter",
		19: "EUnitKeyword_Knight",
		20: "EUnitKeyword_Mage",
		21: "EUnitKeyword_Mech",
		22: "EUnitKeyword_Shaman",
		23: "EUnitKeyword_Warlock",
		24: "EUnitKeyword_Warrior",
		25: "EUnitKEyword_MegaWarrior",
		26: "EUnitKeyword_MegaAssassin",
		27: "EUnitKeyword_MegaBloodbound",
		28: "EUnitKeyword_MegaElusive",
		29: "EUnitKeyword_MegaWarlock",
		30: "EUnitKeyword_MegaScaled",
		31: "EUnitKeyword_MegaTroll",
		32: "EUnitKeyword_MegaDemon",
		33: "EUnitKeyword_Primordial",
		34: "EUnitKeyword_Brawny",
		35: "EUnitKeyword_Savage",
		36: "EUnitKeyword_Inventor",
		37: "EUnitKeyword_Insect",
		38: "EUnitKeyword_Spectral",
		39: "EUnitKeyword_Summoner",
		40: "EUnitKeyword_SpiritBrother",
		41: "EUnitKeyword_Meepo",
		42: "EUnitKeyword_Monk",
		43: "EUnitKeyword_Brawler",
		44: "EUnitKeyword_Invoker",
		45: "EUnitKeyword_Sorceror",
		46: "EUnitKeyword_Guardian",
		47: "EUnitKeyword_Commander",
		48: "EUnitKeyword_Faerie",
		49: "EUnitKeyword_Necromancer",
		50: "EUnitKeyword_Champion",
		51: "EUnitKeyword_Wisp",
		52: "EUnitKeyword_Brutal",
		53: "EUnitKeyword_Healer",
		54: "EUnitKeyword_Vigilant",
		55: "EUnitKeyword_Void",
	}
	EUnitKeyword_value = map[string]int32{
		"EUnitKeyword_Invalid":        0,
		"EUnitKeyword_Beast":          1,
		"EUnitKeyword_Demon":          2,
		"EUnitKeyword_Dragon":         3,
		"EUnitKeyword_Dwarf":          4,
		"EUnitKeyword_Element":        5,
		"EUnitKeyword_Elf":            6,
		"EUnitKeyword_Goblin":         7,
		"EUnitKeyword_Human":          8,
		"EUnitKeyword_Naga":           9,
		"EUnitKeyword_Ogre":           10,
		"EUnitKeyword_Orc":            11,
		"EUnitKeyword_Troll":          12,
		"EUnitKeyword_Undead":         13,
		"EUnitKeyword_Satyr":          14,
		"EUnitKeyword_Assassin":       15,
		"EUnitKeyword_DemonHunter":    16,
		"EUnitKeyword_Druid":          17,
		"EUnitKeyword_Hunter":         18,
		"EUnitKeyword_Knight":         19,
		"EUnitKeyword_Mage":           20,
		"EUnitKeyword_Mech":           21,
		"EUnitKeyword_Shaman":         22,
		"EUnitKeyword_Warlock":        23,
		"EUnitKeyword_Warrior":        24,
		"EUnitKEyword_MegaWarrior":    25,
		"EUnitKeyword_MegaAssassin":   26,
		"EUnitKeyword_MegaBloodbound": 27,
		"EUnitKeyword_MegaElusive":    28,
		"EUnitKeyword_MegaWarlock":    29,
		"EUnitKeyword_MegaScaled":     30,
		"EUnitKeyword_MegaTroll":      31,
		"EUnitKeyword_MegaDemon":      32,
		"EUnitKeyword_Primordial":     33,
		"EUnitKeyword_Brawny":         34,
		"EUnitKeyword_Savage":         35,
		"EUnitKeyword_Inventor":       36,
		"EUnitKeyword_Insect":         37,
		"EUnitKeyword_Spectral":       38,
		"EUnitKeyword_Summoner":       39,
		"EUnitKeyword_SpiritBrother":  40,
		"EUnitKeyword_Meepo":          41,
		"EUnitKeyword_Monk":           42,
		"EUnitKeyword_Brawler":        43,
		"EUnitKeyword_Invoker":        44,
		"EUnitKeyword_Sorceror":       45,
		"EUnitKeyword_Guardian":       46,
		"EUnitKeyword_Commander":      47,
		"EUnitKeyword_Faerie":         48,
		"EUnitKeyword_Necromancer":    49,
		"EUnitKeyword_Champion":       50,
		"EUnitKeyword_Wisp":           51,
		"EUnitKeyword_Brutal":         52,
		"EUnitKeyword_Healer":         53,
		"EUnitKeyword_Vigilant":       54,
		"EUnitKeyword_Void":           55,
	}
)

func (x EUnitKeyword) Enum() *EUnitKeyword {
	p := new(EUnitKeyword)
	*p = x
	return p
}

func (x EUnitKeyword) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUnitKeyword) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[4].Descriptor()
}

func (EUnitKeyword) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[4]
}

func (x EUnitKeyword) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUnitKeyword) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUnitKeyword(num)
	return nil
}

// Deprecated: Use EUnitKeyword.Descriptor instead.
func (EUnitKeyword) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{4}
}

type ESynergyType int32

const (
	ESynergyType_ESynergyType_Class ESynergyType = 1
	ESynergyType_ESynergyType_Race  ESynergyType = 2
)

// Enum value maps for ESynergyType.
var (
	ESynergyType_name = map[int32]string{
		1: "ESynergyType_Class",
		2: "ESynergyType_Race",
	}
	ESynergyType_value = map[string]int32{
		"ESynergyType_Class": 1,
		"ESynergyType_Race":  2,
	}
)

func (x ESynergyType) Enum() *ESynergyType {
	p := new(ESynergyType)
	*p = x
	return p
}

func (x ESynergyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESynergyType) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[5].Descriptor()
}

func (ESynergyType) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[5]
}

func (x ESynergyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESynergyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESynergyType(num)
	return nil
}

// Deprecated: Use ESynergyType.Descriptor instead.
func (ESynergyType) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{5}
}

type EDACItemType int32

const (
	EDACItemType_EDACItemType_Invalid             EDACItemType = -1
	EDACItemType_EDACItemType_Global              EDACItemType = 0
	EDACItemType_EDACItemType_Equipment_Offensive EDACItemType = 1
	EDACItemType_EDACItemType_Equipment_Defensive EDACItemType = 2
	EDACItemType_EDACItemType_Equipment_Support   EDACItemType = 3
	EDACItemType_EDACItemType_Placeable           EDACItemType = 5
	EDACItemType_EDACItemType_Equipment_Hat       EDACItemType = 9
)

// Enum value maps for EDACItemType.
var (
	EDACItemType_name = map[int32]string{
		-1: "EDACItemType_Invalid",
		0:  "EDACItemType_Global",
		1:  "EDACItemType_Equipment_Offensive",
		2:  "EDACItemType_Equipment_Defensive",
		3:  "EDACItemType_Equipment_Support",
		5:  "EDACItemType_Placeable",
		9:  "EDACItemType_Equipment_Hat",
	}
	EDACItemType_value = map[string]int32{
		"EDACItemType_Invalid":             -1,
		"EDACItemType_Global":              0,
		"EDACItemType_Equipment_Offensive": 1,
		"EDACItemType_Equipment_Defensive": 2,
		"EDACItemType_Equipment_Support":   3,
		"EDACItemType_Placeable":           5,
		"EDACItemType_Equipment_Hat":       9,
	}
)

func (x EDACItemType) Enum() *EDACItemType {
	p := new(EDACItemType)
	*p = x
	return p
}

func (x EDACItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[6].Descriptor()
}

func (EDACItemType) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[6]
}

func (x EDACItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACItemType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACItemType(num)
	return nil
}

// Deprecated: Use EDACItemType.Descriptor instead.
func (EDACItemType) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{6}
}

type EPlayerConnectionState int32

const (
	EPlayerConnectionState_EPlayerConnectionState_Connecting   EPlayerConnectionState = 0
	EPlayerConnectionState_EPlayerConnectionState_Connected    EPlayerConnectionState = 1
	EPlayerConnectionState_EPlayerConnectionState_Disconnected EPlayerConnectionState = 2
)

// Enum value maps for EPlayerConnectionState.
var (
	EPlayerConnectionState_name = map[int32]string{
		0: "EPlayerConnectionState_Connecting",
		1: "EPlayerConnectionState_Connected",
		2: "EPlayerConnectionState_Disconnected",
	}
	EPlayerConnectionState_value = map[string]int32{
		"EPlayerConnectionState_Connecting":   0,
		"EPlayerConnectionState_Connected":    1,
		"EPlayerConnectionState_Disconnected": 2,
	}
)

func (x EPlayerConnectionState) Enum() *EPlayerConnectionState {
	p := new(EPlayerConnectionState)
	*p = x
	return p
}

func (x EPlayerConnectionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPlayerConnectionState) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[7].Descriptor()
}

func (EPlayerConnectionState) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[7]
}

func (x EPlayerConnectionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPlayerConnectionState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPlayerConnectionState(num)
	return nil
}

// Deprecated: Use EPlayerConnectionState.Descriptor instead.
func (EPlayerConnectionState) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{7}
}

type ESendDestination int32

const (
	ESendDestination_ESendDestination_Duos_Partner ESendDestination = 0
)

// Enum value maps for ESendDestination.
var (
	ESendDestination_name = map[int32]string{
		0: "ESendDestination_Duos_Partner",
	}
	ESendDestination_value = map[string]int32{
		"ESendDestination_Duos_Partner": 0,
	}
)

func (x ESendDestination) Enum() *ESendDestination {
	p := new(ESendDestination)
	*p = x
	return p
}

func (x ESendDestination) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESendDestination) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[8].Descriptor()
}

func (ESendDestination) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[8]
}

func (x ESendDestination) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESendDestination) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESendDestination(num)
	return nil
}

// Deprecated: Use ESendDestination.Descriptor instead.
func (ESendDestination) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{8}
}

type EPlayerOrder int32

const (
	EPlayerOrder_EPlayerOrder_SellUnit                EPlayerOrder = 2
	EPlayerOrder_EPlayerOrder_MoveUnit                EPlayerOrder = 3
	EPlayerOrder_EPlayerOrder_BuyXP                   EPlayerOrder = 4
	EPlayerOrder_EPlayerOrder_ReRoll                  EPlayerOrder = 5
	EPlayerOrder_EPlayerOrder_LockShop                EPlayerOrder = 6
	EPlayerOrder_EPlayerOrder_AssignEquipmentItem     EPlayerOrder = 7
	EPlayerOrder_EPlayerOrder_SelectItemRewardChoice  EPlayerOrder = 8
	EPlayerOrder_EPlayerOrder_DevGold                 EPlayerOrder = 9
	EPlayerOrder_EPlayerOrder_DevItem                 EPlayerOrder = 10
	EPlayerOrder_EPlayerOrder_DevHero                 EPlayerOrder = 12
	EPlayerOrder_EPlayerOrder_BuyAndCombine           EPlayerOrder = 15
	EPlayerOrder_EPlayerOrder_PauseGame               EPlayerOrder = 16
	EPlayerOrder_EPlayerOrder_ResumeGame              EPlayerOrder = 17
	EPlayerOrder_EPlayerOrder_SpectatePlayer          EPlayerOrder = 18
	EPlayerOrder_EPlayerOrder_RequestPlayerStats      EPlayerOrder = 19
	EPlayerOrder_EPlayerOrder_StepForward             EPlayerOrder = 20
	EPlayerOrder_EPlayerOrder_MutePlayer              EPlayerOrder = 21
	EPlayerOrder_EPlayerOrder_SelectTalent            EPlayerOrder = 22
	EPlayerOrder_EPlayerOrder_Send                    EPlayerOrder = 23
	EPlayerOrder_EPlayerOrder_CombineItem             EPlayerOrder = 24
	EPlayerOrder_EPlayerOrder_BuyCombineMove          EPlayerOrder = 25
	EPlayerOrder_EPlayerOrder_BuyAndSend              EPlayerOrder = 26
	EPlayerOrder_EPlayerOrder_SendGold                EPlayerOrder = 27
	EPlayerOrder_EPlayerOrder_DevTalent               EPlayerOrder = 28
	EPlayerOrder_EPlayerOrder_SellItem                EPlayerOrder = 29
	EPlayerOrder_EPlayerOrder_DevSetPlayerLevel       EPlayerOrder = 30
	EPlayerOrder_EPlayerOrder_DevGiveUnderlord        EPlayerOrder = 32
	EPlayerOrder_EPlayerOrder_DevSetAutosavingEnabled EPlayerOrder = 33
	EPlayerOrder_EPlayerOrder_DevRemoveAllUnits       EPlayerOrder = 34
	EPlayerOrder_EPlayerOrder_DevSetUnitRank          EPlayerOrder = 35
	EPlayerOrder_EPlayerOrder_DevRemoveAllItems       EPlayerOrder = 36
	EPlayerOrder_EPlayerOrder_ClearBoard              EPlayerOrder = 37
	EPlayerOrder_EPlayerOrder_GoToTutorialState       EPlayerOrder = 38
	EPlayerOrder_EPlayerOrder_SelectTurboBucket       EPlayerOrder = 39
	EPlayerOrder_EPlayerOrder_TurboBucketReroll       EPlayerOrder = 40
	EPlayerOrder_EPlayerOrder_SelectUnderlord         EPlayerOrder = 41
	EPlayerOrder_EPlayerOrder_DevMakeTestBot          EPlayerOrder = 42
	EPlayerOrder_EPlayerOrder_ItemRewardChoiceReroll  EPlayerOrder = 43
	EPlayerOrder_EPlayerOrder_BuyPuzzleUnit           EPlayerOrder = 44
	EPlayerOrder_EPlayerOrder_Dungeon_AdvancePhase    EPlayerOrder = 45
)

// Enum value maps for EPlayerOrder.
var (
	EPlayerOrder_name = map[int32]string{
		2:  "EPlayerOrder_SellUnit",
		3:  "EPlayerOrder_MoveUnit",
		4:  "EPlayerOrder_BuyXP",
		5:  "EPlayerOrder_ReRoll",
		6:  "EPlayerOrder_LockShop",
		7:  "EPlayerOrder_AssignEquipmentItem",
		8:  "EPlayerOrder_SelectItemRewardChoice",
		9:  "EPlayerOrder_DevGold",
		10: "EPlayerOrder_DevItem",
		12: "EPlayerOrder_DevHero",
		15: "EPlayerOrder_BuyAndCombine",
		16: "EPlayerOrder_PauseGame",
		17: "EPlayerOrder_ResumeGame",
		18: "EPlayerOrder_SpectatePlayer",
		19: "EPlayerOrder_RequestPlayerStats",
		20: "EPlayerOrder_StepForward",
		21: "EPlayerOrder_MutePlayer",
		22: "EPlayerOrder_SelectTalent",
		23: "EPlayerOrder_Send",
		24: "EPlayerOrder_CombineItem",
		25: "EPlayerOrder_BuyCombineMove",
		26: "EPlayerOrder_BuyAndSend",
		27: "EPlayerOrder_SendGold",
		28: "EPlayerOrder_DevTalent",
		29: "EPlayerOrder_SellItem",
		30: "EPlayerOrder_DevSetPlayerLevel",
		32: "EPlayerOrder_DevGiveUnderlord",
		33: "EPlayerOrder_DevSetAutosavingEnabled",
		34: "EPlayerOrder_DevRemoveAllUnits",
		35: "EPlayerOrder_DevSetUnitRank",
		36: "EPlayerOrder_DevRemoveAllItems",
		37: "EPlayerOrder_ClearBoard",
		38: "EPlayerOrder_GoToTutorialState",
		39: "EPlayerOrder_SelectTurboBucket",
		40: "EPlayerOrder_TurboBucketReroll",
		41: "EPlayerOrder_SelectUnderlord",
		42: "EPlayerOrder_DevMakeTestBot",
		43: "EPlayerOrder_ItemRewardChoiceReroll",
		44: "EPlayerOrder_BuyPuzzleUnit",
		45: "EPlayerOrder_Dungeon_AdvancePhase",
	}
	EPlayerOrder_value = map[string]int32{
		"EPlayerOrder_SellUnit":                2,
		"EPlayerOrder_MoveUnit":                3,
		"EPlayerOrder_BuyXP":                   4,
		"EPlayerOrder_ReRoll":                  5,
		"EPlayerOrder_LockShop":                6,
		"EPlayerOrder_AssignEquipmentItem":     7,
		"EPlayerOrder_SelectItemRewardChoice":  8,
		"EPlayerOrder_DevGold":                 9,
		"EPlayerOrder_DevItem":                 10,
		"EPlayerOrder_DevHero":                 12,
		"EPlayerOrder_BuyAndCombine":           15,
		"EPlayerOrder_PauseGame":               16,
		"EPlayerOrder_ResumeGame":              17,
		"EPlayerOrder_SpectatePlayer":          18,
		"EPlayerOrder_RequestPlayerStats":      19,
		"EPlayerOrder_StepForward":             20,
		"EPlayerOrder_MutePlayer":              21,
		"EPlayerOrder_SelectTalent":            22,
		"EPlayerOrder_Send":                    23,
		"EPlayerOrder_CombineItem":             24,
		"EPlayerOrder_BuyCombineMove":          25,
		"EPlayerOrder_BuyAndSend":              26,
		"EPlayerOrder_SendGold":                27,
		"EPlayerOrder_DevTalent":               28,
		"EPlayerOrder_SellItem":                29,
		"EPlayerOrder_DevSetPlayerLevel":       30,
		"EPlayerOrder_DevGiveUnderlord":        32,
		"EPlayerOrder_DevSetAutosavingEnabled": 33,
		"EPlayerOrder_DevRemoveAllUnits":       34,
		"EPlayerOrder_DevSetUnitRank":          35,
		"EPlayerOrder_DevRemoveAllItems":       36,
		"EPlayerOrder_ClearBoard":              37,
		"EPlayerOrder_GoToTutorialState":       38,
		"EPlayerOrder_SelectTurboBucket":       39,
		"EPlayerOrder_TurboBucketReroll":       40,
		"EPlayerOrder_SelectUnderlord":         41,
		"EPlayerOrder_DevMakeTestBot":          42,
		"EPlayerOrder_ItemRewardChoiceReroll":  43,
		"EPlayerOrder_BuyPuzzleUnit":           44,
		"EPlayerOrder_Dungeon_AdvancePhase":    45,
	}
)

func (x EPlayerOrder) Enum() *EPlayerOrder {
	p := new(EPlayerOrder)
	*p = x
	return p
}

func (x EPlayerOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPlayerOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[9].Descriptor()
}

func (EPlayerOrder) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[9]
}

func (x EPlayerOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPlayerOrder) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPlayerOrder(num)
	return nil
}

// Deprecated: Use EPlayerOrder.Descriptor instead.
func (EPlayerOrder) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{9}
}

type ERoundCombatResult int32

const (
	ERoundCombatResult_ERoundCombatResult_Draw    ERoundCombatResult = 0
	ERoundCombatResult_ERoundCombatResult_HomeWin ERoundCombatResult = 1
	ERoundCombatResult_ERoundCombatResult_AwayWin ERoundCombatResult = 2
)

// Enum value maps for ERoundCombatResult.
var (
	ERoundCombatResult_name = map[int32]string{
		0: "ERoundCombatResult_Draw",
		1: "ERoundCombatResult_HomeWin",
		2: "ERoundCombatResult_AwayWin",
	}
	ERoundCombatResult_value = map[string]int32{
		"ERoundCombatResult_Draw":    0,
		"ERoundCombatResult_HomeWin": 1,
		"ERoundCombatResult_AwayWin": 2,
	}
)

func (x ERoundCombatResult) Enum() *ERoundCombatResult {
	p := new(ERoundCombatResult)
	*p = x
	return p
}

func (x ERoundCombatResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERoundCombatResult) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[10].Descriptor()
}

func (ERoundCombatResult) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[10]
}

func (x ERoundCombatResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERoundCombatResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERoundCombatResult(num)
	return nil
}

// Deprecated: Use ERoundCombatResult.Descriptor instead.
func (ERoundCombatResult) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{10}
}

type EDamageSourceType int32

const (
	EDamageSourceType_k_EDamageSourceType_Round         EDamageSourceType = 0
	EDamageSourceType_k_EDamageSourceType_Unit          EDamageSourceType = 1
	EDamageSourceType_k_EDamageSourceType_Item          EDamageSourceType = 2
	EDamageSourceType_k_EDamageSourceType_DuosNetDamage EDamageSourceType = 3
)

// Enum value maps for EDamageSourceType.
var (
	EDamageSourceType_name = map[int32]string{
		0: "k_EDamageSourceType_Round",
		1: "k_EDamageSourceType_Unit",
		2: "k_EDamageSourceType_Item",
		3: "k_EDamageSourceType_DuosNetDamage",
	}
	EDamageSourceType_value = map[string]int32{
		"k_EDamageSourceType_Round":         0,
		"k_EDamageSourceType_Unit":          1,
		"k_EDamageSourceType_Item":          2,
		"k_EDamageSourceType_DuosNetDamage": 3,
	}
)

func (x EDamageSourceType) Enum() *EDamageSourceType {
	p := new(EDamageSourceType)
	*p = x
	return p
}

func (x EDamageSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDamageSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[11].Descriptor()
}

func (EDamageSourceType) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[11]
}

func (x EDamageSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDamageSourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDamageSourceType(num)
	return nil
}

// Deprecated: Use EDamageSourceType.Descriptor instead.
func (EDamageSourceType) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{11}
}

type ERoundVictoryLevel int32

const (
	ERoundVictoryLevel_ERoundVictoryLevel_HomeDecisive ERoundVictoryLevel = 0
	ERoundVictoryLevel_ERoundVictoryLevel_HomeNarrow   ERoundVictoryLevel = 1
	ERoundVictoryLevel_ERoundVictoryLevel_HomeFlawless ERoundVictoryLevel = 2
	ERoundVictoryLevel_ERoundVictoryLevel_HomeNormal   ERoundVictoryLevel = 3
	ERoundVictoryLevel_ERoundVictoryLevel_AwayDecisive ERoundVictoryLevel = 4
	ERoundVictoryLevel_ERoundVictoryLevel_AwayNarrow   ERoundVictoryLevel = 5
	ERoundVictoryLevel_ERoundVictoryLevel_AwayFlawless ERoundVictoryLevel = 6
	ERoundVictoryLevel_ERoundVictoryLevel_AwayNormal   ERoundVictoryLevel = 7
	ERoundVictoryLevel_ERoundVictoryLevel_Draw         ERoundVictoryLevel = 8
)

// Enum value maps for ERoundVictoryLevel.
var (
	ERoundVictoryLevel_name = map[int32]string{
		0: "ERoundVictoryLevel_HomeDecisive",
		1: "ERoundVictoryLevel_HomeNarrow",
		2: "ERoundVictoryLevel_HomeFlawless",
		3: "ERoundVictoryLevel_HomeNormal",
		4: "ERoundVictoryLevel_AwayDecisive",
		5: "ERoundVictoryLevel_AwayNarrow",
		6: "ERoundVictoryLevel_AwayFlawless",
		7: "ERoundVictoryLevel_AwayNormal",
		8: "ERoundVictoryLevel_Draw",
	}
	ERoundVictoryLevel_value = map[string]int32{
		"ERoundVictoryLevel_HomeDecisive": 0,
		"ERoundVictoryLevel_HomeNarrow":   1,
		"ERoundVictoryLevel_HomeFlawless": 2,
		"ERoundVictoryLevel_HomeNormal":   3,
		"ERoundVictoryLevel_AwayDecisive": 4,
		"ERoundVictoryLevel_AwayNarrow":   5,
		"ERoundVictoryLevel_AwayFlawless": 6,
		"ERoundVictoryLevel_AwayNormal":   7,
		"ERoundVictoryLevel_Draw":         8,
	}
)

func (x ERoundVictoryLevel) Enum() *ERoundVictoryLevel {
	p := new(ERoundVictoryLevel)
	*p = x
	return p
}

func (x ERoundVictoryLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERoundVictoryLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[12].Descriptor()
}

func (ERoundVictoryLevel) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[12]
}

func (x ERoundVictoryLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERoundVictoryLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERoundVictoryLevel(num)
	return nil
}

// Deprecated: Use ERoundVictoryLevel.Descriptor instead.
func (ERoundVictoryLevel) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{12}
}

type EDACPuzzleRule int32

const (
	EDACPuzzleRule_k_EDACPuzzleRule_None                EDACPuzzleRule = 0
	EDACPuzzleRule_k_EDACPuzzleRule_UnitCountLimit      EDACPuzzleRule = 1
	EDACPuzzleRule_k_EDACPuzzleRule_UnitStarLimit       EDACPuzzleRule = 2
	EDACPuzzleRule_k_EDACPuzzleRule_BoardCostLimit      EDACPuzzleRule = 3
	EDACPuzzleRule_k_EDACPuzzleRule_ItemCountLimit      EDACPuzzleRule = 4
	EDACPuzzleRule_k_EDACPuzzleRule_ValidBoardPositions EDACPuzzleRule = 5
	EDACPuzzleRule_k_EDACPuzzleRule_MaxCombatDuration   EDACPuzzleRule = 6
	EDACPuzzleRule_k_EDACPuzzleRule_Custom1             EDACPuzzleRule = 100
	EDACPuzzleRule_k_EDACPuzzleRule_Custom2             EDACPuzzleRule = 101
	EDACPuzzleRule_k_EDACPuzzleRule_Custom3             EDACPuzzleRule = 102
	EDACPuzzleRule_k_EDACPuzzleRule_Custom4             EDACPuzzleRule = 103
	EDACPuzzleRule_k_EDACPuzzleRule_AllianceAllowed1    EDACPuzzleRule = 110
	EDACPuzzleRule_k_EDACPuzzleRule_AllianceAllowed2    EDACPuzzleRule = 111
	EDACPuzzleRule_k_EDACPuzzleRule_AllianceAllowed3    EDACPuzzleRule = 112
	EDACPuzzleRule_k_EDACPuzzleRule_AllianceAllowed4    EDACPuzzleRule = 113
	EDACPuzzleRule_k_EDACPuzzleRule_AllianceDisllowed1  EDACPuzzleRule = 120
	EDACPuzzleRule_k_EDACPuzzleRule_AllianceDisllowed2  EDACPuzzleRule = 121
	EDACPuzzleRule_k_EDACPuzzleRule_AllianceDisllowed3  EDACPuzzleRule = 122
	EDACPuzzleRule_k_EDACPuzzleRule_AllianceDisllowed4  EDACPuzzleRule = 123
	EDACPuzzleRule_k_EDACPuzzleRule_UnitAllowed1        EDACPuzzleRule = 130
	EDACPuzzleRule_k_EDACPuzzleRule_UnitAllowed2        EDACPuzzleRule = 131
	EDACPuzzleRule_k_EDACPuzzleRule_UnitAllowed3        EDACPuzzleRule = 132
	EDACPuzzleRule_k_EDACPuzzleRule_UnitAllowed4        EDACPuzzleRule = 133
	EDACPuzzleRule_k_EDACPuzzleRule_UnitDisallowed1     EDACPuzzleRule = 140
	EDACPuzzleRule_k_EDACPuzzleRule_UnitDisallowed2     EDACPuzzleRule = 141
	EDACPuzzleRule_k_EDACPuzzleRule_UnitDisallowed3     EDACPuzzleRule = 142
	EDACPuzzleRule_k_EDACPuzzleRule_UnitDisallowed4     EDACPuzzleRule = 143
)

// Enum value maps for EDACPuzzleRule.
var (
	EDACPuzzleRule_name = map[int32]string{
		0:   "k_EDACPuzzleRule_None",
		1:   "k_EDACPuzzleRule_UnitCountLimit",
		2:   "k_EDACPuzzleRule_UnitStarLimit",
		3:   "k_EDACPuzzleRule_BoardCostLimit",
		4:   "k_EDACPuzzleRule_ItemCountLimit",
		5:   "k_EDACPuzzleRule_ValidBoardPositions",
		6:   "k_EDACPuzzleRule_MaxCombatDuration",
		100: "k_EDACPuzzleRule_Custom1",
		101: "k_EDACPuzzleRule_Custom2",
		102: "k_EDACPuzzleRule_Custom3",
		103: "k_EDACPuzzleRule_Custom4",
		110: "k_EDACPuzzleRule_AllianceAllowed1",
		111: "k_EDACPuzzleRule_AllianceAllowed2",
		112: "k_EDACPuzzleRule_AllianceAllowed3",
		113: "k_EDACPuzzleRule_AllianceAllowed4",
		120: "k_EDACPuzzleRule_AllianceDisllowed1",
		121: "k_EDACPuzzleRule_AllianceDisllowed2",
		122: "k_EDACPuzzleRule_AllianceDisllowed3",
		123: "k_EDACPuzzleRule_AllianceDisllowed4",
		130: "k_EDACPuzzleRule_UnitAllowed1",
		131: "k_EDACPuzzleRule_UnitAllowed2",
		132: "k_EDACPuzzleRule_UnitAllowed3",
		133: "k_EDACPuzzleRule_UnitAllowed4",
		140: "k_EDACPuzzleRule_UnitDisallowed1",
		141: "k_EDACPuzzleRule_UnitDisallowed2",
		142: "k_EDACPuzzleRule_UnitDisallowed3",
		143: "k_EDACPuzzleRule_UnitDisallowed4",
	}
	EDACPuzzleRule_value = map[string]int32{
		"k_EDACPuzzleRule_None":                0,
		"k_EDACPuzzleRule_UnitCountLimit":      1,
		"k_EDACPuzzleRule_UnitStarLimit":       2,
		"k_EDACPuzzleRule_BoardCostLimit":      3,
		"k_EDACPuzzleRule_ItemCountLimit":      4,
		"k_EDACPuzzleRule_ValidBoardPositions": 5,
		"k_EDACPuzzleRule_MaxCombatDuration":   6,
		"k_EDACPuzzleRule_Custom1":             100,
		"k_EDACPuzzleRule_Custom2":             101,
		"k_EDACPuzzleRule_Custom3":             102,
		"k_EDACPuzzleRule_Custom4":             103,
		"k_EDACPuzzleRule_AllianceAllowed1":    110,
		"k_EDACPuzzleRule_AllianceAllowed2":    111,
		"k_EDACPuzzleRule_AllianceAllowed3":    112,
		"k_EDACPuzzleRule_AllianceAllowed4":    113,
		"k_EDACPuzzleRule_AllianceDisllowed1":  120,
		"k_EDACPuzzleRule_AllianceDisllowed2":  121,
		"k_EDACPuzzleRule_AllianceDisllowed3":  122,
		"k_EDACPuzzleRule_AllianceDisllowed4":  123,
		"k_EDACPuzzleRule_UnitAllowed1":        130,
		"k_EDACPuzzleRule_UnitAllowed2":        131,
		"k_EDACPuzzleRule_UnitAllowed3":        132,
		"k_EDACPuzzleRule_UnitAllowed4":        133,
		"k_EDACPuzzleRule_UnitDisallowed1":     140,
		"k_EDACPuzzleRule_UnitDisallowed2":     141,
		"k_EDACPuzzleRule_UnitDisallowed3":     142,
		"k_EDACPuzzleRule_UnitDisallowed4":     143,
	}
)

func (x EDACPuzzleRule) Enum() *EDACPuzzleRule {
	p := new(EDACPuzzleRule)
	*p = x
	return p
}

func (x EDACPuzzleRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACPuzzleRule) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[13].Descriptor()
}

func (EDACPuzzleRule) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[13]
}

func (x EDACPuzzleRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACPuzzleRule) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACPuzzleRule(num)
	return nil
}

// Deprecated: Use EDACPuzzleRule.Descriptor instead.
func (EDACPuzzleRule) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{13}
}

type EDACDungeonRoomType int32

const (
	EDACDungeonRoomType_k_EDACDungeonRoomType_None           EDACDungeonRoomType = 0
	EDACDungeonRoomType_k_EDACDungeonRoomType_Shop           EDACDungeonRoomType = 1
	EDACDungeonRoomType_k_EDACDungeonRoomType_Mystery        EDACDungeonRoomType = 2
	EDACDungeonRoomType_k_EDACDungeonRoomType_MiniGame       EDACDungeonRoomType = 3
	EDACDungeonRoomType_k_EDACDungeonRoomType_StandardCombat EDACDungeonRoomType = 4
	EDACDungeonRoomType_k_EDACDungeonRoomType_MiniBoss       EDACDungeonRoomType = 5
	EDACDungeonRoomType_k_EDACDungeonRoomType_Boss           EDACDungeonRoomType = 6
)

// Enum value maps for EDACDungeonRoomType.
var (
	EDACDungeonRoomType_name = map[int32]string{
		0: "k_EDACDungeonRoomType_None",
		1: "k_EDACDungeonRoomType_Shop",
		2: "k_EDACDungeonRoomType_Mystery",
		3: "k_EDACDungeonRoomType_MiniGame",
		4: "k_EDACDungeonRoomType_StandardCombat",
		5: "k_EDACDungeonRoomType_MiniBoss",
		6: "k_EDACDungeonRoomType_Boss",
	}
	EDACDungeonRoomType_value = map[string]int32{
		"k_EDACDungeonRoomType_None":           0,
		"k_EDACDungeonRoomType_Shop":           1,
		"k_EDACDungeonRoomType_Mystery":        2,
		"k_EDACDungeonRoomType_MiniGame":       3,
		"k_EDACDungeonRoomType_StandardCombat": 4,
		"k_EDACDungeonRoomType_MiniBoss":       5,
		"k_EDACDungeonRoomType_Boss":           6,
	}
)

func (x EDACDungeonRoomType) Enum() *EDACDungeonRoomType {
	p := new(EDACDungeonRoomType)
	*p = x
	return p
}

func (x EDACDungeonRoomType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACDungeonRoomType) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[14].Descriptor()
}

func (EDACDungeonRoomType) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[14]
}

func (x EDACDungeonRoomType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACDungeonRoomType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACDungeonRoomType(num)
	return nil
}

// Deprecated: Use EDACDungeonRoomType.Descriptor instead.
func (EDACDungeonRoomType) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{14}
}

type EDACDungeonPhase int32

const (
	EDACDungeonPhase_k_EDACDungeonPhase_None                     EDACDungeonPhase = 0
	EDACDungeonPhase_k_EDACDungeonPhase_Intro_ChoosingUnderlord  EDACDungeonPhase = 1
	EDACDungeonPhase_k_EDACDungeonPhase_Intro_ChoosingFirstUnit  EDACDungeonPhase = 2
	EDACDungeonPhase_k_EDACDungeonPhase_Room_Setup               EDACDungeonPhase = 3
	EDACDungeonPhase_k_EDACDungeonPhase_Room_Main                EDACDungeonPhase = 4
	EDACDungeonPhase_k_EDACDungeonPhase_Room_Post_Rewards        EDACDungeonPhase = 5
	EDACDungeonPhase_k_EDACDungeonPhase_Room_Post_ChooseNextRoom EDACDungeonPhase = 6
	EDACDungeonPhase_k_EDACDungeonPhase_Victory                  EDACDungeonPhase = 7
	EDACDungeonPhase_k_EDACDungeonPhase_Defeat                   EDACDungeonPhase = 8
)

// Enum value maps for EDACDungeonPhase.
var (
	EDACDungeonPhase_name = map[int32]string{
		0: "k_EDACDungeonPhase_None",
		1: "k_EDACDungeonPhase_Intro_ChoosingUnderlord",
		2: "k_EDACDungeonPhase_Intro_ChoosingFirstUnit",
		3: "k_EDACDungeonPhase_Room_Setup",
		4: "k_EDACDungeonPhase_Room_Main",
		5: "k_EDACDungeonPhase_Room_Post_Rewards",
		6: "k_EDACDungeonPhase_Room_Post_ChooseNextRoom",
		7: "k_EDACDungeonPhase_Victory",
		8: "k_EDACDungeonPhase_Defeat",
	}
	EDACDungeonPhase_value = map[string]int32{
		"k_EDACDungeonPhase_None":                     0,
		"k_EDACDungeonPhase_Intro_ChoosingUnderlord":  1,
		"k_EDACDungeonPhase_Intro_ChoosingFirstUnit":  2,
		"k_EDACDungeonPhase_Room_Setup":               3,
		"k_EDACDungeonPhase_Room_Main":                4,
		"k_EDACDungeonPhase_Room_Post_Rewards":        5,
		"k_EDACDungeonPhase_Room_Post_ChooseNextRoom": 6,
		"k_EDACDungeonPhase_Victory":                  7,
		"k_EDACDungeonPhase_Defeat":                   8,
	}
)

func (x EDACDungeonPhase) Enum() *EDACDungeonPhase {
	p := new(EDACDungeonPhase)
	*p = x
	return p
}

func (x EDACDungeonPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACDungeonPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[15].Descriptor()
}

func (EDACDungeonPhase) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[15]
}

func (x EDACDungeonPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACDungeonPhase) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACDungeonPhase(num)
	return nil
}

// Deprecated: Use EDACDungeonPhase.Descriptor instead.
func (EDACDungeonPhase) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{15}
}

type EUnitAIState int32

const (
	EUnitAIState_EUnitAIState_Idle             EUnitAIState = 0
	EUnitAIState_EUnitAIState_MoveToAttack     EUnitAIState = 1
	EUnitAIState_EUnitAIState_MoveToLocation   EUnitAIState = 2
	EUnitAIState_EUnitAIState_Attack           EUnitAIState = 3
	EUnitAIState_EUnitAIState_CastAbility      EUnitAIState = 4
	EUnitAIState_EUnitAIState_Dead             EUnitAIState = 5
	EUnitAIState_EUnitAIState_Portrait         EUnitAIState = 6
	EUnitAIState_EUnitAIState_WalkBack         EUnitAIState = 7
	EUnitAIState_EUnitAIState_Celebrate        EUnitAIState = 8
	EUnitAIState_EUnitAIState_RoundEndTeleport EUnitAIState = 9
	EUnitAIState_EUnitAIState_Resurrecting     EUnitAIState = 10
	EUnitAIState_EUnitAIState_WalkThroughGate  EUnitAIState = 11
	EUnitAIState_EUnitAIState_MoveInFear       EUnitAIState = 12
)

// Enum value maps for EUnitAIState.
var (
	EUnitAIState_name = map[int32]string{
		0:  "EUnitAIState_Idle",
		1:  "EUnitAIState_MoveToAttack",
		2:  "EUnitAIState_MoveToLocation",
		3:  "EUnitAIState_Attack",
		4:  "EUnitAIState_CastAbility",
		5:  "EUnitAIState_Dead",
		6:  "EUnitAIState_Portrait",
		7:  "EUnitAIState_WalkBack",
		8:  "EUnitAIState_Celebrate",
		9:  "EUnitAIState_RoundEndTeleport",
		10: "EUnitAIState_Resurrecting",
		11: "EUnitAIState_WalkThroughGate",
		12: "EUnitAIState_MoveInFear",
	}
	EUnitAIState_value = map[string]int32{
		"EUnitAIState_Idle":             0,
		"EUnitAIState_MoveToAttack":     1,
		"EUnitAIState_MoveToLocation":   2,
		"EUnitAIState_Attack":           3,
		"EUnitAIState_CastAbility":      4,
		"EUnitAIState_Dead":             5,
		"EUnitAIState_Portrait":         6,
		"EUnitAIState_WalkBack":         7,
		"EUnitAIState_Celebrate":        8,
		"EUnitAIState_RoundEndTeleport": 9,
		"EUnitAIState_Resurrecting":     10,
		"EUnitAIState_WalkThroughGate":  11,
		"EUnitAIState_MoveInFear":       12,
	}
)

func (x EUnitAIState) Enum() *EUnitAIState {
	p := new(EUnitAIState)
	*p = x
	return p
}

func (x EUnitAIState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUnitAIState) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[16].Descriptor()
}

func (EUnitAIState) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[16]
}

func (x EUnitAIState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUnitAIState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUnitAIState(num)
	return nil
}

// Deprecated: Use EUnitAIState.Descriptor instead.
func (EUnitAIState) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{16}
}

type EDACIncidentType int32

const (
	EDACIncidentType_EDACIncidentType_None           EDACIncidentType = 0
	EDACIncidentType_EDACIncidentType_DamagePhysical EDACIncidentType = 1
	EDACIncidentType_EDACIncidentType_DamageMagical  EDACIncidentType = 2
	EDACIncidentType_EDACIncidentType_DamagePure     EDACIncidentType = 3
	EDACIncidentType_EDACIncidentType_Died           EDACIncidentType = 4
	EDACIncidentType_EDACIncidentType_Heal           EDACIncidentType = 5
)

// Enum value maps for EDACIncidentType.
var (
	EDACIncidentType_name = map[int32]string{
		0: "EDACIncidentType_None",
		1: "EDACIncidentType_DamagePhysical",
		2: "EDACIncidentType_DamageMagical",
		3: "EDACIncidentType_DamagePure",
		4: "EDACIncidentType_Died",
		5: "EDACIncidentType_Heal",
	}
	EDACIncidentType_value = map[string]int32{
		"EDACIncidentType_None":           0,
		"EDACIncidentType_DamagePhysical": 1,
		"EDACIncidentType_DamageMagical":  2,
		"EDACIncidentType_DamagePure":     3,
		"EDACIncidentType_Died":           4,
		"EDACIncidentType_Heal":           5,
	}
)

func (x EDACIncidentType) Enum() *EDACIncidentType {
	p := new(EDACIncidentType)
	*p = x
	return p
}

func (x EDACIncidentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACIncidentType) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[17].Descriptor()
}

func (EDACIncidentType) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[17]
}

func (x EDACIncidentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACIncidentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACIncidentType(num)
	return nil
}

// Deprecated: Use EDACIncidentType.Descriptor instead.
func (EDACIncidentType) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{17}
}

type EDACNetBuffer int32

const (
	EDACNetBuffer_k_eDACNetBuffer_MatchState               EDACNetBuffer = 0
	EDACNetBuffer_k_eDACNetBuffer_RoundCombat              EDACNetBuffer = 1
	EDACNetBuffer_k_eDACNetBuffer_PublicPlayerState        EDACNetBuffer = 2
	EDACNetBuffer_k_eDACNetBuffer_PrivatePlayerState       EDACNetBuffer = 3
	EDACNetBuffer_k_eDACNetBuffer_Debug                    EDACNetBuffer = 4
	EDACNetBuffer_k_eDACNetBuffer_ModifierName             EDACNetBuffer = 5
	EDACNetBuffer_k_eDACNetBuffer_IndividualPostMatchStats EDACNetBuffer = 6
	EDACNetBuffer_k_eDACNetBuffer_PublicPostMatchStats     EDACNetBuffer = 7
	EDACNetBuffer_k_eDACNetBuffer_GameModeState            EDACNetBuffer = 8
	EDACNetBuffer_k_eDACNetBuffer_RoundCombatGlobal        EDACNetBuffer = 9
)

// Enum value maps for EDACNetBuffer.
var (
	EDACNetBuffer_name = map[int32]string{
		0: "k_eDACNetBuffer_MatchState",
		1: "k_eDACNetBuffer_RoundCombat",
		2: "k_eDACNetBuffer_PublicPlayerState",
		3: "k_eDACNetBuffer_PrivatePlayerState",
		4: "k_eDACNetBuffer_Debug",
		5: "k_eDACNetBuffer_ModifierName",
		6: "k_eDACNetBuffer_IndividualPostMatchStats",
		7: "k_eDACNetBuffer_PublicPostMatchStats",
		8: "k_eDACNetBuffer_GameModeState",
		9: "k_eDACNetBuffer_RoundCombatGlobal",
	}
	EDACNetBuffer_value = map[string]int32{
		"k_eDACNetBuffer_MatchState":               0,
		"k_eDACNetBuffer_RoundCombat":              1,
		"k_eDACNetBuffer_PublicPlayerState":        2,
		"k_eDACNetBuffer_PrivatePlayerState":       3,
		"k_eDACNetBuffer_Debug":                    4,
		"k_eDACNetBuffer_ModifierName":             5,
		"k_eDACNetBuffer_IndividualPostMatchStats": 6,
		"k_eDACNetBuffer_PublicPostMatchStats":     7,
		"k_eDACNetBuffer_GameModeState":            8,
		"k_eDACNetBuffer_RoundCombatGlobal":        9,
	}
)

func (x EDACNetBuffer) Enum() *EDACNetBuffer {
	p := new(EDACNetBuffer)
	*p = x
	return p
}

func (x EDACNetBuffer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDACNetBuffer) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[18].Descriptor()
}

func (EDACNetBuffer) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[18]
}

func (x EDACNetBuffer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDACNetBuffer) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDACNetBuffer(num)
	return nil
}

// Deprecated: Use EDACNetBuffer.Descriptor instead.
func (EDACNetBuffer) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{18}
}

type EInGameChatType int32

const (
	EInGameChatType_k_eInGameChatType_Global EInGameChatType = 0
	EInGameChatType_k_eInGameChatType_Combat EInGameChatType = 1
)

// Enum value maps for EInGameChatType.
var (
	EInGameChatType_name = map[int32]string{
		0: "k_eInGameChatType_Global",
		1: "k_eInGameChatType_Combat",
	}
	EInGameChatType_value = map[string]int32{
		"k_eInGameChatType_Global": 0,
		"k_eInGameChatType_Combat": 1,
	}
)

func (x EInGameChatType) Enum() *EInGameChatType {
	p := new(EInGameChatType)
	*p = x
	return p
}

func (x EInGameChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EInGameChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[19].Descriptor()
}

func (EInGameChatType) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[19]
}

func (x EInGameChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EInGameChatType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EInGameChatType(num)
	return nil
}

// Deprecated: Use EInGameChatType.Descriptor instead.
func (EInGameChatType) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{19}
}

type EClickType int32

const (
	EClickType_k_eClickType_Left  EClickType = 0
	EClickType_k_eClickType_Right EClickType = 1
)

// Enum value maps for EClickType.
var (
	EClickType_name = map[int32]string{
		0: "k_eClickType_Left",
		1: "k_eClickType_Right",
	}
	EClickType_value = map[string]int32{
		"k_eClickType_Left":  0,
		"k_eClickType_Right": 1,
	}
)

func (x EClickType) Enum() *EClickType {
	p := new(EClickType)
	*p = x
	return p
}

func (x EClickType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClickType) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[20].Descriptor()
}

func (EClickType) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[20]
}

func (x EClickType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EClickType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EClickType(num)
	return nil
}

// Deprecated: Use EClickType.Descriptor instead.
func (EClickType) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{20}
}

type EMapPropCommand int32

const (
	EMapPropCommand_k_eMapPropCommand_None  EMapPropCommand = 0
	EMapPropCommand_k_eMapPropCommand_Click EMapPropCommand = 1
)

// Enum value maps for EMapPropCommand.
var (
	EMapPropCommand_name = map[int32]string{
		0: "k_eMapPropCommand_None",
		1: "k_eMapPropCommand_Click",
	}
	EMapPropCommand_value = map[string]int32{
		"k_eMapPropCommand_None":  0,
		"k_eMapPropCommand_Click": 1,
	}
)

func (x EMapPropCommand) Enum() *EMapPropCommand {
	p := new(EMapPropCommand)
	*p = x
	return p
}

func (x EMapPropCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMapPropCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[21].Descriptor()
}

func (EMapPropCommand) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[21]
}

func (x EMapPropCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMapPropCommand) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMapPropCommand(num)
	return nil
}

// Deprecated: Use EMapPropCommand.Descriptor instead.
func (EMapPropCommand) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{21}
}

type EDuosMessageType int32

const (
	EDuosMessageType_k_eDuosMessageType_None                EDuosMessageType = 0
	EDuosMessageType_k_eDuosMessageType_IWant               EDuosMessageType = 1001
	EDuosMessageType_k_eDuosMessageType_DoYouWant           EDuosMessageType = 1002
	EDuosMessageType_k_eDuosMessageType_YesWant             EDuosMessageType = 1003
	EDuosMessageType_k_eDuosMessageType_NoWant              EDuosMessageType = 1004
	EDuosMessageType_k_eDuosMessageType_FreeYourBenchFor    EDuosMessageType = 1005
	EDuosMessageType_k_eDuosMessageType_Thanks              EDuosMessageType = 1006
	EDuosMessageType_k_eDuosMessageType_Sent1Gold           EDuosMessageType = 1007
	EDuosMessageType_k_eDuosMessageType_Sent5Gold           EDuosMessageType = 1008
	EDuosMessageType_k_eDuosMessageType_INoLongerWant       EDuosMessageType = 1009
	EDuosMessageType_k_eDuosMessageType_WantGold            EDuosMessageType = 1010
	EDuosMessageType_k_eDuosMessageType_LevelUpQuestion     EDuosMessageType = 1011
	EDuosMessageType_k_eDuosMessageType_SpendRerollQuestion EDuosMessageType = 1012
)

// Enum value maps for EDuosMessageType.
var (
	EDuosMessageType_name = map[int32]string{
		0:    "k_eDuosMessageType_None",
		1001: "k_eDuosMessageType_IWant",
		1002: "k_eDuosMessageType_DoYouWant",
		1003: "k_eDuosMessageType_YesWant",
		1004: "k_eDuosMessageType_NoWant",
		1005: "k_eDuosMessageType_FreeYourBenchFor",
		1006: "k_eDuosMessageType_Thanks",
		1007: "k_eDuosMessageType_Sent1Gold",
		1008: "k_eDuosMessageType_Sent5Gold",
		1009: "k_eDuosMessageType_INoLongerWant",
		1010: "k_eDuosMessageType_WantGold",
		1011: "k_eDuosMessageType_LevelUpQuestion",
		1012: "k_eDuosMessageType_SpendRerollQuestion",
	}
	EDuosMessageType_value = map[string]int32{
		"k_eDuosMessageType_None":                0,
		"k_eDuosMessageType_IWant":               1001,
		"k_eDuosMessageType_DoYouWant":           1002,
		"k_eDuosMessageType_YesWant":             1003,
		"k_eDuosMessageType_NoWant":              1004,
		"k_eDuosMessageType_FreeYourBenchFor":    1005,
		"k_eDuosMessageType_Thanks":              1006,
		"k_eDuosMessageType_Sent1Gold":           1007,
		"k_eDuosMessageType_Sent5Gold":           1008,
		"k_eDuosMessageType_INoLongerWant":       1009,
		"k_eDuosMessageType_WantGold":            1010,
		"k_eDuosMessageType_LevelUpQuestion":     1011,
		"k_eDuosMessageType_SpendRerollQuestion": 1012,
	}
)

func (x EDuosMessageType) Enum() *EDuosMessageType {
	p := new(EDuosMessageType)
	*p = x
	return p
}

func (x EDuosMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDuosMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[22].Descriptor()
}

func (EDuosMessageType) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[22]
}

func (x EDuosMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDuosMessageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDuosMessageType(num)
	return nil
}

// Deprecated: Use EDuosMessageType.Descriptor instead.
func (EDuosMessageType) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{22}
}

type EDuosMessageTargetType int32

const (
	EDuosMessageTargetType_k_eDuosMessageTargetType_None    EDuosMessageTargetType = 0
	EDuosMessageTargetType_k_eDuosMessageTargetType_Unit    EDuosMessageTargetType = 1
	EDuosMessageTargetType_k_eDuosMessageTargetType_Synergy EDuosMessageTargetType = 2
	EDuosMessageTargetType_k_eDuosMessageTargetType_Gold    EDuosMessageTargetType = 3
)

// Enum value maps for EDuosMessageTargetType.
var (
	EDuosMessageTargetType_name = map[int32]string{
		0: "k_eDuosMessageTargetType_None",
		1: "k_eDuosMessageTargetType_Unit",
		2: "k_eDuosMessageTargetType_Synergy",
		3: "k_eDuosMessageTargetType_Gold",
	}
	EDuosMessageTargetType_value = map[string]int32{
		"k_eDuosMessageTargetType_None":    0,
		"k_eDuosMessageTargetType_Unit":    1,
		"k_eDuosMessageTargetType_Synergy": 2,
		"k_eDuosMessageTargetType_Gold":    3,
	}
)

func (x EDuosMessageTargetType) Enum() *EDuosMessageTargetType {
	p := new(EDuosMessageTargetType)
	*p = x
	return p
}

func (x EDuosMessageTargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDuosMessageTargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[23].Descriptor()
}

func (EDuosMessageTargetType) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[23]
}

func (x EDuosMessageTargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDuosMessageTargetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDuosMessageTargetType(num)
	return nil
}

// Deprecated: Use EDuosMessageTargetType.Descriptor instead.
func (EDuosMessageTargetType) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{23}
}

type EBoardBuddyCommand int32

const (
	EBoardBuddyCommand_k_eBoardBuddyCommand_None EBoardBuddyCommand = 0
	EBoardBuddyCommand_k_eBoardBuddyCommand_Move EBoardBuddyCommand = 1
)

// Enum value maps for EBoardBuddyCommand.
var (
	EBoardBuddyCommand_name = map[int32]string{
		0: "k_eBoardBuddyCommand_None",
		1: "k_eBoardBuddyCommand_Move",
	}
	EBoardBuddyCommand_value = map[string]int32{
		"k_eBoardBuddyCommand_None": 0,
		"k_eBoardBuddyCommand_Move": 1,
	}
)

func (x EBoardBuddyCommand) Enum() *EBoardBuddyCommand {
	p := new(EBoardBuddyCommand)
	*p = x
	return p
}

func (x EBoardBuddyCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBoardBuddyCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[24].Descriptor()
}

func (EBoardBuddyCommand) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[24]
}

func (x EBoardBuddyCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBoardBuddyCommand) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBoardBuddyCommand(num)
	return nil
}

// Deprecated: Use EBoardBuddyCommand.Descriptor instead.
func (EBoardBuddyCommand) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{24}
}

type CMsgPrivatePlayerState_EGrantRewards int32

const (
	CMsgPrivatePlayerState_EGrantRewards_No               CMsgPrivatePlayerState_EGrantRewards = 0
	CMsgPrivatePlayerState_EGrantRewards_Yes              CMsgPrivatePlayerState_EGrantRewards = 1
	CMsgPrivatePlayerState_EGrantRewards_NoLongerEligible CMsgPrivatePlayerState_EGrantRewards = 2
)

// Enum value maps for CMsgPrivatePlayerState_EGrantRewards.
var (
	CMsgPrivatePlayerState_EGrantRewards_name = map[int32]string{
		0: "EGrantRewards_No",
		1: "EGrantRewards_Yes",
		2: "EGrantRewards_NoLongerEligible",
	}
	CMsgPrivatePlayerState_EGrantRewards_value = map[string]int32{
		"EGrantRewards_No":               0,
		"EGrantRewards_Yes":              1,
		"EGrantRewards_NoLongerEligible": 2,
	}
)

func (x CMsgPrivatePlayerState_EGrantRewards) Enum() *CMsgPrivatePlayerState_EGrantRewards {
	p := new(CMsgPrivatePlayerState_EGrantRewards)
	*p = x
	return p
}

func (x CMsgPrivatePlayerState_EGrantRewards) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgPrivatePlayerState_EGrantRewards) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[25].Descriptor()
}

func (CMsgPrivatePlayerState_EGrantRewards) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[25]
}

func (x CMsgPrivatePlayerState_EGrantRewards) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgPrivatePlayerState_EGrantRewards) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgPrivatePlayerState_EGrantRewards(num)
	return nil
}

// Deprecated: Use CMsgPrivatePlayerState_EGrantRewards.Descriptor instead.
func (CMsgPrivatePlayerState_EGrantRewards) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{28, 0}
}

type CMsgGameReplayActionMarker_EActionType int32

const (
	CMsgGameReplayActionMarker_k_eActionType_Placholder CMsgGameReplayActionMarker_EActionType = 1
)

// Enum value maps for CMsgGameReplayActionMarker_EActionType.
var (
	CMsgGameReplayActionMarker_EActionType_name = map[int32]string{
		1: "k_eActionType_Placholder",
	}
	CMsgGameReplayActionMarker_EActionType_value = map[string]int32{
		"k_eActionType_Placholder": 1,
	}
)

func (x CMsgGameReplayActionMarker_EActionType) Enum() *CMsgGameReplayActionMarker_EActionType {
	p := new(CMsgGameReplayActionMarker_EActionType)
	*p = x
	return p
}

func (x CMsgGameReplayActionMarker_EActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGameReplayActionMarker_EActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gamemessages_proto_enumTypes[26].Descriptor()
}

func (CMsgGameReplayActionMarker_EActionType) Type() protoreflect.EnumType {
	return &file_underlords_dac_gamemessages_proto_enumTypes[26]
}

func (x CMsgGameReplayActionMarker_EActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGameReplayActionMarker_EActionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGameReplayActionMarker_EActionType(num)
	return nil
}

// Deprecated: Use CMsgGameReplayActionMarker_EActionType.Descriptor instead.
func (CMsgGameReplayActionMarker_EActionType) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{82, 0}
}

type CClientReconnectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSteamId        *uint64 `protobuf:"fixed64,1,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	LobbyId              *uint64 `protobuf:"varint,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	TimeUpdated          *uint32 `protobuf:"varint,3,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	UdpConnectIp         *uint32 `protobuf:"varint,4,opt,name=udp_connect_ip,json=udpConnectIp" json:"udp_connect_ip,omitempty"`
	UdpConnectPort       *uint32 `protobuf:"varint,5,opt,name=udp_connect_port,json=udpConnectPort" json:"udp_connect_port,omitempty"`
	CompatibilityVersion *uint32 `protobuf:"varint,7,opt,name=compatibility_version,json=compatibilityVersion" json:"compatibility_version,omitempty"`
}

func (x *CClientReconnectInfo) Reset() {
	*x = CClientReconnectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientReconnectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientReconnectInfo) ProtoMessage() {}

func (x *CClientReconnectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientReconnectInfo.ProtoReflect.Descriptor instead.
func (*CClientReconnectInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{0}
}

func (x *CClientReconnectInfo) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CClientReconnectInfo) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CClientReconnectInfo) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *CClientReconnectInfo) GetUdpConnectIp() uint32 {
	if x != nil && x.UdpConnectIp != nil {
		return *x.UdpConnectIp
	}
	return 0
}

func (x *CClientReconnectInfo) GetUdpConnectPort() uint32 {
	if x != nil && x.UdpConnectPort != nil {
		return *x.UdpConnectPort
	}
	return 0
}

func (x *CClientReconnectInfo) GetCompatibilityVersion() uint32 {
	if x != nil && x.CompatibilityVersion != nil {
		return *x.CompatibilityVersion
	}
	return 0
}

type CMsgPlayerStateUpdatesComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgPlayerStateUpdatesComplete) Reset() {
	*x = CMsgPlayerStateUpdatesComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerStateUpdatesComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerStateUpdatesComplete) ProtoMessage() {}

func (x *CMsgPlayerStateUpdatesComplete) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerStateUpdatesComplete.ProtoReflect.Descriptor instead.
func (*CMsgPlayerStateUpdatesComplete) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{1}
}

type CMsgClientUnderlordLoadout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemDefs    []uint32 `protobuf:"varint,1,rep,name=item_defs,json=itemDefs" json:"item_defs,omitempty"`
	LoadoutName *string  `protobuf:"bytes,2,opt,name=loadout_name,json=loadoutName" json:"loadout_name,omitempty"`
	Selected    *bool    `protobuf:"varint,3,opt,name=selected" json:"selected,omitempty"`
	UnderlordId *uint32  `protobuf:"varint,4,opt,name=underlord_id,json=underlordId" json:"underlord_id,omitempty"`
}

func (x *CMsgClientUnderlordLoadout) Reset() {
	*x = CMsgClientUnderlordLoadout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUnderlordLoadout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUnderlordLoadout) ProtoMessage() {}

func (x *CMsgClientUnderlordLoadout) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUnderlordLoadout.ProtoReflect.Descriptor instead.
func (*CMsgClientUnderlordLoadout) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgClientUnderlordLoadout) GetItemDefs() []uint32 {
	if x != nil {
		return x.ItemDefs
	}
	return nil
}

func (x *CMsgClientUnderlordLoadout) GetLoadoutName() string {
	if x != nil && x.LoadoutName != nil {
		return *x.LoadoutName
	}
	return ""
}

func (x *CMsgClientUnderlordLoadout) GetSelected() bool {
	if x != nil && x.Selected != nil {
		return *x.Selected
	}
	return false
}

func (x *CMsgClientUnderlordLoadout) GetUnderlordId() uint32 {
	if x != nil && x.UnderlordId != nil {
		return *x.UnderlordId
	}
	return 0
}

type CMsgClientUnderlordLoadoutList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  *uint32                       `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Loadouts []*CMsgClientUnderlordLoadout `protobuf:"bytes,2,rep,name=loadouts" json:"loadouts,omitempty"`
}

func (x *CMsgClientUnderlordLoadoutList) Reset() {
	*x = CMsgClientUnderlordLoadoutList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientUnderlordLoadoutList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientUnderlordLoadoutList) ProtoMessage() {}

func (x *CMsgClientUnderlordLoadoutList) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientUnderlordLoadoutList.ProtoReflect.Descriptor instead.
func (*CMsgClientUnderlordLoadoutList) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgClientUnderlordLoadoutList) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgClientUnderlordLoadoutList) GetLoadouts() []*CMsgClientUnderlordLoadout {
	if x != nil {
		return x.Loadouts
	}
	return nil
}

type CMsgPlayerOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order           *EPlayerOrder `protobuf:"varint,1,req,name=order,enum=underlords.EPlayerOrder,def=2" json:"order,omitempty"`
	Param1          *int32        `protobuf:"varint,2,opt,name=param1" json:"param1,omitempty"`
	Param2          *int32        `protobuf:"varint,3,opt,name=param2" json:"param2,omitempty"`
	Param3          *int32        `protobuf:"varint,4,opt,name=param3" json:"param3,omitempty"`
	SpoofPlayerSlot *uint32       `protobuf:"varint,5,opt,name=spoof_player_slot,json=spoofPlayerSlot" json:"spoof_player_slot,omitempty"`
	CommandId       *uint32       `protobuf:"varint,6,opt,name=command_id,json=commandId" json:"command_id,omitempty"`
	Param4          *int32        `protobuf:"varint,7,opt,name=param4" json:"param4,omitempty"`
	Param5          *int32        `protobuf:"varint,8,opt,name=param5" json:"param5,omitempty"`
	Param6          *int32        `protobuf:"varint,9,opt,name=param6" json:"param6,omitempty"`
	StringParam1    *string       `protobuf:"bytes,10,opt,name=string_param1,json=stringParam1" json:"string_param1,omitempty"`
}

// Default values for CMsgPlayerOrder fields.
const (
	Default_CMsgPlayerOrder_Order = EPlayerOrder_EPlayerOrder_SellUnit
)

func (x *CMsgPlayerOrder) Reset() {
	*x = CMsgPlayerOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerOrder) ProtoMessage() {}

func (x *CMsgPlayerOrder) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerOrder.ProtoReflect.Descriptor instead.
func (*CMsgPlayerOrder) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgPlayerOrder) GetOrder() EPlayerOrder {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return Default_CMsgPlayerOrder_Order
}

func (x *CMsgPlayerOrder) GetParam1() int32 {
	if x != nil && x.Param1 != nil {
		return *x.Param1
	}
	return 0
}

func (x *CMsgPlayerOrder) GetParam2() int32 {
	if x != nil && x.Param2 != nil {
		return *x.Param2
	}
	return 0
}

func (x *CMsgPlayerOrder) GetParam3() int32 {
	if x != nil && x.Param3 != nil {
		return *x.Param3
	}
	return 0
}

func (x *CMsgPlayerOrder) GetSpoofPlayerSlot() uint32 {
	if x != nil && x.SpoofPlayerSlot != nil {
		return *x.SpoofPlayerSlot
	}
	return 0
}

func (x *CMsgPlayerOrder) GetCommandId() uint32 {
	if x != nil && x.CommandId != nil {
		return *x.CommandId
	}
	return 0
}

func (x *CMsgPlayerOrder) GetParam4() int32 {
	if x != nil && x.Param4 != nil {
		return *x.Param4
	}
	return 0
}

func (x *CMsgPlayerOrder) GetParam5() int32 {
	if x != nil && x.Param5 != nil {
		return *x.Param5
	}
	return 0
}

func (x *CMsgPlayerOrder) GetParam6() int32 {
	if x != nil && x.Param6 != nil {
		return *x.Param6
	}
	return 0
}

func (x *CMsgPlayerOrder) GetStringParam1() string {
	if x != nil && x.StringParam1 != nil {
		return *x.StringParam1
	}
	return ""
}

type CMsgPlayerOrderProcessed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandId *uint32 `protobuf:"varint,1,opt,name=command_id,json=commandId" json:"command_id,omitempty"`
}

func (x *CMsgPlayerOrderProcessed) Reset() {
	*x = CMsgPlayerOrderProcessed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerOrderProcessed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerOrderProcessed) ProtoMessage() {}

func (x *CMsgPlayerOrderProcessed) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerOrderProcessed.ProtoReflect.Descriptor instead.
func (*CMsgPlayerOrderProcessed) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgPlayerOrderProcessed) GetCommandId() uint32 {
	if x != nil && x.CommandId != nil {
		return *x.CommandId
	}
	return 0
}

type CMsgPlayerCombinedHero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot     *uint32 `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	UnitId         *int32  `protobuf:"varint,2,opt,name=unit_id,json=unitId" json:"unit_id,omitempty"`
	NewRank        *uint32 `protobuf:"varint,3,opt,name=new_rank,json=newRank" json:"new_rank,omitempty"`
	Entindex       *uint32 `protobuf:"varint,4,opt,name=entindex" json:"entindex,omitempty"`
	NotificationId *uint32 `protobuf:"varint,5,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
	DuosCombine    *bool   `protobuf:"varint,6,opt,name=duos_combine,json=duosCombine" json:"duos_combine,omitempty"`
}

func (x *CMsgPlayerCombinedHero) Reset() {
	*x = CMsgPlayerCombinedHero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerCombinedHero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerCombinedHero) ProtoMessage() {}

func (x *CMsgPlayerCombinedHero) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerCombinedHero.ProtoReflect.Descriptor instead.
func (*CMsgPlayerCombinedHero) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgPlayerCombinedHero) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgPlayerCombinedHero) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *CMsgPlayerCombinedHero) GetNewRank() uint32 {
	if x != nil && x.NewRank != nil {
		return *x.NewRank
	}
	return 0
}

func (x *CMsgPlayerCombinedHero) GetEntindex() uint32 {
	if x != nil && x.Entindex != nil {
		return *x.Entindex
	}
	return 0
}

func (x *CMsgPlayerCombinedHero) GetNotificationId() uint32 {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return 0
}

func (x *CMsgPlayerCombinedHero) GetDuosCombine() bool {
	if x != nil && x.DuosCombine != nil {
		return *x.DuosCombine
	}
	return false
}

type CMsgPlayerAcquiredItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot     *uint32 `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	ItemId         *int32  `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	NotificationId *uint32 `protobuf:"varint,3,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
}

func (x *CMsgPlayerAcquiredItem) Reset() {
	*x = CMsgPlayerAcquiredItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerAcquiredItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerAcquiredItem) ProtoMessage() {}

func (x *CMsgPlayerAcquiredItem) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerAcquiredItem.ProtoReflect.Descriptor instead.
func (*CMsgPlayerAcquiredItem) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgPlayerAcquiredItem) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgPlayerAcquiredItem) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgPlayerAcquiredItem) GetNotificationId() uint32 {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return 0
}

type CMsgPlayerRecievedUnitFromDuosPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitId *int32 `protobuf:"varint,1,opt,name=unit_id,json=unitId" json:"unit_id,omitempty"`
}

func (x *CMsgPlayerRecievedUnitFromDuosPartner) Reset() {
	*x = CMsgPlayerRecievedUnitFromDuosPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerRecievedUnitFromDuosPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerRecievedUnitFromDuosPartner) ProtoMessage() {}

func (x *CMsgPlayerRecievedUnitFromDuosPartner) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerRecievedUnitFromDuosPartner.ProtoReflect.Descriptor instead.
func (*CMsgPlayerRecievedUnitFromDuosPartner) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgPlayerRecievedUnitFromDuosPartner) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

type CMsgPlayerSelectedTalent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot         *uint32 `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	TalentItemdefIndex *int32  `protobuf:"varint,2,opt,name=talent_itemdef_index,json=talentItemdefIndex" json:"talent_itemdef_index,omitempty"`
	NotificationId     *uint32 `protobuf:"varint,3,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
}

func (x *CMsgPlayerSelectedTalent) Reset() {
	*x = CMsgPlayerSelectedTalent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerSelectedTalent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerSelectedTalent) ProtoMessage() {}

func (x *CMsgPlayerSelectedTalent) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerSelectedTalent.ProtoReflect.Descriptor instead.
func (*CMsgPlayerSelectedTalent) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgPlayerSelectedTalent) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgPlayerSelectedTalent) GetTalentItemdefIndex() int32 {
	if x != nil && x.TalentItemdefIndex != nil {
		return *x.TalentItemdefIndex
	}
	return 0
}

func (x *CMsgPlayerSelectedTalent) GetNotificationId() uint32 {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return 0
}

type CMsgPlayerCombatResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot         *uint32                                `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	Result             *ERoundCombatResult                    `protobuf:"varint,4,opt,name=result,enum=underlords.ERoundCombatResult,def=0" json:"result,omitempty"`
	DamageTaken        *uint32                                `protobuf:"varint,5,opt,name=damage_taken,json=damageTaken" json:"damage_taken,omitempty"`
	DamageSources      []*CMsgPlayerCombatResult_DamageSource `protobuf:"bytes,6,rep,name=damage_sources,json=damageSources" json:"damage_sources,omitempty"`
	AegisUsed          *bool                                  `protobuf:"varint,7,opt,name=aegis_used,json=aegisUsed" json:"aegis_used,omitempty"`
	VictoryLevel       *ERoundVictoryLevel                    `protobuf:"varint,8,opt,name=victory_level,json=victoryLevel,enum=underlords.ERoundVictoryLevel,def=0" json:"victory_level,omitempty"`
	NotificationId     *uint32                                `protobuf:"varint,9,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
	TotalGold          *uint32                                `protobuf:"varint,11,opt,name=total_gold,json=totalGold" json:"total_gold,omitempty"`
	GoldFromInterest   *uint32                                `protobuf:"varint,12,opt,name=gold_from_interest,json=goldFromInterest" json:"gold_from_interest,omitempty"`
	GoldFromStreak     *uint32                                `protobuf:"varint,13,opt,name=gold_from_streak,json=goldFromStreak" json:"gold_from_streak,omitempty"`
	GoldFromItems      *uint32                                `protobuf:"varint,14,opt,name=gold_from_items,json=goldFromItems" json:"gold_from_items,omitempty"`
	GoldFromRoundBonus *uint32                                `protobuf:"varint,15,opt,name=gold_from_round_bonus,json=goldFromRoundBonus" json:"gold_from_round_bonus,omitempty"`
	GoldFromVictory    *uint32                                `protobuf:"varint,16,opt,name=gold_from_victory,json=goldFromVictory" json:"gold_from_victory,omitempty"`
	// Types that are assignable to Opponent:
	//	*CMsgPlayerCombatResult_OpponentPlayerSlot
	//	*CMsgPlayerCombatResult_OpponentNeutralWave
	Opponent isCMsgPlayerCombatResult_Opponent `protobuf_oneof:"opponent"`
}

// Default values for CMsgPlayerCombatResult fields.
const (
	Default_CMsgPlayerCombatResult_Result       = ERoundCombatResult_ERoundCombatResult_Draw
	Default_CMsgPlayerCombatResult_VictoryLevel = ERoundVictoryLevel_ERoundVictoryLevel_HomeDecisive
)

func (x *CMsgPlayerCombatResult) Reset() {
	*x = CMsgPlayerCombatResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerCombatResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerCombatResult) ProtoMessage() {}

func (x *CMsgPlayerCombatResult) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerCombatResult.ProtoReflect.Descriptor instead.
func (*CMsgPlayerCombatResult) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgPlayerCombatResult) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgPlayerCombatResult) GetResult() ERoundCombatResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgPlayerCombatResult_Result
}

func (x *CMsgPlayerCombatResult) GetDamageTaken() uint32 {
	if x != nil && x.DamageTaken != nil {
		return *x.DamageTaken
	}
	return 0
}

func (x *CMsgPlayerCombatResult) GetDamageSources() []*CMsgPlayerCombatResult_DamageSource {
	if x != nil {
		return x.DamageSources
	}
	return nil
}

func (x *CMsgPlayerCombatResult) GetAegisUsed() bool {
	if x != nil && x.AegisUsed != nil {
		return *x.AegisUsed
	}
	return false
}

func (x *CMsgPlayerCombatResult) GetVictoryLevel() ERoundVictoryLevel {
	if x != nil && x.VictoryLevel != nil {
		return *x.VictoryLevel
	}
	return Default_CMsgPlayerCombatResult_VictoryLevel
}

func (x *CMsgPlayerCombatResult) GetNotificationId() uint32 {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return 0
}

func (x *CMsgPlayerCombatResult) GetTotalGold() uint32 {
	if x != nil && x.TotalGold != nil {
		return *x.TotalGold
	}
	return 0
}

func (x *CMsgPlayerCombatResult) GetGoldFromInterest() uint32 {
	if x != nil && x.GoldFromInterest != nil {
		return *x.GoldFromInterest
	}
	return 0
}

func (x *CMsgPlayerCombatResult) GetGoldFromStreak() uint32 {
	if x != nil && x.GoldFromStreak != nil {
		return *x.GoldFromStreak
	}
	return 0
}

func (x *CMsgPlayerCombatResult) GetGoldFromItems() uint32 {
	if x != nil && x.GoldFromItems != nil {
		return *x.GoldFromItems
	}
	return 0
}

func (x *CMsgPlayerCombatResult) GetGoldFromRoundBonus() uint32 {
	if x != nil && x.GoldFromRoundBonus != nil {
		return *x.GoldFromRoundBonus
	}
	return 0
}

func (x *CMsgPlayerCombatResult) GetGoldFromVictory() uint32 {
	if x != nil && x.GoldFromVictory != nil {
		return *x.GoldFromVictory
	}
	return 0
}

func (m *CMsgPlayerCombatResult) GetOpponent() isCMsgPlayerCombatResult_Opponent {
	if m != nil {
		return m.Opponent
	}
	return nil
}

func (x *CMsgPlayerCombatResult) GetOpponentPlayerSlot() uint32 {
	if x, ok := x.GetOpponent().(*CMsgPlayerCombatResult_OpponentPlayerSlot); ok {
		return x.OpponentPlayerSlot
	}
	return 0
}

func (x *CMsgPlayerCombatResult) GetOpponentNeutralWave() uint32 {
	if x, ok := x.GetOpponent().(*CMsgPlayerCombatResult_OpponentNeutralWave); ok {
		return x.OpponentNeutralWave
	}
	return 0
}

type isCMsgPlayerCombatResult_Opponent interface {
	isCMsgPlayerCombatResult_Opponent()
}

type CMsgPlayerCombatResult_OpponentPlayerSlot struct {
	OpponentPlayerSlot uint32 `protobuf:"varint,2,opt,name=opponent_player_slot,json=opponentPlayerSlot,oneof"`
}

type CMsgPlayerCombatResult_OpponentNeutralWave struct {
	OpponentNeutralWave uint32 `protobuf:"varint,3,opt,name=opponent_neutral_wave,json=opponentNeutralWave,oneof"`
}

func (*CMsgPlayerCombatResult_OpponentPlayerSlot) isCMsgPlayerCombatResult_Opponent() {}

func (*CMsgPlayerCombatResult_OpponentNeutralWave) isCMsgPlayerCombatResult_Opponent() {}

type CMsgPlayerWinStreak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot     *uint32 `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	StreakLength   *uint32 `protobuf:"varint,2,opt,name=streak_length,json=streakLength" json:"streak_length,omitempty"`
	NotificationId *uint32 `protobuf:"varint,3,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
}

func (x *CMsgPlayerWinStreak) Reset() {
	*x = CMsgPlayerWinStreak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerWinStreak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerWinStreak) ProtoMessage() {}

func (x *CMsgPlayerWinStreak) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerWinStreak.ProtoReflect.Descriptor instead.
func (*CMsgPlayerWinStreak) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgPlayerWinStreak) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgPlayerWinStreak) GetStreakLength() uint32 {
	if x != nil && x.StreakLength != nil {
		return *x.StreakLength
	}
	return 0
}

func (x *CMsgPlayerWinStreak) GetNotificationId() uint32 {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return 0
}

type CMsgPlayerLevelUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot     *uint32 `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	Level          *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	NotificationId *uint32 `protobuf:"varint,3,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
}

func (x *CMsgPlayerLevelUp) Reset() {
	*x = CMsgPlayerLevelUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerLevelUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerLevelUp) ProtoMessage() {}

func (x *CMsgPlayerLevelUp) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerLevelUp.ProtoReflect.Descriptor instead.
func (*CMsgPlayerLevelUp) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgPlayerLevelUp) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgPlayerLevelUp) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgPlayerLevelUp) GetNotificationId() uint32 {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return 0
}

type CMsgItemChangedOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldPlayerSlot  *uint32 `protobuf:"varint,1,opt,name=old_player_slot,json=oldPlayerSlot" json:"old_player_slot,omitempty"`
	NewPlayerSlot  *uint32 `protobuf:"varint,2,opt,name=new_player_slot,json=newPlayerSlot" json:"new_player_slot,omitempty"`
	ItemId         *uint32 `protobuf:"varint,3,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	NotificationId *uint32 `protobuf:"varint,4,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
}

func (x *CMsgItemChangedOwner) Reset() {
	*x = CMsgItemChangedOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgItemChangedOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgItemChangedOwner) ProtoMessage() {}

func (x *CMsgItemChangedOwner) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgItemChangedOwner.ProtoReflect.Descriptor instead.
func (*CMsgItemChangedOwner) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgItemChangedOwner) GetOldPlayerSlot() uint32 {
	if x != nil && x.OldPlayerSlot != nil {
		return *x.OldPlayerSlot
	}
	return 0
}

func (x *CMsgItemChangedOwner) GetNewPlayerSlot() uint32 {
	if x != nil && x.NewPlayerSlot != nil {
		return *x.NewPlayerSlot
	}
	return 0
}

func (x *CMsgItemChangedOwner) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgItemChangedOwner) GetNotificationId() uint32 {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return 0
}

type CMsgPlayerEliminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot         *uint32 `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	FinalPosition      *uint32 `protobuf:"varint,2,opt,name=final_position,json=finalPosition" json:"final_position,omitempty"`
	NotificationId     *uint32 `protobuf:"varint,3,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
	OpponentPlayerSlot *uint32 `protobuf:"varint,4,opt,name=opponent_player_slot,json=opponentPlayerSlot" json:"opponent_player_slot,omitempty"`
	WasHeadToHead      *bool   `protobuf:"varint,5,opt,name=was_head_to_head,json=wasHeadToHead" json:"was_head_to_head,omitempty"`
}

func (x *CMsgPlayerEliminated) Reset() {
	*x = CMsgPlayerEliminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerEliminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerEliminated) ProtoMessage() {}

func (x *CMsgPlayerEliminated) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerEliminated.ProtoReflect.Descriptor instead.
func (*CMsgPlayerEliminated) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgPlayerEliminated) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgPlayerEliminated) GetFinalPosition() uint32 {
	if x != nil && x.FinalPosition != nil {
		return *x.FinalPosition
	}
	return 0
}

func (x *CMsgPlayerEliminated) GetNotificationId() uint32 {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return 0
}

func (x *CMsgPlayerEliminated) GetOpponentPlayerSlot() uint32 {
	if x != nil && x.OpponentPlayerSlot != nil {
		return *x.OpponentPlayerSlot
	}
	return 0
}

func (x *CMsgPlayerEliminated) GetWasHeadToHead() bool {
	if x != nil && x.WasHeadToHead != nil {
		return *x.WasHeadToHead
	}
	return false
}

type CMsgPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *int32 `protobuf:"varint,1,req,name=x" json:"x,omitempty"`
	Y *int32 `protobuf:"varint,2,req,name=y" json:"y,omitempty"`
}

func (x *CMsgPosition) Reset() {
	*x = CMsgPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPosition) ProtoMessage() {}

func (x *CMsgPosition) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPosition.ProtoReflect.Descriptor instead.
func (*CMsgPosition) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgPosition) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgPosition) GetY() int32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type CMsgUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entindex                *int32         `protobuf:"varint,1,req,name=entindex" json:"entindex,omitempty"`
	UnitId                  *int32         `protobuf:"varint,2,opt,name=unit_id,json=unitId" json:"unit_id,omitempty"`
	Position                *CMsgPosition  `protobuf:"bytes,3,opt,name=position" json:"position,omitempty"`
	Rank                    *int32         `protobuf:"varint,4,opt,name=rank" json:"rank,omitempty"`
	GoldValue               *int32         `protobuf:"varint,6,opt,name=gold_value,json=goldValue" json:"gold_value,omitempty"`
	KillCount               *uint32        `protobuf:"varint,8,opt,name=kill_count,json=killCount" json:"kill_count,omitempty"`
	KillStreak              *uint32        `protobuf:"varint,9,opt,name=kill_streak,json=killStreak" json:"kill_streak,omitempty"`
	Keywords                []EUnitKeyword `protobuf:"varint,10,rep,name=keywords,enum=underlords.EUnitKeyword" json:"keywords,omitempty"`
	IsSummoned              *bool          `protobuf:"varint,11,opt,name=is_summoned,json=isSummoned" json:"is_summoned,omitempty"`
	DuelBonusDamage         *uint32        `protobuf:"varint,12,opt,name=duel_bonus_damage,json=duelBonusDamage" json:"duel_bonus_damage,omitempty"`
	UnitCapCost             *int32         `protobuf:"varint,13,opt,name=unit_cap_cost,json=unitCapCost" json:"unit_cap_cost,omitempty"`
	IsPlaceableItem         *bool          `protobuf:"varint,14,opt,name=is_placeable_item,json=isPlaceableItem" json:"is_placeable_item,omitempty"`
	BotIgnore               *bool          `protobuf:"varint,15,opt,name=bot_ignore,json=botIgnore" json:"bot_ignore,omitempty"`
	CanMoveToBench          *bool          `protobuf:"varint,16,opt,name=can_move_to_bench,json=canMoveToBench" json:"can_move_to_bench,omitempty"`
	CanBeSold               *bool          `protobuf:"varint,17,opt,name=can_be_sold,json=canBeSold" json:"can_be_sold,omitempty"`
	RecommendedForPlacement *bool          `protobuf:"varint,18,opt,name=recommended_for_placement,json=recommendedForPlacement" json:"recommended_for_placement,omitempty"`
	FloatKillCount          *float32       `protobuf:"fixed32,38,opt,name=float_kill_count,json=floatKillCount" json:"float_kill_count,omitempty"`
}

func (x *CMsgUnit) Reset() {
	*x = CMsgUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUnit) ProtoMessage() {}

func (x *CMsgUnit) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUnit.ProtoReflect.Descriptor instead.
func (*CMsgUnit) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgUnit) GetEntindex() int32 {
	if x != nil && x.Entindex != nil {
		return *x.Entindex
	}
	return 0
}

func (x *CMsgUnit) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *CMsgUnit) GetPosition() *CMsgPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CMsgUnit) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CMsgUnit) GetGoldValue() int32 {
	if x != nil && x.GoldValue != nil {
		return *x.GoldValue
	}
	return 0
}

func (x *CMsgUnit) GetKillCount() uint32 {
	if x != nil && x.KillCount != nil {
		return *x.KillCount
	}
	return 0
}

func (x *CMsgUnit) GetKillStreak() uint32 {
	if x != nil && x.KillStreak != nil {
		return *x.KillStreak
	}
	return 0
}

func (x *CMsgUnit) GetKeywords() []EUnitKeyword {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *CMsgUnit) GetIsSummoned() bool {
	if x != nil && x.IsSummoned != nil {
		return *x.IsSummoned
	}
	return false
}

func (x *CMsgUnit) GetDuelBonusDamage() uint32 {
	if x != nil && x.DuelBonusDamage != nil {
		return *x.DuelBonusDamage
	}
	return 0
}

func (x *CMsgUnit) GetUnitCapCost() int32 {
	if x != nil && x.UnitCapCost != nil {
		return *x.UnitCapCost
	}
	return 0
}

func (x *CMsgUnit) GetIsPlaceableItem() bool {
	if x != nil && x.IsPlaceableItem != nil {
		return *x.IsPlaceableItem
	}
	return false
}

func (x *CMsgUnit) GetBotIgnore() bool {
	if x != nil && x.BotIgnore != nil {
		return *x.BotIgnore
	}
	return false
}

func (x *CMsgUnit) GetCanMoveToBench() bool {
	if x != nil && x.CanMoveToBench != nil {
		return *x.CanMoveToBench
	}
	return false
}

func (x *CMsgUnit) GetCanBeSold() bool {
	if x != nil && x.CanBeSold != nil {
		return *x.CanBeSold
	}
	return false
}

func (x *CMsgUnit) GetRecommendedForPlacement() bool {
	if x != nil && x.RecommendedForPlacement != nil {
		return *x.RecommendedForPlacement
	}
	return false
}

func (x *CMsgUnit) GetFloatKillCount() float32 {
	if x != nil && x.FloatKillCount != nil {
		return *x.FloatKillCount
	}
	return 0
}

type CMsgShopItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitId                *int32         `protobuf:"varint,1,opt,name=unit_id,json=unitId" json:"unit_id,omitempty"`
	WillCombineTwoStars   *bool          `protobuf:"varint,2,opt,name=will_combine_two_stars,json=willCombineTwoStars" json:"will_combine_two_stars,omitempty"`
	GoldCost              *int32         `protobuf:"varint,3,opt,name=gold_cost,json=goldCost" json:"gold_cost,omitempty"`
	WantedLegendary       *bool          `protobuf:"varint,4,opt,name=wanted_legendary,json=wantedLegendary" json:"wanted_legendary,omitempty"`
	WillCombineThreeStars *bool          `protobuf:"varint,5,opt,name=will_combine_three_stars,json=willCombineThreeStars" json:"will_combine_three_stars,omitempty"`
	Keywords              []EUnitKeyword `protobuf:"varint,6,rep,name=keywords,enum=underlords.EUnitKeyword" json:"keywords,omitempty"`
}

func (x *CMsgShopItem) Reset() {
	*x = CMsgShopItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgShopItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgShopItem) ProtoMessage() {}

func (x *CMsgShopItem) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgShopItem.ProtoReflect.Descriptor instead.
func (*CMsgShopItem) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgShopItem) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *CMsgShopItem) GetWillCombineTwoStars() bool {
	if x != nil && x.WillCombineTwoStars != nil {
		return *x.WillCombineTwoStars
	}
	return false
}

func (x *CMsgShopItem) GetGoldCost() int32 {
	if x != nil && x.GoldCost != nil {
		return *x.GoldCost
	}
	return 0
}

func (x *CMsgShopItem) GetWantedLegendary() bool {
	if x != nil && x.WantedLegendary != nil {
		return *x.WantedLegendary
	}
	return false
}

func (x *CMsgShopItem) GetWillCombineThreeStars() bool {
	if x != nil && x.WillCombineThreeStars != nil {
		return *x.WillCombineThreeStars
	}
	return false
}

func (x *CMsgShopItem) GetKeywords() []EUnitKeyword {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type CMsgTurboBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keywords []EUnitKeyword `protobuf:"varint,1,rep,name=keywords,enum=underlords.EUnitKeyword" json:"keywords,omitempty"`
	UnitIds  []int32        `protobuf:"varint,2,rep,name=unit_ids,json=unitIds" json:"unit_ids,omitempty"`
}

func (x *CMsgTurboBucket) Reset() {
	*x = CMsgTurboBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTurboBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTurboBucket) ProtoMessage() {}

func (x *CMsgTurboBucket) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTurboBucket.ProtoReflect.Descriptor instead.
func (*CMsgTurboBucket) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgTurboBucket) GetKeywords() []EUnitKeyword {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *CMsgTurboBucket) GetUnitIds() []int32 {
	if x != nil {
		return x.UnitIds
	}
	return nil
}

type CMsgUnderlordPickerOffering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnderlordId *uint32 `protobuf:"varint,1,opt,name=underlord_id,json=underlordId" json:"underlord_id,omitempty"`
	BuildId     *uint32 `protobuf:"varint,2,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
}

func (x *CMsgUnderlordPickerOffering) Reset() {
	*x = CMsgUnderlordPickerOffering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUnderlordPickerOffering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUnderlordPickerOffering) ProtoMessage() {}

func (x *CMsgUnderlordPickerOffering) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUnderlordPickerOffering.ProtoReflect.Descriptor instead.
func (*CMsgUnderlordPickerOffering) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgUnderlordPickerOffering) GetUnderlordId() uint32 {
	if x != nil && x.UnderlordId != nil {
		return *x.UnderlordId
	}
	return 0
}

func (x *CMsgUnderlordPickerOffering) GetBuildId() uint32 {
	if x != nil && x.BuildId != nil {
		return *x.BuildId
	}
	return 0
}

type CMsgSynergy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword                        *EUnitKeyword `protobuf:"varint,1,opt,name=keyword,enum=underlords.EUnitKeyword,def=0" json:"keyword,omitempty"`
	UniqueUnitCount                *int32        `protobuf:"varint,2,opt,name=unique_unit_count,json=uniqueUnitCount" json:"unique_unit_count,omitempty"`
	BenchAdditionalUniqueUnitCount *int32        `protobuf:"varint,3,opt,name=bench_additional_unique_unit_count,json=benchAdditionalUniqueUnitCount" json:"bench_additional_unique_unit_count,omitempty"`
}

// Default values for CMsgSynergy fields.
const (
	Default_CMsgSynergy_Keyword = EUnitKeyword_EUnitKeyword_Invalid
)

func (x *CMsgSynergy) Reset() {
	*x = CMsgSynergy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSynergy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSynergy) ProtoMessage() {}

func (x *CMsgSynergy) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSynergy.ProtoReflect.Descriptor instead.
func (*CMsgSynergy) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgSynergy) GetKeyword() EUnitKeyword {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return Default_CMsgSynergy_Keyword
}

func (x *CMsgSynergy) GetUniqueUnitCount() int32 {
	if x != nil && x.UniqueUnitCount != nil {
		return *x.UniqueUnitCount
	}
	return 0
}

func (x *CMsgSynergy) GetBenchAdditionalUniqueUnitCount() int32 {
	if x != nil && x.BenchAdditionalUniqueUnitCount != nil {
		return *x.BenchAdditionalUniqueUnitCount
	}
	return 0
}

type CMsgItemSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotIndex            *uint32 `protobuf:"varint,1,opt,name=slot_index,json=slotIndex" json:"slot_index,omitempty"`
	ItemId               *uint32 `protobuf:"varint,2,req,name=item_id,json=itemId" json:"item_id,omitempty"`
	AssignedUnitEntindex *int32  `protobuf:"varint,3,opt,name=assigned_unit_entindex,json=assignedUnitEntindex" json:"assigned_unit_entindex,omitempty"`
}

func (x *CMsgItemSlot) Reset() {
	*x = CMsgItemSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgItemSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgItemSlot) ProtoMessage() {}

func (x *CMsgItemSlot) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgItemSlot.ProtoReflect.Descriptor instead.
func (*CMsgItemSlot) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgItemSlot) GetSlotIndex() uint32 {
	if x != nil && x.SlotIndex != nil {
		return *x.SlotIndex
	}
	return 0
}

func (x *CMsgItemSlot) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgItemSlot) GetAssignedUnitEntindex() int32 {
	if x != nil && x.AssignedUnitEntindex != nil {
		return *x.AssignedUnitEntindex
	}
	return 0
}

type CMsgBoardBuddy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredPosX *float32 `protobuf:"fixed32,1,opt,name=desired_pos_x,json=desiredPosX" json:"desired_pos_x,omitempty"`
	DesiredPosY *float32 `protobuf:"fixed32,2,opt,name=desired_pos_y,json=desiredPosY" json:"desired_pos_y,omitempty"`
}

func (x *CMsgBoardBuddy) Reset() {
	*x = CMsgBoardBuddy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBoardBuddy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBoardBuddy) ProtoMessage() {}

func (x *CMsgBoardBuddy) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBoardBuddy.ProtoReflect.Descriptor instead.
func (*CMsgBoardBuddy) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgBoardBuddy) GetDesiredPosX() float32 {
	if x != nil && x.DesiredPosX != nil {
		return *x.DesiredPosX
	}
	return 0
}

func (x *CMsgBoardBuddy) GetDesiredPosY() float32 {
	if x != nil && x.DesiredPosY != nil {
		return *x.DesiredPosY
	}
	return 0
}

type CMsgMapProp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropIdx   *uint32 `protobuf:"varint,1,opt,name=prop_idx,json=propIdx" json:"prop_idx,omitempty"`
	PropState *uint32 `protobuf:"varint,2,opt,name=prop_state,json=propState" json:"prop_state,omitempty"`
	NumClicks *uint32 `protobuf:"varint,3,opt,name=num_clicks,json=numClicks" json:"num_clicks,omitempty"`
}

func (x *CMsgMapProp) Reset() {
	*x = CMsgMapProp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMapProp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMapProp) ProtoMessage() {}

func (x *CMsgMapProp) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMapProp.ProtoReflect.Descriptor instead.
func (*CMsgMapProp) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgMapProp) GetPropIdx() uint32 {
	if x != nil && x.PropIdx != nil {
		return *x.PropIdx
	}
	return 0
}

func (x *CMsgMapProp) GetPropState() uint32 {
	if x != nil && x.PropState != nil {
		return *x.PropState
	}
	return 0
}

func (x *CMsgMapProp) GetNumClicks() uint32 {
	if x != nil && x.NumClicks != nil {
		return *x.NumClicks
	}
	return 0
}

type CMsgPublicPlayerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot                            *uint32                              `protobuf:"varint,1,req,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	AccountId                             *uint32                              `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ConnectionStatus                      *EPlayerConnectionState              `protobuf:"varint,3,opt,name=connection_status,json=connectionStatus,enum=underlords.EPlayerConnectionState,def=0" json:"connection_status,omitempty"`
	IsHumanPlayer                         *bool                                `protobuf:"varint,4,opt,name=is_human_player,json=isHumanPlayer" json:"is_human_player,omitempty"`
	Health                                *int32                               `protobuf:"varint,5,opt,name=health" json:"health,omitempty"`
	Gold                                  *int32                               `protobuf:"varint,6,opt,name=gold" json:"gold,omitempty"`
	Level                                 *int32                               `protobuf:"varint,7,opt,name=level" json:"level,omitempty"`
	Xp                                    *int32                               `protobuf:"varint,8,opt,name=xp" json:"xp,omitempty"`
	ItemSlots                             []*CMsgItemSlot                      `protobuf:"bytes,9,rep,name=item_slots,json=itemSlots" json:"item_slots,omitempty"`
	Units                                 []*CMsgUnit                          `protobuf:"bytes,10,rep,name=units" json:"units,omitempty"`
	FinalPlace                            *uint32                              `protobuf:"varint,14,opt,name=final_place,json=finalPlace" json:"final_place,omitempty"`
	NextLevelXp                           *int32                               `protobuf:"varint,15,opt,name=next_level_xp,json=nextLevelXp" json:"next_level_xp,omitempty"`
	Synergies                             []*CMsgSynergy                       `protobuf:"bytes,16,rep,name=synergies" json:"synergies,omitempty"`
	BotPersonaName                        *string                              `protobuf:"bytes,17,opt,name=bot_persona_name,json=botPersonaName" json:"bot_persona_name,omitempty"`
	SequenceNumber                        *uint64                              `protobuf:"varint,18,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	ShopCostModifier                      *int32                               `protobuf:"varint,20,opt,name=shop_cost_modifier,json=shopCostModifier" json:"shop_cost_modifier,omitempty"`
	CombatDuration                        *float32                             `protobuf:"fixed32,21,opt,name=combat_duration,json=combatDuration" json:"combat_duration,omitempty"`
	RerollCostModifier                    *int32                               `protobuf:"varint,22,opt,name=reroll_cost_modifier,json=rerollCostModifier" json:"reroll_cost_modifier,omitempty"`
	WinStreak                             *int32                               `protobuf:"varint,26,opt,name=win_streak,json=winStreak" json:"win_streak,omitempty"`
	LoseStreak                            *int32                               `protobuf:"varint,27,opt,name=lose_streak,json=loseStreak" json:"lose_streak,omitempty"`
	RankTier                              *uint32                              `protobuf:"varint,28,opt,name=rank_tier,json=rankTier" json:"rank_tier,omitempty"`
	DisconnectedTime                      *float32                             `protobuf:"fixed32,29,opt,name=disconnected_time,json=disconnectedTime" json:"disconnected_time,omitempty"`
	VsOpponentWins                        *uint32                              `protobuf:"varint,30,opt,name=vs_opponent_wins,json=vsOpponentWins" json:"vs_opponent_wins,omitempty"`
	VsOpponentLosses                      *uint32                              `protobuf:"varint,31,opt,name=vs_opponent_losses,json=vsOpponentLosses" json:"vs_opponent_losses,omitempty"`
	VsOpponentDraws                       *uint32                              `protobuf:"varint,32,opt,name=vs_opponent_draws,json=vsOpponentDraws" json:"vs_opponent_draws,omitempty"`
	Platform                              *EDACPlatform                        `protobuf:"varint,33,opt,name=platform,enum=underlords.EDACPlatform,def=0" json:"platform,omitempty"`
	EventTier                             *uint32                              `protobuf:"varint,34,opt,name=event_tier,json=eventTier" json:"event_tier,omitempty"`
	PersonaName                           *string                              `protobuf:"bytes,36,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	Wins                                  *uint32                              `protobuf:"varint,37,opt,name=wins" json:"wins,omitempty"`
	Losses                                *uint32                              `protobuf:"varint,38,opt,name=losses" json:"losses,omitempty"`
	GlobalLeaderboardRank                 *uint32                              `protobuf:"varint,39,opt,name=global_leaderboard_rank,json=globalLeaderboardRank" json:"global_leaderboard_rank,omitempty"`
	PlayerLoadout                         []*CMsgPublicPlayerState_LoadoutItem `protobuf:"bytes,40,rep,name=player_loadout,json=playerLoadout" json:"player_loadout,omitempty"`
	NetWorth                              *uint32                              `protobuf:"varint,41,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	CombatResult                          *uint32                              `protobuf:"varint,43,opt,name=combat_result,json=combatResult" json:"combat_result,omitempty"`
	LobbyTeam                             *EDACLobbyTeam                       `protobuf:"varint,44,opt,name=lobby_team,json=lobbyTeam,enum=underlords.EDACLobbyTeam,def=0" json:"lobby_team,omitempty"`
	UnderlordSelectedTalents              []uint32                             `protobuf:"varint,45,rep,name=underlord_selected_talents,json=underlordSelectedTalents" json:"underlord_selected_talents,omitempty"`
	IsMirroredMatch                       *bool                                `protobuf:"varint,46,opt,name=is_mirrored_match,json=isMirroredMatch" json:"is_mirrored_match,omitempty"`
	Underlord                             *uint32                              `protobuf:"varint,47,opt,name=underlord" json:"underlord,omitempty"`
	PartyIndex                            *uint32                              `protobuf:"varint,48,opt,name=party_index,json=partyIndex" json:"party_index,omitempty"`
	NextCombatOpponentNeutralWave         *uint32                              `protobuf:"varint,49,opt,name=next_combat_opponent_neutral_wave,json=nextCombatOpponentNeutralWave" json:"next_combat_opponent_neutral_wave,omitempty"`
	BoardUnitLimit                        *int32                               `protobuf:"varint,52,opt,name=board_unit_limit,json=boardUnitLimit" json:"board_unit_limit,omitempty"`
	UnderlordAvailableTalents             []uint32                             `protobuf:"varint,53,rep,name=underlord_available_talents,json=underlordAvailableTalents" json:"underlord_available_talents,omitempty"`
	CombatType                            *uint32                              `protobuf:"varint,54,opt,name=combat_type,json=combatType" json:"combat_type,omitempty"`
	BoardBuddy                            *CMsgBoardBuddy                      `protobuf:"bytes,55,opt,name=board_buddy,json=boardBuddy" json:"board_buddy,omitempty"`
	PropState                             []*CMsgMapProp                       `protobuf:"bytes,56,rep,name=prop_state,json=propState" json:"prop_state,omitempty"`
	BrawnyKillsFloat                      *float32                             `protobuf:"fixed32,57,opt,name=brawny_kills_float,json=brawnyKillsFloat" json:"brawny_kills_float,omitempty"`
	OwnsEvent                             *bool                                `protobuf:"varint,58,opt,name=owns_event,json=ownsEvent" json:"owns_event,omitempty"`
	CityPrestigeLevel                     *uint32                              `protobuf:"varint,59,opt,name=city_prestige_level,json=cityPrestigeLevel" json:"city_prestige_level,omitempty"`
	StatBestVictoryDuration               *uint32                              `protobuf:"varint,1000,opt,name=stat_best_victory_duration,json=statBestVictoryDuration" json:"stat_best_victory_duration,omitempty"`
	StatBestVictoryNetWorth               *uint32                              `protobuf:"varint,1001,opt,name=stat_best_victory_net_worth,json=statBestVictoryNetWorth" json:"stat_best_victory_net_worth,omitempty"`
	StatBestVictoryRemainingHealthPercent *uint32                              `protobuf:"varint,1002,opt,name=stat_best_victory_remaining_health_percent,json=statBestVictoryRemainingHealthPercent" json:"stat_best_victory_remaining_health_percent,omitempty"`
	StatBestVictoryUnits                  *uint32                              `protobuf:"varint,1006,opt,name=stat_best_victory_units,json=statBestVictoryUnits" json:"stat_best_victory_units,omitempty"`
	StatPrevVictoryDuration               *uint32                              `protobuf:"varint,1003,opt,name=stat_prev_victory_duration,json=statPrevVictoryDuration" json:"stat_prev_victory_duration,omitempty"`
	StatPrevVictoryNetWorth               *uint32                              `protobuf:"varint,1004,opt,name=stat_prev_victory_net_worth,json=statPrevVictoryNetWorth" json:"stat_prev_victory_net_worth,omitempty"`
	StatPrevVictoryRemainingHealthPercent *uint32                              `protobuf:"varint,1005,opt,name=stat_prev_victory_remaining_health_percent,json=statPrevVictoryRemainingHealthPercent" json:"stat_prev_victory_remaining_health_percent,omitempty"`
	StatPrevVictoryUnits                  *uint32                              `protobuf:"varint,1007,opt,name=stat_prev_victory_units,json=statPrevVictoryUnits" json:"stat_prev_victory_units,omitempty"`
	// Types that are assignable to Opponent:
	//	*CMsgPublicPlayerState_OpponentPlayerSlot
	//	*CMsgPublicPlayerState_OpponentNeutralWave
	Opponent isCMsgPublicPlayerState_Opponent `protobuf_oneof:"opponent"`
}

// Default values for CMsgPublicPlayerState fields.
const (
	Default_CMsgPublicPlayerState_ConnectionStatus = EPlayerConnectionState_EPlayerConnectionState_Connecting
	Default_CMsgPublicPlayerState_Platform         = EDACPlatform_k_eDACPlatform_None
	Default_CMsgPublicPlayerState_LobbyTeam        = EDACLobbyTeam_k_EDACLobbyTeam_Team0
)

func (x *CMsgPublicPlayerState) Reset() {
	*x = CMsgPublicPlayerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPublicPlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPublicPlayerState) ProtoMessage() {}

func (x *CMsgPublicPlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPublicPlayerState.ProtoReflect.Descriptor instead.
func (*CMsgPublicPlayerState) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgPublicPlayerState) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetConnectionStatus() EPlayerConnectionState {
	if x != nil && x.ConnectionStatus != nil {
		return *x.ConnectionStatus
	}
	return Default_CMsgPublicPlayerState_ConnectionStatus
}

func (x *CMsgPublicPlayerState) GetIsHumanPlayer() bool {
	if x != nil && x.IsHumanPlayer != nil {
		return *x.IsHumanPlayer
	}
	return false
}

func (x *CMsgPublicPlayerState) GetHealth() int32 {
	if x != nil && x.Health != nil {
		return *x.Health
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetGold() int32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetXp() int32 {
	if x != nil && x.Xp != nil {
		return *x.Xp
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetItemSlots() []*CMsgItemSlot {
	if x != nil {
		return x.ItemSlots
	}
	return nil
}

func (x *CMsgPublicPlayerState) GetUnits() []*CMsgUnit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgPublicPlayerState) GetFinalPlace() uint32 {
	if x != nil && x.FinalPlace != nil {
		return *x.FinalPlace
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetNextLevelXp() int32 {
	if x != nil && x.NextLevelXp != nil {
		return *x.NextLevelXp
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetSynergies() []*CMsgSynergy {
	if x != nil {
		return x.Synergies
	}
	return nil
}

func (x *CMsgPublicPlayerState) GetBotPersonaName() string {
	if x != nil && x.BotPersonaName != nil {
		return *x.BotPersonaName
	}
	return ""
}

func (x *CMsgPublicPlayerState) GetSequenceNumber() uint64 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetShopCostModifier() int32 {
	if x != nil && x.ShopCostModifier != nil {
		return *x.ShopCostModifier
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetCombatDuration() float32 {
	if x != nil && x.CombatDuration != nil {
		return *x.CombatDuration
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetRerollCostModifier() int32 {
	if x != nil && x.RerollCostModifier != nil {
		return *x.RerollCostModifier
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetWinStreak() int32 {
	if x != nil && x.WinStreak != nil {
		return *x.WinStreak
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetLoseStreak() int32 {
	if x != nil && x.LoseStreak != nil {
		return *x.LoseStreak
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetRankTier() uint32 {
	if x != nil && x.RankTier != nil {
		return *x.RankTier
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetDisconnectedTime() float32 {
	if x != nil && x.DisconnectedTime != nil {
		return *x.DisconnectedTime
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetVsOpponentWins() uint32 {
	if x != nil && x.VsOpponentWins != nil {
		return *x.VsOpponentWins
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetVsOpponentLosses() uint32 {
	if x != nil && x.VsOpponentLosses != nil {
		return *x.VsOpponentLosses
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetVsOpponentDraws() uint32 {
	if x != nil && x.VsOpponentDraws != nil {
		return *x.VsOpponentDraws
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetPlatform() EDACPlatform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Default_CMsgPublicPlayerState_Platform
}

func (x *CMsgPublicPlayerState) GetEventTier() uint32 {
	if x != nil && x.EventTier != nil {
		return *x.EventTier
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CMsgPublicPlayerState) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetLosses() uint32 {
	if x != nil && x.Losses != nil {
		return *x.Losses
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetGlobalLeaderboardRank() uint32 {
	if x != nil && x.GlobalLeaderboardRank != nil {
		return *x.GlobalLeaderboardRank
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetPlayerLoadout() []*CMsgPublicPlayerState_LoadoutItem {
	if x != nil {
		return x.PlayerLoadout
	}
	return nil
}

func (x *CMsgPublicPlayerState) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetCombatResult() uint32 {
	if x != nil && x.CombatResult != nil {
		return *x.CombatResult
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetLobbyTeam() EDACLobbyTeam {
	if x != nil && x.LobbyTeam != nil {
		return *x.LobbyTeam
	}
	return Default_CMsgPublicPlayerState_LobbyTeam
}

func (x *CMsgPublicPlayerState) GetUnderlordSelectedTalents() []uint32 {
	if x != nil {
		return x.UnderlordSelectedTalents
	}
	return nil
}

func (x *CMsgPublicPlayerState) GetIsMirroredMatch() bool {
	if x != nil && x.IsMirroredMatch != nil {
		return *x.IsMirroredMatch
	}
	return false
}

func (x *CMsgPublicPlayerState) GetUnderlord() uint32 {
	if x != nil && x.Underlord != nil {
		return *x.Underlord
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetPartyIndex() uint32 {
	if x != nil && x.PartyIndex != nil {
		return *x.PartyIndex
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetNextCombatOpponentNeutralWave() uint32 {
	if x != nil && x.NextCombatOpponentNeutralWave != nil {
		return *x.NextCombatOpponentNeutralWave
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetBoardUnitLimit() int32 {
	if x != nil && x.BoardUnitLimit != nil {
		return *x.BoardUnitLimit
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetUnderlordAvailableTalents() []uint32 {
	if x != nil {
		return x.UnderlordAvailableTalents
	}
	return nil
}

func (x *CMsgPublicPlayerState) GetCombatType() uint32 {
	if x != nil && x.CombatType != nil {
		return *x.CombatType
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetBoardBuddy() *CMsgBoardBuddy {
	if x != nil {
		return x.BoardBuddy
	}
	return nil
}

func (x *CMsgPublicPlayerState) GetPropState() []*CMsgMapProp {
	if x != nil {
		return x.PropState
	}
	return nil
}

func (x *CMsgPublicPlayerState) GetBrawnyKillsFloat() float32 {
	if x != nil && x.BrawnyKillsFloat != nil {
		return *x.BrawnyKillsFloat
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetOwnsEvent() bool {
	if x != nil && x.OwnsEvent != nil {
		return *x.OwnsEvent
	}
	return false
}

func (x *CMsgPublicPlayerState) GetCityPrestigeLevel() uint32 {
	if x != nil && x.CityPrestigeLevel != nil {
		return *x.CityPrestigeLevel
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetStatBestVictoryDuration() uint32 {
	if x != nil && x.StatBestVictoryDuration != nil {
		return *x.StatBestVictoryDuration
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetStatBestVictoryNetWorth() uint32 {
	if x != nil && x.StatBestVictoryNetWorth != nil {
		return *x.StatBestVictoryNetWorth
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetStatBestVictoryRemainingHealthPercent() uint32 {
	if x != nil && x.StatBestVictoryRemainingHealthPercent != nil {
		return *x.StatBestVictoryRemainingHealthPercent
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetStatBestVictoryUnits() uint32 {
	if x != nil && x.StatBestVictoryUnits != nil {
		return *x.StatBestVictoryUnits
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetStatPrevVictoryDuration() uint32 {
	if x != nil && x.StatPrevVictoryDuration != nil {
		return *x.StatPrevVictoryDuration
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetStatPrevVictoryNetWorth() uint32 {
	if x != nil && x.StatPrevVictoryNetWorth != nil {
		return *x.StatPrevVictoryNetWorth
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetStatPrevVictoryRemainingHealthPercent() uint32 {
	if x != nil && x.StatPrevVictoryRemainingHealthPercent != nil {
		return *x.StatPrevVictoryRemainingHealthPercent
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetStatPrevVictoryUnits() uint32 {
	if x != nil && x.StatPrevVictoryUnits != nil {
		return *x.StatPrevVictoryUnits
	}
	return 0
}

func (m *CMsgPublicPlayerState) GetOpponent() isCMsgPublicPlayerState_Opponent {
	if m != nil {
		return m.Opponent
	}
	return nil
}

func (x *CMsgPublicPlayerState) GetOpponentPlayerSlot() uint32 {
	if x, ok := x.GetOpponent().(*CMsgPublicPlayerState_OpponentPlayerSlot); ok {
		return x.OpponentPlayerSlot
	}
	return 0
}

func (x *CMsgPublicPlayerState) GetOpponentNeutralWave() uint32 {
	if x, ok := x.GetOpponent().(*CMsgPublicPlayerState_OpponentNeutralWave); ok {
		return x.OpponentNeutralWave
	}
	return 0
}

type isCMsgPublicPlayerState_Opponent interface {
	isCMsgPublicPlayerState_Opponent()
}

type CMsgPublicPlayerState_OpponentPlayerSlot struct {
	OpponentPlayerSlot uint32 `protobuf:"varint,24,opt,name=opponent_player_slot,json=opponentPlayerSlot,oneof"`
}

type CMsgPublicPlayerState_OpponentNeutralWave struct {
	OpponentNeutralWave uint32 `protobuf:"varint,25,opt,name=opponent_neutral_wave,json=opponentNeutralWave,oneof"`
}

func (*CMsgPublicPlayerState_OpponentPlayerSlot) isCMsgPublicPlayerState_Opponent() {}

func (*CMsgPublicPlayerState_OpponentNeutralWave) isCMsgPublicPlayerState_Opponent() {}

type CMsgPublicPostMatchStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players  []*CMsgPublicPostMatchStats_PlayerInfo `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	GameMode *uint32                                `protobuf:"varint,2,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	MatchId  *uint64                                `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgPublicPostMatchStats) Reset() {
	*x = CMsgPublicPostMatchStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPublicPostMatchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPublicPostMatchStats) ProtoMessage() {}

func (x *CMsgPublicPostMatchStats) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPublicPostMatchStats.ProtoReflect.Descriptor instead.
func (*CMsgPublicPostMatchStats) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgPublicPostMatchStats) GetPlayers() []*CMsgPublicPostMatchStats_PlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgPublicPostMatchStats) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CMsgPublicPostMatchStats) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgIndividualPostMatchStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rounds               []*CMsgIndividualPostMatchStats_Round    `protobuf:"bytes,1,rep,name=rounds" json:"rounds,omitempty"`
	PlayerSlot           *uint32                                  `protobuf:"varint,2,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	Position             *uint32                                  `protobuf:"varint,3,opt,name=position" json:"position,omitempty"`
	Events               []*CMsgIndividualPostMatchStats_Event    `protobuf:"bytes,4,rep,name=events" json:"events,omitempty"`
	IndividualRankUpdate *CMsgIndividualPostMatchStats_RankUpdate `protobuf:"bytes,5,opt,name=individual_rank_update,json=individualRankUpdate" json:"individual_rank_update,omitempty"`
	DuosRankUpdate       *CMsgIndividualPostMatchStats_RankUpdate `protobuf:"bytes,6,opt,name=duos_rank_update,json=duosRankUpdate" json:"duos_rank_update,omitempty"`
	GameMode             *EDACGameMode                            `protobuf:"varint,7,opt,name=game_mode,json=gameMode,enum=underlords.EDACGameMode,def=0" json:"game_mode,omitempty"`
	MatchMode            *EDACMatchMode                           `protobuf:"varint,8,opt,name=match_mode,json=matchMode,enum=underlords.EDACMatchMode,def=0" json:"match_mode,omitempty"`
	BotDifficulty        *EDACBotDifficulty                       `protobuf:"varint,9,opt,name=bot_difficulty,json=botDifficulty,enum=underlords.EDACBotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	UnderlordId          *uint32                                  `protobuf:"varint,10,opt,name=underlord_id,json=underlordId" json:"underlord_id,omitempty"`
	UnderlordBuildId     *uint32                                  `protobuf:"varint,11,opt,name=underlord_build_id,json=underlordBuildId" json:"underlord_build_id,omitempty"`
	GameModeSettings     *CMsgGameModeSettings                    `protobuf:"bytes,12,opt,name=game_mode_settings,json=gameModeSettings" json:"game_mode_settings,omitempty"`
}

// Default values for CMsgIndividualPostMatchStats fields.
const (
	Default_CMsgIndividualPostMatchStats_GameMode      = EDACGameMode_k_EDACGameMode_Invalid
	Default_CMsgIndividualPostMatchStats_MatchMode     = EDACMatchMode_k_EDACMatchMode_Invalid
	Default_CMsgIndividualPostMatchStats_BotDifficulty = EDACBotDifficulty_k_EDACBotDifficulty_None
)

func (x *CMsgIndividualPostMatchStats) Reset() {
	*x = CMsgIndividualPostMatchStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgIndividualPostMatchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgIndividualPostMatchStats) ProtoMessage() {}

func (x *CMsgIndividualPostMatchStats) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgIndividualPostMatchStats.ProtoReflect.Descriptor instead.
func (*CMsgIndividualPostMatchStats) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgIndividualPostMatchStats) GetRounds() []*CMsgIndividualPostMatchStats_Round {
	if x != nil {
		return x.Rounds
	}
	return nil
}

func (x *CMsgIndividualPostMatchStats) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats) GetPosition() uint32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats) GetEvents() []*CMsgIndividualPostMatchStats_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CMsgIndividualPostMatchStats) GetIndividualRankUpdate() *CMsgIndividualPostMatchStats_RankUpdate {
	if x != nil {
		return x.IndividualRankUpdate
	}
	return nil
}

func (x *CMsgIndividualPostMatchStats) GetDuosRankUpdate() *CMsgIndividualPostMatchStats_RankUpdate {
	if x != nil {
		return x.DuosRankUpdate
	}
	return nil
}

func (x *CMsgIndividualPostMatchStats) GetGameMode() EDACGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgIndividualPostMatchStats_GameMode
}

func (x *CMsgIndividualPostMatchStats) GetMatchMode() EDACMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgIndividualPostMatchStats_MatchMode
}

func (x *CMsgIndividualPostMatchStats) GetBotDifficulty() EDACBotDifficulty {
	if x != nil && x.BotDifficulty != nil {
		return *x.BotDifficulty
	}
	return Default_CMsgIndividualPostMatchStats_BotDifficulty
}

func (x *CMsgIndividualPostMatchStats) GetUnderlordId() uint32 {
	if x != nil && x.UnderlordId != nil {
		return *x.UnderlordId
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats) GetUnderlordBuildId() uint32 {
	if x != nil && x.UnderlordBuildId != nil {
		return *x.UnderlordBuildId
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats) GetGameModeSettings() *CMsgGameModeSettings {
	if x != nil {
		return x.GameModeSettings
	}
	return nil
}

type CMsgPlayerPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoDeployUnits *bool `protobuf:"varint,1,opt,name=auto_deploy_units,json=autoDeployUnits" json:"auto_deploy_units,omitempty"`
}

func (x *CMsgPlayerPreferences) Reset() {
	*x = CMsgPlayerPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerPreferences) ProtoMessage() {}

func (x *CMsgPlayerPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerPreferences.ProtoReflect.Descriptor instead.
func (*CMsgPlayerPreferences) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgPlayerPreferences) GetAutoDeployUnits() bool {
	if x != nil && x.AutoDeployUnits != nil {
		return *x.AutoDeployUnits
	}
	return false
}

type CMsgPrivatePlayerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot                    *uint32                                  `protobuf:"varint,1,req,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	UnclaimedRewardCount          *int32                                   `protobuf:"varint,2,opt,name=unclaimed_reward_count,json=unclaimedRewardCount" json:"unclaimed_reward_count,omitempty"`
	OldestUnclaimedReward         *CMsgPrivatePlayerState_ItemChoiceReward `protobuf:"bytes,3,opt,name=oldest_unclaimed_reward,json=oldestUnclaimedReward" json:"oldest_unclaimed_reward,omitempty"`
	ShopLocked                    *bool                                    `protobuf:"varint,4,opt,name=shop_locked,json=shopLocked" json:"shop_locked,omitempty"`
	ShopUnits                     []*CMsgShopItem                          `protobuf:"bytes,5,rep,name=shop_units,json=shopUnits" json:"shop_units,omitempty"`
	GoldEarnedThisRound           *uint32                                  `protobuf:"varint,6,opt,name=gold_earned_this_round,json=goldEarnedThisRound" json:"gold_earned_this_round,omitempty"`
	ShopGenerationId              *uint32                                  `protobuf:"varint,7,opt,name=shop_generation_id,json=shopGenerationId" json:"shop_generation_id,omitempty"`
	Challenges                    []*CMsgPrivatePlayerState_Challenge      `protobuf:"bytes,8,rep,name=challenges" json:"challenges,omitempty"`
	GrantsRewards                 *CMsgPrivatePlayerState_EGrantRewards    `protobuf:"varint,9,opt,name=grants_rewards,json=grantsRewards,enum=underlords.CMsgPrivatePlayerState_EGrantRewards,def=0" json:"grants_rewards,omitempty"`
	SequenceNumber                *uint32                                  `protobuf:"varint,10,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	RerollCost                    *int32                                   `protobuf:"varint,11,opt,name=reroll_cost,json=rerollCost" json:"reroll_cost,omitempty"`
	UsedTurboBucketReroll         *bool                                    `protobuf:"varint,20,opt,name=used_turbo_bucket_reroll,json=usedTurboBucketReroll" json:"used_turbo_bucket_reroll,omitempty"`
	TurboBuckets                  []*CMsgTurboBucket                       `protobuf:"bytes,21,rep,name=turbo_buckets,json=turboBuckets" json:"turbo_buckets,omitempty"`
	CanSelectUnderlord            *bool                                    `protobuf:"varint,22,opt,name=can_select_underlord,json=canSelectUnderlord" json:"can_select_underlord,omitempty"`
	UnderlordPickerOffering       []*CMsgUnderlordPickerOffering           `protobuf:"bytes,23,rep,name=underlord_picker_offering,json=underlordPickerOffering" json:"underlord_picker_offering,omitempty"`
	UsedItemRewardRerollThisRound *bool                                    `protobuf:"varint,24,opt,name=used_item_reward_reroll_this_round,json=usedItemRewardRerollThisRound" json:"used_item_reward_reroll_this_round,omitempty"`
}

// Default values for CMsgPrivatePlayerState fields.
const (
	Default_CMsgPrivatePlayerState_GrantsRewards = CMsgPrivatePlayerState_EGrantRewards_No
)

func (x *CMsgPrivatePlayerState) Reset() {
	*x = CMsgPrivatePlayerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPrivatePlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPrivatePlayerState) ProtoMessage() {}

func (x *CMsgPrivatePlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPrivatePlayerState.ProtoReflect.Descriptor instead.
func (*CMsgPrivatePlayerState) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgPrivatePlayerState) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgPrivatePlayerState) GetUnclaimedRewardCount() int32 {
	if x != nil && x.UnclaimedRewardCount != nil {
		return *x.UnclaimedRewardCount
	}
	return 0
}

func (x *CMsgPrivatePlayerState) GetOldestUnclaimedReward() *CMsgPrivatePlayerState_ItemChoiceReward {
	if x != nil {
		return x.OldestUnclaimedReward
	}
	return nil
}

func (x *CMsgPrivatePlayerState) GetShopLocked() bool {
	if x != nil && x.ShopLocked != nil {
		return *x.ShopLocked
	}
	return false
}

func (x *CMsgPrivatePlayerState) GetShopUnits() []*CMsgShopItem {
	if x != nil {
		return x.ShopUnits
	}
	return nil
}

func (x *CMsgPrivatePlayerState) GetGoldEarnedThisRound() uint32 {
	if x != nil && x.GoldEarnedThisRound != nil {
		return *x.GoldEarnedThisRound
	}
	return 0
}

func (x *CMsgPrivatePlayerState) GetShopGenerationId() uint32 {
	if x != nil && x.ShopGenerationId != nil {
		return *x.ShopGenerationId
	}
	return 0
}

func (x *CMsgPrivatePlayerState) GetChallenges() []*CMsgPrivatePlayerState_Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

func (x *CMsgPrivatePlayerState) GetGrantsRewards() CMsgPrivatePlayerState_EGrantRewards {
	if x != nil && x.GrantsRewards != nil {
		return *x.GrantsRewards
	}
	return Default_CMsgPrivatePlayerState_GrantsRewards
}

func (x *CMsgPrivatePlayerState) GetSequenceNumber() uint32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *CMsgPrivatePlayerState) GetRerollCost() int32 {
	if x != nil && x.RerollCost != nil {
		return *x.RerollCost
	}
	return 0
}

func (x *CMsgPrivatePlayerState) GetUsedTurboBucketReroll() bool {
	if x != nil && x.UsedTurboBucketReroll != nil {
		return *x.UsedTurboBucketReroll
	}
	return false
}

func (x *CMsgPrivatePlayerState) GetTurboBuckets() []*CMsgTurboBucket {
	if x != nil {
		return x.TurboBuckets
	}
	return nil
}

func (x *CMsgPrivatePlayerState) GetCanSelectUnderlord() bool {
	if x != nil && x.CanSelectUnderlord != nil {
		return *x.CanSelectUnderlord
	}
	return false
}

func (x *CMsgPrivatePlayerState) GetUnderlordPickerOffering() []*CMsgUnderlordPickerOffering {
	if x != nil {
		return x.UnderlordPickerOffering
	}
	return nil
}

func (x *CMsgPrivatePlayerState) GetUsedItemRewardRerollThisRound() bool {
	if x != nil && x.UsedItemRewardRerollThisRound != nil {
		return *x.UsedItemRewardRerollThisRound
	}
	return false
}

type CMsgMatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameState                *EGameState                `protobuf:"varint,1,opt,name=game_state,json=gameState,enum=underlords.EGameState,def=0" json:"game_state,omitempty"`
	RoundState               *ERoundState               `protobuf:"varint,2,opt,name=round_state,json=roundState,enum=underlords.ERoundState,def=0" json:"round_state,omitempty"`
	RoundNumber              *int32                     `protobuf:"varint,3,opt,name=round_number,json=roundNumber" json:"round_number,omitempty"`
	StateChangeTime          *float32                   `protobuf:"fixed32,4,opt,name=state_change_time,json=stateChangeTime" json:"state_change_time,omitempty"`
	StateDuration            *float32                   `protobuf:"fixed32,5,opt,name=state_duration,json=stateDuration" json:"state_duration,omitempty"`
	PausedStateTimeRemaining *float32                   `protobuf:"fixed32,6,opt,name=paused_state_time_remaining,json=pausedStateTimeRemaining" json:"paused_state_time_remaining,omitempty"`
	MatchId                  *uint64                    `protobuf:"varint,8,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	GameModifiers            *CMsgGameModifiers         `protobuf:"bytes,9,opt,name=game_modifiers,json=gameModifiers" json:"game_modifiers,omitempty"`
	TeamInfo                 []*CMsgMatchState_TeamInfo `protobuf:"bytes,10,rep,name=team_info,json=teamInfo" json:"team_info,omitempty"`
	FeatureControls          *string                    `protobuf:"bytes,11,opt,name=feature_controls,json=featureControls" json:"feature_controls,omitempty"`
}

// Default values for CMsgMatchState fields.
const (
	Default_CMsgMatchState_GameState  = EGameState_EGameState_Intro
	Default_CMsgMatchState_RoundState = ERoundState_ERoundState_Preparing
)

func (x *CMsgMatchState) Reset() {
	*x = CMsgMatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchState) ProtoMessage() {}

func (x *CMsgMatchState) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchState.ProtoReflect.Descriptor instead.
func (*CMsgMatchState) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgMatchState) GetGameState() EGameState {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return Default_CMsgMatchState_GameState
}

func (x *CMsgMatchState) GetRoundState() ERoundState {
	if x != nil && x.RoundState != nil {
		return *x.RoundState
	}
	return Default_CMsgMatchState_RoundState
}

func (x *CMsgMatchState) GetRoundNumber() int32 {
	if x != nil && x.RoundNumber != nil {
		return *x.RoundNumber
	}
	return 0
}

func (x *CMsgMatchState) GetStateChangeTime() float32 {
	if x != nil && x.StateChangeTime != nil {
		return *x.StateChangeTime
	}
	return 0
}

func (x *CMsgMatchState) GetStateDuration() float32 {
	if x != nil && x.StateDuration != nil {
		return *x.StateDuration
	}
	return 0
}

func (x *CMsgMatchState) GetPausedStateTimeRemaining() float32 {
	if x != nil && x.PausedStateTimeRemaining != nil {
		return *x.PausedStateTimeRemaining
	}
	return 0
}

func (x *CMsgMatchState) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgMatchState) GetGameModifiers() *CMsgGameModifiers {
	if x != nil {
		return x.GameModifiers
	}
	return nil
}

func (x *CMsgMatchState) GetTeamInfo() []*CMsgMatchState_TeamInfo {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

func (x *CMsgMatchState) GetFeatureControls() string {
	if x != nil && x.FeatureControls != nil {
		return *x.FeatureControls
	}
	return ""
}

type CMsgGameModeState_Normal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGameModeState_Normal) Reset() {
	*x = CMsgGameModeState_Normal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameModeState_Normal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameModeState_Normal) ProtoMessage() {}

func (x *CMsgGameModeState_Normal) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameModeState_Normal.ProtoReflect.Descriptor instead.
func (*CMsgGameModeState_Normal) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{30}
}

type CMsgGameModeState_Turbo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseNormal *CMsgGameModeState_Normal `protobuf:"bytes,1,opt,name=base_normal,json=baseNormal" json:"base_normal,omitempty"`
}

func (x *CMsgGameModeState_Turbo) Reset() {
	*x = CMsgGameModeState_Turbo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameModeState_Turbo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameModeState_Turbo) ProtoMessage() {}

func (x *CMsgGameModeState_Turbo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameModeState_Turbo.ProtoReflect.Descriptor instead.
func (*CMsgGameModeState_Turbo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgGameModeState_Turbo) GetBaseNormal() *CMsgGameModeState_Normal {
	if x != nil {
		return x.BaseNormal
	}
	return nil
}

type CMsgDuos_TeamCombatResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot           *uint32 `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	OpponentSlot         *uint32 `protobuf:"varint,2,opt,name=opponent_slot,json=opponentSlot" json:"opponent_slot,omitempty"`
	DamageResult         *int32  `protobuf:"varint,3,opt,name=damage_result,json=damageResult" json:"damage_result,omitempty"`
	TeammateSlot         *uint32 `protobuf:"varint,4,opt,name=teammate_slot,json=teammateSlot" json:"teammate_slot,omitempty"`
	TeammateOpponentSlot *uint32 `protobuf:"varint,5,opt,name=teammate_opponent_slot,json=teammateOpponentSlot" json:"teammate_opponent_slot,omitempty"`
	TeammateDamageResult *int32  `protobuf:"varint,6,opt,name=teammate_damage_result,json=teammateDamageResult" json:"teammate_damage_result,omitempty"`
}

func (x *CMsgDuos_TeamCombatResult) Reset() {
	*x = CMsgDuos_TeamCombatResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgDuos_TeamCombatResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDuos_TeamCombatResult) ProtoMessage() {}

func (x *CMsgDuos_TeamCombatResult) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDuos_TeamCombatResult.ProtoReflect.Descriptor instead.
func (*CMsgDuos_TeamCombatResult) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgDuos_TeamCombatResult) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgDuos_TeamCombatResult) GetOpponentSlot() uint32 {
	if x != nil && x.OpponentSlot != nil {
		return *x.OpponentSlot
	}
	return 0
}

func (x *CMsgDuos_TeamCombatResult) GetDamageResult() int32 {
	if x != nil && x.DamageResult != nil {
		return *x.DamageResult
	}
	return 0
}

func (x *CMsgDuos_TeamCombatResult) GetTeammateSlot() uint32 {
	if x != nil && x.TeammateSlot != nil {
		return *x.TeammateSlot
	}
	return 0
}

func (x *CMsgDuos_TeamCombatResult) GetTeammateOpponentSlot() uint32 {
	if x != nil && x.TeammateOpponentSlot != nil {
		return *x.TeammateOpponentSlot
	}
	return 0
}

func (x *CMsgDuos_TeamCombatResult) GetTeammateDamageResult() int32 {
	if x != nil && x.TeammateDamageResult != nil {
		return *x.TeammateDamageResult
	}
	return 0
}

type CMsgGameModeState_Duos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseNormal    *CMsgGameModeState_Normal    `protobuf:"bytes,1,opt,name=base_normal,json=baseNormal" json:"base_normal,omitempty"`
	CombatResults []*CMsgDuos_TeamCombatResult `protobuf:"bytes,2,rep,name=combat_results,json=combatResults" json:"combat_results,omitempty"`
}

func (x *CMsgGameModeState_Duos) Reset() {
	*x = CMsgGameModeState_Duos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameModeState_Duos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameModeState_Duos) ProtoMessage() {}

func (x *CMsgGameModeState_Duos) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameModeState_Duos.ProtoReflect.Descriptor instead.
func (*CMsgGameModeState_Duos) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgGameModeState_Duos) GetBaseNormal() *CMsgGameModeState_Normal {
	if x != nil {
		return x.BaseNormal
	}
	return nil
}

func (x *CMsgGameModeState_Duos) GetCombatResults() []*CMsgDuos_TeamCombatResult {
	if x != nil {
		return x.CombatResults
	}
	return nil
}

type CMsgGameModeState_TechPrototypeA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundsRemaining *int32 `protobuf:"varint,1,opt,name=rounds_remaining,json=roundsRemaining" json:"rounds_remaining,omitempty"`
}

func (x *CMsgGameModeState_TechPrototypeA) Reset() {
	*x = CMsgGameModeState_TechPrototypeA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameModeState_TechPrototypeA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameModeState_TechPrototypeA) ProtoMessage() {}

func (x *CMsgGameModeState_TechPrototypeA) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameModeState_TechPrototypeA.ProtoReflect.Descriptor instead.
func (*CMsgGameModeState_TechPrototypeA) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgGameModeState_TechPrototypeA) GetRoundsRemaining() int32 {
	if x != nil && x.RoundsRemaining != nil {
		return *x.RoundsRemaining
	}
	return 0
}

type CMsgGameModeState_Sandbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpponentPlayerSlot *int32 `protobuf:"varint,1,opt,name=opponent_player_slot,json=opponentPlayerSlot" json:"opponent_player_slot,omitempty"`
}

func (x *CMsgGameModeState_Sandbox) Reset() {
	*x = CMsgGameModeState_Sandbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameModeState_Sandbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameModeState_Sandbox) ProtoMessage() {}

func (x *CMsgGameModeState_Sandbox) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameModeState_Sandbox.ProtoReflect.Descriptor instead.
func (*CMsgGameModeState_Sandbox) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgGameModeState_Sandbox) GetOpponentPlayerSlot() int32 {
	if x != nil && x.OpponentPlayerSlot != nil {
		return *x.OpponentPlayerSlot
	}
	return 0
}

type CMsgGameModeState_Puzzle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpponentPlayerSlot    *int32                                 `protobuf:"varint,1,opt,name=opponent_player_slot,json=opponentPlayerSlot" json:"opponent_player_slot,omitempty"`
	ActiveRules           []*CMsgGameModeState_Puzzle_ActiveRule `protobuf:"bytes,2,rep,name=active_rules,json=activeRules" json:"active_rules,omitempty"`
	ActiveRulesSatisfied  *bool                                  `protobuf:"varint,3,opt,name=active_rules_satisfied,json=activeRulesSatisfied" json:"active_rules_satisfied,omitempty"`
	PuzzleId              *int32                                 `protobuf:"varint,4,opt,name=puzzle_id,json=puzzleId" json:"puzzle_id,omitempty"`
	AllowedUnitDefIndices []uint32                               `protobuf:"varint,5,rep,name=allowed_unit_def_indices,json=allowedUnitDefIndices" json:"allowed_unit_def_indices,omitempty"`
}

func (x *CMsgGameModeState_Puzzle) Reset() {
	*x = CMsgGameModeState_Puzzle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameModeState_Puzzle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameModeState_Puzzle) ProtoMessage() {}

func (x *CMsgGameModeState_Puzzle) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameModeState_Puzzle.ProtoReflect.Descriptor instead.
func (*CMsgGameModeState_Puzzle) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgGameModeState_Puzzle) GetOpponentPlayerSlot() int32 {
	if x != nil && x.OpponentPlayerSlot != nil {
		return *x.OpponentPlayerSlot
	}
	return 0
}

func (x *CMsgGameModeState_Puzzle) GetActiveRules() []*CMsgGameModeState_Puzzle_ActiveRule {
	if x != nil {
		return x.ActiveRules
	}
	return nil
}

func (x *CMsgGameModeState_Puzzle) GetActiveRulesSatisfied() bool {
	if x != nil && x.ActiveRulesSatisfied != nil {
		return *x.ActiveRulesSatisfied
	}
	return false
}

func (x *CMsgGameModeState_Puzzle) GetPuzzleId() int32 {
	if x != nil && x.PuzzleId != nil {
		return *x.PuzzleId
	}
	return 0
}

func (x *CMsgGameModeState_Puzzle) GetAllowedUnitDefIndices() []uint32 {
	if x != nil {
		return x.AllowedUnitDefIndices
	}
	return nil
}

type CMsgGameModeState_Tutorial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TutorialStateName  *string `protobuf:"bytes,1,opt,name=tutorial_state_name,json=tutorialStateName" json:"tutorial_state_name,omitempty"`
	OpponentPlayerSlot *int32  `protobuf:"varint,2,opt,name=opponent_player_slot,json=opponentPlayerSlot" json:"opponent_player_slot,omitempty"`
}

func (x *CMsgGameModeState_Tutorial) Reset() {
	*x = CMsgGameModeState_Tutorial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameModeState_Tutorial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameModeState_Tutorial) ProtoMessage() {}

func (x *CMsgGameModeState_Tutorial) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameModeState_Tutorial.ProtoReflect.Descriptor instead.
func (*CMsgGameModeState_Tutorial) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgGameModeState_Tutorial) GetTutorialStateName() string {
	if x != nil && x.TutorialStateName != nil {
		return *x.TutorialStateName
	}
	return ""
}

func (x *CMsgGameModeState_Tutorial) GetOpponentPlayerSlot() int32 {
	if x != nil && x.OpponentPlayerSlot != nil {
		return *x.OpponentPlayerSlot
	}
	return 0
}

type CMsgGameModeState_Streetfight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreetfightId      *uint32 `protobuf:"varint,1,opt,name=streetfight_id,json=streetfightId" json:"streetfight_id,omitempty"`
	OpponentPlayerSlot *int32  `protobuf:"varint,2,opt,name=opponent_player_slot,json=opponentPlayerSlot" json:"opponent_player_slot,omitempty"`
}

func (x *CMsgGameModeState_Streetfight) Reset() {
	*x = CMsgGameModeState_Streetfight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameModeState_Streetfight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameModeState_Streetfight) ProtoMessage() {}

func (x *CMsgGameModeState_Streetfight) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameModeState_Streetfight.ProtoReflect.Descriptor instead.
func (*CMsgGameModeState_Streetfight) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgGameModeState_Streetfight) GetStreetfightId() uint32 {
	if x != nil && x.StreetfightId != nil {
		return *x.StreetfightId
	}
	return 0
}

func (x *CMsgGameModeState_Streetfight) GetOpponentPlayerSlot() int32 {
	if x != nil && x.OpponentPlayerSlot != nil {
		return *x.OpponentPlayerSlot
	}
	return 0
}

type DungeonActionCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId *int32 `protobuf:"varint,1,opt,name=card_id,json=cardId" json:"card_id,omitempty"`
}

func (x *DungeonActionCard) Reset() {
	*x = DungeonActionCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DungeonActionCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonActionCard) ProtoMessage() {}

func (x *DungeonActionCard) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonActionCard.ProtoReflect.Descriptor instead.
func (*DungeonActionCard) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{39}
}

func (x *DungeonActionCard) GetCardId() int32 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

type CMsgGameModeState_Dungeon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DungeonPhase    *EDACDungeonPhase     `protobuf:"varint,1,opt,name=dungeon_phase,json=dungeonPhase,enum=underlords.EDACDungeonPhase,def=0" json:"dungeon_phase,omitempty"`
	CurrentRoomType *EDACDungeonRoomType  `protobuf:"varint,2,opt,name=current_room_type,json=currentRoomType,enum=underlords.EDACDungeonRoomType,def=0" json:"current_room_type,omitempty"`
	NextRoomTypes   []EDACDungeonRoomType `protobuf:"varint,3,rep,name=next_room_types,json=nextRoomTypes,enum=underlords.EDACDungeonRoomType" json:"next_room_types,omitempty"`
	AvailableCards  []*DungeonActionCard  `protobuf:"bytes,4,rep,name=available_cards,json=availableCards" json:"available_cards,omitempty"`
}

// Default values for CMsgGameModeState_Dungeon fields.
const (
	Default_CMsgGameModeState_Dungeon_DungeonPhase    = EDACDungeonPhase_k_EDACDungeonPhase_None
	Default_CMsgGameModeState_Dungeon_CurrentRoomType = EDACDungeonRoomType_k_EDACDungeonRoomType_None
)

func (x *CMsgGameModeState_Dungeon) Reset() {
	*x = CMsgGameModeState_Dungeon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameModeState_Dungeon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameModeState_Dungeon) ProtoMessage() {}

func (x *CMsgGameModeState_Dungeon) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameModeState_Dungeon.ProtoReflect.Descriptor instead.
func (*CMsgGameModeState_Dungeon) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgGameModeState_Dungeon) GetDungeonPhase() EDACDungeonPhase {
	if x != nil && x.DungeonPhase != nil {
		return *x.DungeonPhase
	}
	return Default_CMsgGameModeState_Dungeon_DungeonPhase
}

func (x *CMsgGameModeState_Dungeon) GetCurrentRoomType() EDACDungeonRoomType {
	if x != nil && x.CurrentRoomType != nil {
		return *x.CurrentRoomType
	}
	return Default_CMsgGameModeState_Dungeon_CurrentRoomType
}

func (x *CMsgGameModeState_Dungeon) GetNextRoomTypes() []EDACDungeonRoomType {
	if x != nil {
		return x.NextRoomTypes
	}
	return nil
}

func (x *CMsgGameModeState_Dungeon) GetAvailableCards() []*DungeonActionCard {
	if x != nil {
		return x.AvailableCards
	}
	return nil
}

type CMsgGameModeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Details:
	//	*CMsgGameModeState_DetailsNormal
	//	*CMsgGameModeState_DetailsTurbo
	//	*CMsgGameModeState_DetailsDuos
	//	*CMsgGameModeState_DetailsTechPrototypeA
	//	*CMsgGameModeState_DetailsSandbox
	//	*CMsgGameModeState_DetailsPuzzle
	//	*CMsgGameModeState_DetailsTutorial
	//	*CMsgGameModeState_DetailsStreetfight
	//	*CMsgGameModeState_DetailsDungeon
	Details isCMsgGameModeState_Details `protobuf_oneof:"details"`
}

func (x *CMsgGameModeState) Reset() {
	*x = CMsgGameModeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameModeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameModeState) ProtoMessage() {}

func (x *CMsgGameModeState) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameModeState.ProtoReflect.Descriptor instead.
func (*CMsgGameModeState) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{41}
}

func (m *CMsgGameModeState) GetDetails() isCMsgGameModeState_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *CMsgGameModeState) GetDetailsNormal() *CMsgGameModeState_Normal {
	if x, ok := x.GetDetails().(*CMsgGameModeState_DetailsNormal); ok {
		return x.DetailsNormal
	}
	return nil
}

func (x *CMsgGameModeState) GetDetailsTurbo() *CMsgGameModeState_Turbo {
	if x, ok := x.GetDetails().(*CMsgGameModeState_DetailsTurbo); ok {
		return x.DetailsTurbo
	}
	return nil
}

func (x *CMsgGameModeState) GetDetailsDuos() *CMsgGameModeState_Duos {
	if x, ok := x.GetDetails().(*CMsgGameModeState_DetailsDuos); ok {
		return x.DetailsDuos
	}
	return nil
}

func (x *CMsgGameModeState) GetDetailsTechPrototypeA() *CMsgGameModeState_TechPrototypeA {
	if x, ok := x.GetDetails().(*CMsgGameModeState_DetailsTechPrototypeA); ok {
		return x.DetailsTechPrototypeA
	}
	return nil
}

func (x *CMsgGameModeState) GetDetailsSandbox() *CMsgGameModeState_Sandbox {
	if x, ok := x.GetDetails().(*CMsgGameModeState_DetailsSandbox); ok {
		return x.DetailsSandbox
	}
	return nil
}

func (x *CMsgGameModeState) GetDetailsPuzzle() *CMsgGameModeState_Puzzle {
	if x, ok := x.GetDetails().(*CMsgGameModeState_DetailsPuzzle); ok {
		return x.DetailsPuzzle
	}
	return nil
}

func (x *CMsgGameModeState) GetDetailsTutorial() *CMsgGameModeState_Tutorial {
	if x, ok := x.GetDetails().(*CMsgGameModeState_DetailsTutorial); ok {
		return x.DetailsTutorial
	}
	return nil
}

func (x *CMsgGameModeState) GetDetailsStreetfight() *CMsgGameModeState_Streetfight {
	if x, ok := x.GetDetails().(*CMsgGameModeState_DetailsStreetfight); ok {
		return x.DetailsStreetfight
	}
	return nil
}

func (x *CMsgGameModeState) GetDetailsDungeon() *CMsgGameModeState_Dungeon {
	if x, ok := x.GetDetails().(*CMsgGameModeState_DetailsDungeon); ok {
		return x.DetailsDungeon
	}
	return nil
}

type isCMsgGameModeState_Details interface {
	isCMsgGameModeState_Details()
}

type CMsgGameModeState_DetailsNormal struct {
	DetailsNormal *CMsgGameModeState_Normal `protobuf:"bytes,1,opt,name=details_normal,json=detailsNormal,oneof"`
}

type CMsgGameModeState_DetailsTurbo struct {
	DetailsTurbo *CMsgGameModeState_Turbo `protobuf:"bytes,2,opt,name=details_turbo,json=detailsTurbo,oneof"`
}

type CMsgGameModeState_DetailsDuos struct {
	DetailsDuos *CMsgGameModeState_Duos `protobuf:"bytes,3,opt,name=details_duos,json=detailsDuos,oneof"`
}

type CMsgGameModeState_DetailsTechPrototypeA struct {
	DetailsTechPrototypeA *CMsgGameModeState_TechPrototypeA `protobuf:"bytes,4,opt,name=details_tech_prototype_a,json=detailsTechPrototypeA,oneof"`
}

type CMsgGameModeState_DetailsSandbox struct {
	DetailsSandbox *CMsgGameModeState_Sandbox `protobuf:"bytes,5,opt,name=details_sandbox,json=detailsSandbox,oneof"`
}

type CMsgGameModeState_DetailsPuzzle struct {
	DetailsPuzzle *CMsgGameModeState_Puzzle `protobuf:"bytes,6,opt,name=details_puzzle,json=detailsPuzzle,oneof"`
}

type CMsgGameModeState_DetailsTutorial struct {
	DetailsTutorial *CMsgGameModeState_Tutorial `protobuf:"bytes,7,opt,name=details_tutorial,json=detailsTutorial,oneof"`
}

type CMsgGameModeState_DetailsStreetfight struct {
	DetailsStreetfight *CMsgGameModeState_Streetfight `protobuf:"bytes,8,opt,name=details_streetfight,json=detailsStreetfight,oneof"`
}

type CMsgGameModeState_DetailsDungeon struct {
	DetailsDungeon *CMsgGameModeState_Dungeon `protobuf:"bytes,9,opt,name=details_dungeon,json=detailsDungeon,oneof"`
}

func (*CMsgGameModeState_DetailsNormal) isCMsgGameModeState_Details() {}

func (*CMsgGameModeState_DetailsTurbo) isCMsgGameModeState_Details() {}

func (*CMsgGameModeState_DetailsDuos) isCMsgGameModeState_Details() {}

func (*CMsgGameModeState_DetailsTechPrototypeA) isCMsgGameModeState_Details() {}

func (*CMsgGameModeState_DetailsSandbox) isCMsgGameModeState_Details() {}

func (*CMsgGameModeState_DetailsPuzzle) isCMsgGameModeState_Details() {}

func (*CMsgGameModeState_DetailsTutorial) isCMsgGameModeState_Details() {}

func (*CMsgGameModeState_DetailsStreetfight) isCMsgGameModeState_Details() {}

func (*CMsgGameModeState_DetailsDungeon) isCMsgGameModeState_Details() {}

type CMsgUnitPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
	Z *float32 `protobuf:"fixed32,3,req,name=z" json:"z,omitempty"`
}

func (x *CMsgUnitPosition) Reset() {
	*x = CMsgUnitPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUnitPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUnitPosition) ProtoMessage() {}

func (x *CMsgUnitPosition) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUnitPosition.ProtoReflect.Descriptor instead.
func (*CMsgUnitPosition) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgUnitPosition) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgUnitPosition) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgUnitPosition) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type CMsgUnitPositionAndFacing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X   *float32 `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	Y   *float32 `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
	Z   *float32 `protobuf:"fixed32,3,req,name=z" json:"z,omitempty"`
	Yaw *float32 `protobuf:"fixed32,4,req,name=yaw" json:"yaw,omitempty"`
}

func (x *CMsgUnitPositionAndFacing) Reset() {
	*x = CMsgUnitPositionAndFacing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUnitPositionAndFacing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUnitPositionAndFacing) ProtoMessage() {}

func (x *CMsgUnitPositionAndFacing) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUnitPositionAndFacing.ProtoReflect.Descriptor instead.
func (*CMsgUnitPositionAndFacing) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgUnitPositionAndFacing) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *CMsgUnitPositionAndFacing) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *CMsgUnitPositionAndFacing) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

func (x *CMsgUnitPositionAndFacing) GetYaw() float32 {
	if x != nil && x.Yaw != nil {
		return *x.Yaw
	}
	return 0
}

type CMsgUnitAbilityCooldown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityId     *uint32  `protobuf:"varint,1,req,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	CooldownRatio *float32 `protobuf:"fixed32,2,req,name=cooldown_ratio,json=cooldownRatio" json:"cooldown_ratio,omitempty"`
}

func (x *CMsgUnitAbilityCooldown) Reset() {
	*x = CMsgUnitAbilityCooldown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUnitAbilityCooldown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUnitAbilityCooldown) ProtoMessage() {}

func (x *CMsgUnitAbilityCooldown) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUnitAbilityCooldown.ProtoReflect.Descriptor instead.
func (*CMsgUnitAbilityCooldown) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgUnitAbilityCooldown) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

func (x *CMsgUnitAbilityCooldown) GetCooldownRatio() float32 {
	if x != nil && x.CooldownRatio != nil {
		return *x.CooldownRatio
	}
	return 0
}

type CMsgUnitSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entindex                  *int32                     `protobuf:"varint,1,opt,name=entindex" json:"entindex,omitempty"`
	UnitId                    *int32                     `protobuf:"varint,2,opt,name=unit_id,json=unitId" json:"unit_id,omitempty"`
	TeamNumber                *int32                     `protobuf:"varint,3,opt,name=team_number,json=teamNumber" json:"team_number,omitempty"`
	Position                  *CMsgUnitPositionAndFacing `protobuf:"bytes,4,opt,name=position" json:"position,omitempty"`
	Health                    *int32                     `protobuf:"varint,5,opt,name=health" json:"health,omitempty"`
	Mana                      *int32                     `protobuf:"varint,6,opt,name=mana" json:"mana,omitempty"`
	ParticleAttachmentNames   []string                   `protobuf:"bytes,7,rep,name=particle_attachment_names,json=particleAttachmentNames" json:"particle_attachment_names,omitempty"`
	Rank                      *int32                     `protobuf:"varint,8,opt,name=rank" json:"rank,omitempty"`
	AiState                   *EUnitAIState              `protobuf:"varint,9,opt,name=ai_state,json=aiState,enum=underlords.EUnitAIState,def=0" json:"ai_state,omitempty"`
	CooldownRatio             *float32                   `protobuf:"fixed32,10,opt,name=cooldown_ratio,json=cooldownRatio" json:"cooldown_ratio,omitempty"`
	KillCount                 *uint32                    `protobuf:"varint,12,opt,name=kill_count,json=killCount" json:"kill_count,omitempty"`
	KillStreak                *uint32                    `protobuf:"varint,13,opt,name=kill_streak,json=killStreak" json:"kill_streak,omitempty"`
	MaxHealth                 *int32                     `protobuf:"varint,14,opt,name=max_health,json=maxHealth" json:"max_health,omitempty"`
	Keywords                  []EUnitKeyword             `protobuf:"varint,15,rep,name=keywords,enum=underlords.EUnitKeyword" json:"keywords,omitempty"`
	StartingPosition          *CMsgUnitPositionAndFacing `protobuf:"bytes,16,opt,name=starting_position,json=startingPosition" json:"starting_position,omitempty"`
	IsSummoned                *bool                      `protobuf:"varint,17,opt,name=is_summoned,json=isSummoned" json:"is_summoned,omitempty"`
	SummonOwnerEntindex       *int32                     `protobuf:"varint,18,opt,name=summon_owner_entindex,json=summonOwnerEntindex" json:"summon_owner_entindex,omitempty"`
	DuelBonusDamage           *uint32                    `protobuf:"varint,19,opt,name=duel_bonus_damage,json=duelBonusDamage" json:"duel_bonus_damage,omitempty"`
	Armor                     *int32                     `protobuf:"varint,20,opt,name=armor" json:"armor,omitempty"`
	UnderlordPower            *uint32                    `protobuf:"varint,21,opt,name=underlord_power,json=underlordPower" json:"underlord_power,omitempty"`
	StatusLabel               *uint32                    `protobuf:"varint,22,opt,name=status_label,json=statusLabel" json:"status_label,omitempty"`
	StatusEffectIndex         *uint32                    `protobuf:"varint,23,opt,name=status_effect_index,json=statusEffectIndex" json:"status_effect_index,omitempty"`
	AttacksPerSecond          *float32                   `protobuf:"fixed32,24,opt,name=attacks_per_second,json=attacksPerSecond" json:"attacks_per_second,omitempty"`
	DamageMin                 *int32                     `protobuf:"varint,25,opt,name=damage_min,json=damageMin" json:"damage_min,omitempty"`
	DamageMax                 *int32                     `protobuf:"varint,26,opt,name=damage_max,json=damageMax" json:"damage_max,omitempty"`
	DamageBonus               *int32                     `protobuf:"varint,27,opt,name=damage_bonus,json=damageBonus" json:"damage_bonus,omitempty"`
	FullUpdate                *bool                      `protobuf:"varint,28,opt,name=full_update,json=fullUpdate" json:"full_update,omitempty"`
	AbilityCooldowns          []*CMsgUnitAbilityCooldown `protobuf:"bytes,29,rep,name=ability_cooldowns,json=abilityCooldowns" json:"ability_cooldowns,omitempty"`
	AbilitiesEnabled          []uint32                   `protobuf:"varint,30,rep,name=abilities_enabled,json=abilitiesEnabled" json:"abilities_enabled,omitempty"`
	BuffStatus                []uint32                   `protobuf:"varint,31,rep,name=buff_status,json=buffStatus" json:"buff_status,omitempty"`
	ForceBigHealthbar         *bool                      `protobuf:"varint,32,opt,name=force_big_healthbar,json=forceBigHealthbar" json:"force_big_healthbar,omitempty"`
	OverrideItemSlot          *uint32                    `protobuf:"varint,33,opt,name=override_item_slot,json=overrideItemSlot" json:"override_item_slot,omitempty"`
	RangeBonus                *int32                     `protobuf:"varint,34,opt,name=range_bonus,json=rangeBonus" json:"range_bonus,omitempty"`
	CanMoveToBench            *bool                      `protobuf:"varint,35,opt,name=can_move_to_bench,json=canMoveToBench" json:"can_move_to_bench,omitempty"`
	CanBeSold                 *bool                      `protobuf:"varint,36,opt,name=can_be_sold,json=canBeSold" json:"can_be_sold,omitempty"`
	RecommendedForPlacement   *bool                      `protobuf:"varint,37,opt,name=recommended_for_placement,json=recommendedForPlacement" json:"recommended_for_placement,omitempty"`
	FloatKillCount            *float32                   `protobuf:"fixed32,38,opt,name=float_kill_count,json=floatKillCount" json:"float_kill_count,omitempty"`
	ClientSynthesizedForSetup *bool                      `protobuf:"varint,1001,opt,name=client_synthesized_for_setup,json=clientSynthesizedForSetup" json:"client_synthesized_for_setup,omitempty"`
	ClientIsOnBench           *bool                      `protobuf:"varint,1002,opt,name=client_is_on_bench,json=clientIsOnBench" json:"client_is_on_bench,omitempty"`
}

// Default values for CMsgUnitSnapshot fields.
const (
	Default_CMsgUnitSnapshot_AiState = EUnitAIState_EUnitAIState_Idle
)

func (x *CMsgUnitSnapshot) Reset() {
	*x = CMsgUnitSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUnitSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUnitSnapshot) ProtoMessage() {}

func (x *CMsgUnitSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUnitSnapshot.ProtoReflect.Descriptor instead.
func (*CMsgUnitSnapshot) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgUnitSnapshot) GetEntindex() int32 {
	if x != nil && x.Entindex != nil {
		return *x.Entindex
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetTeamNumber() int32 {
	if x != nil && x.TeamNumber != nil {
		return *x.TeamNumber
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetPosition() *CMsgUnitPositionAndFacing {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CMsgUnitSnapshot) GetHealth() int32 {
	if x != nil && x.Health != nil {
		return *x.Health
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetMana() int32 {
	if x != nil && x.Mana != nil {
		return *x.Mana
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetParticleAttachmentNames() []string {
	if x != nil {
		return x.ParticleAttachmentNames
	}
	return nil
}

func (x *CMsgUnitSnapshot) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetAiState() EUnitAIState {
	if x != nil && x.AiState != nil {
		return *x.AiState
	}
	return Default_CMsgUnitSnapshot_AiState
}

func (x *CMsgUnitSnapshot) GetCooldownRatio() float32 {
	if x != nil && x.CooldownRatio != nil {
		return *x.CooldownRatio
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetKillCount() uint32 {
	if x != nil && x.KillCount != nil {
		return *x.KillCount
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetKillStreak() uint32 {
	if x != nil && x.KillStreak != nil {
		return *x.KillStreak
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetMaxHealth() int32 {
	if x != nil && x.MaxHealth != nil {
		return *x.MaxHealth
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetKeywords() []EUnitKeyword {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *CMsgUnitSnapshot) GetStartingPosition() *CMsgUnitPositionAndFacing {
	if x != nil {
		return x.StartingPosition
	}
	return nil
}

func (x *CMsgUnitSnapshot) GetIsSummoned() bool {
	if x != nil && x.IsSummoned != nil {
		return *x.IsSummoned
	}
	return false
}

func (x *CMsgUnitSnapshot) GetSummonOwnerEntindex() int32 {
	if x != nil && x.SummonOwnerEntindex != nil {
		return *x.SummonOwnerEntindex
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetDuelBonusDamage() uint32 {
	if x != nil && x.DuelBonusDamage != nil {
		return *x.DuelBonusDamage
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetArmor() int32 {
	if x != nil && x.Armor != nil {
		return *x.Armor
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetUnderlordPower() uint32 {
	if x != nil && x.UnderlordPower != nil {
		return *x.UnderlordPower
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetStatusLabel() uint32 {
	if x != nil && x.StatusLabel != nil {
		return *x.StatusLabel
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetStatusEffectIndex() uint32 {
	if x != nil && x.StatusEffectIndex != nil {
		return *x.StatusEffectIndex
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetAttacksPerSecond() float32 {
	if x != nil && x.AttacksPerSecond != nil {
		return *x.AttacksPerSecond
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetDamageMin() int32 {
	if x != nil && x.DamageMin != nil {
		return *x.DamageMin
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetDamageMax() int32 {
	if x != nil && x.DamageMax != nil {
		return *x.DamageMax
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetDamageBonus() int32 {
	if x != nil && x.DamageBonus != nil {
		return *x.DamageBonus
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetFullUpdate() bool {
	if x != nil && x.FullUpdate != nil {
		return *x.FullUpdate
	}
	return false
}

func (x *CMsgUnitSnapshot) GetAbilityCooldowns() []*CMsgUnitAbilityCooldown {
	if x != nil {
		return x.AbilityCooldowns
	}
	return nil
}

func (x *CMsgUnitSnapshot) GetAbilitiesEnabled() []uint32 {
	if x != nil {
		return x.AbilitiesEnabled
	}
	return nil
}

func (x *CMsgUnitSnapshot) GetBuffStatus() []uint32 {
	if x != nil {
		return x.BuffStatus
	}
	return nil
}

func (x *CMsgUnitSnapshot) GetForceBigHealthbar() bool {
	if x != nil && x.ForceBigHealthbar != nil {
		return *x.ForceBigHealthbar
	}
	return false
}

func (x *CMsgUnitSnapshot) GetOverrideItemSlot() uint32 {
	if x != nil && x.OverrideItemSlot != nil {
		return *x.OverrideItemSlot
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetRangeBonus() int32 {
	if x != nil && x.RangeBonus != nil {
		return *x.RangeBonus
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetCanMoveToBench() bool {
	if x != nil && x.CanMoveToBench != nil {
		return *x.CanMoveToBench
	}
	return false
}

func (x *CMsgUnitSnapshot) GetCanBeSold() bool {
	if x != nil && x.CanBeSold != nil {
		return *x.CanBeSold
	}
	return false
}

func (x *CMsgUnitSnapshot) GetRecommendedForPlacement() bool {
	if x != nil && x.RecommendedForPlacement != nil {
		return *x.RecommendedForPlacement
	}
	return false
}

func (x *CMsgUnitSnapshot) GetFloatKillCount() float32 {
	if x != nil && x.FloatKillCount != nil {
		return *x.FloatKillCount
	}
	return 0
}

func (x *CMsgUnitSnapshot) GetClientSynthesizedForSetup() bool {
	if x != nil && x.ClientSynthesizedForSetup != nil {
		return *x.ClientSynthesizedForSetup
	}
	return false
}

func (x *CMsgUnitSnapshot) GetClientIsOnBench() bool {
	if x != nil && x.ClientIsOnBench != nil {
		return *x.ClientIsOnBench
	}
	return false
}

type CMsgUnitMeterDamageDealt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalDamageDealt  *int32 `protobuf:"varint,1,opt,name=total_damage_dealt,json=totalDamageDealt" json:"total_damage_dealt,omitempty"`
	SpellDamageDealt  *int32 `protobuf:"varint,2,opt,name=spell_damage_dealt,json=spellDamageDealt" json:"spell_damage_dealt,omitempty"`
	AttackDamageDealt *int32 `protobuf:"varint,3,opt,name=attack_damage_dealt,json=attackDamageDealt" json:"attack_damage_dealt,omitempty"`
	ItemDamageDealt   *int32 `protobuf:"varint,4,opt,name=item_damage_dealt,json=itemDamageDealt" json:"item_damage_dealt,omitempty"`
}

func (x *CMsgUnitMeterDamageDealt) Reset() {
	*x = CMsgUnitMeterDamageDealt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUnitMeterDamageDealt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUnitMeterDamageDealt) ProtoMessage() {}

func (x *CMsgUnitMeterDamageDealt) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUnitMeterDamageDealt.ProtoReflect.Descriptor instead.
func (*CMsgUnitMeterDamageDealt) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgUnitMeterDamageDealt) GetTotalDamageDealt() int32 {
	if x != nil && x.TotalDamageDealt != nil {
		return *x.TotalDamageDealt
	}
	return 0
}

func (x *CMsgUnitMeterDamageDealt) GetSpellDamageDealt() int32 {
	if x != nil && x.SpellDamageDealt != nil {
		return *x.SpellDamageDealt
	}
	return 0
}

func (x *CMsgUnitMeterDamageDealt) GetAttackDamageDealt() int32 {
	if x != nil && x.AttackDamageDealt != nil {
		return *x.AttackDamageDealt
	}
	return 0
}

func (x *CMsgUnitMeterDamageDealt) GetItemDamageDealt() int32 {
	if x != nil && x.ItemDamageDealt != nil {
		return *x.ItemDamageDealt
	}
	return 0
}

type CMsgUnitMeterDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *int32  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Id    *uint32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (x *CMsgUnitMeterDetail) Reset() {
	*x = CMsgUnitMeterDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUnitMeterDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUnitMeterDetail) ProtoMessage() {}

func (x *CMsgUnitMeterDetail) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUnitMeterDetail.ProtoReflect.Descriptor instead.
func (*CMsgUnitMeterDetail) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgUnitMeterDetail) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CMsgUnitMeterDetail) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type CMsgUnitMeterDamageTaken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalDamageTaken    *int32 `protobuf:"varint,1,opt,name=total_damage_taken,json=totalDamageTaken" json:"total_damage_taken,omitempty"`
	PhysicalDamageTaken *int32 `protobuf:"varint,2,opt,name=physical_damage_taken,json=physicalDamageTaken" json:"physical_damage_taken,omitempty"`
	MagicalDamageTaken  *int32 `protobuf:"varint,3,opt,name=magical_damage_taken,json=magicalDamageTaken" json:"magical_damage_taken,omitempty"`
	PureDamageTaken     *int32 `protobuf:"varint,4,opt,name=pure_damage_taken,json=pureDamageTaken" json:"pure_damage_taken,omitempty"`
}

func (x *CMsgUnitMeterDamageTaken) Reset() {
	*x = CMsgUnitMeterDamageTaken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUnitMeterDamageTaken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUnitMeterDamageTaken) ProtoMessage() {}

func (x *CMsgUnitMeterDamageTaken) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUnitMeterDamageTaken.ProtoReflect.Descriptor instead.
func (*CMsgUnitMeterDamageTaken) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{48}
}

func (x *CMsgUnitMeterDamageTaken) GetTotalDamageTaken() int32 {
	if x != nil && x.TotalDamageTaken != nil {
		return *x.TotalDamageTaken
	}
	return 0
}

func (x *CMsgUnitMeterDamageTaken) GetPhysicalDamageTaken() int32 {
	if x != nil && x.PhysicalDamageTaken != nil {
		return *x.PhysicalDamageTaken
	}
	return 0
}

func (x *CMsgUnitMeterDamageTaken) GetMagicalDamageTaken() int32 {
	if x != nil && x.MagicalDamageTaken != nil {
		return *x.MagicalDamageTaken
	}
	return 0
}

func (x *CMsgUnitMeterDamageTaken) GetPureDamageTaken() int32 {
	if x != nil && x.PureDamageTaken != nil {
		return *x.PureDamageTaken
	}
	return 0
}

type CMsgUnitMeterSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entindex           *int32                    `protobuf:"varint,1,opt,name=entindex" json:"entindex,omitempty"`
	UnitId             *int32                    `protobuf:"varint,2,opt,name=unit_id,json=unitId" json:"unit_id,omitempty"`
	TeamNumber         *int32                    `protobuf:"varint,3,opt,name=team_number,json=teamNumber" json:"team_number,omitempty"`
	DamageDealt        *CMsgUnitMeterDamageDealt `protobuf:"bytes,4,opt,name=damage_dealt,json=damageDealt" json:"damage_dealt,omitempty"`
	DamageTaken        *CMsgUnitMeterDamageTaken `protobuf:"bytes,5,opt,name=damage_taken,json=damageTaken" json:"damage_taken,omitempty"`
	HealingDone        *uint32                   `protobuf:"varint,6,opt,name=healing_done,json=healingDone" json:"healing_done,omitempty"`
	Kills              *uint32                   `protobuf:"varint,7,opt,name=kills" json:"kills,omitempty"`
	TimeOfDeath        *float32                  `protobuf:"fixed32,8,opt,name=time_of_death,json=timeOfDeath" json:"time_of_death,omitempty"`
	Rank               *uint32                   `protobuf:"varint,9,opt,name=rank" json:"rank,omitempty"`
	Globalindex        *int32                    `protobuf:"varint,10,opt,name=globalindex" json:"globalindex,omitempty"`
	DamageDealtDetails []*CMsgUnitMeterDetail    `protobuf:"bytes,11,rep,name=damage_dealt_details,json=damageDealtDetails" json:"damage_dealt_details,omitempty"`
	HealingDoneDetails []*CMsgUnitMeterDetail    `protobuf:"bytes,12,rep,name=healing_done_details,json=healingDoneDetails" json:"healing_done_details,omitempty"`
	DisableDone        *float32                  `protobuf:"fixed32,13,opt,name=disable_done,json=disableDone" json:"disable_done,omitempty"`
	DamageTakenDetails []*CMsgUnitMeterDetail    `protobuf:"bytes,14,rep,name=damage_taken_details,json=damageTakenDetails" json:"damage_taken_details,omitempty"`
	KillsDetails       []*CMsgUnitMeterDetail    `protobuf:"bytes,15,rep,name=kills_details,json=killsDetails" json:"kills_details,omitempty"`
	DisableDoneDetails []*CMsgUnitMeterDetail    `protobuf:"bytes,16,rep,name=disable_done_details,json=disableDoneDetails" json:"disable_done_details,omitempty"`
}

func (x *CMsgUnitMeterSnapshot) Reset() {
	*x = CMsgUnitMeterSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgUnitMeterSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUnitMeterSnapshot) ProtoMessage() {}

func (x *CMsgUnitMeterSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUnitMeterSnapshot.ProtoReflect.Descriptor instead.
func (*CMsgUnitMeterSnapshot) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgUnitMeterSnapshot) GetEntindex() int32 {
	if x != nil && x.Entindex != nil {
		return *x.Entindex
	}
	return 0
}

func (x *CMsgUnitMeterSnapshot) GetUnitId() int32 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

func (x *CMsgUnitMeterSnapshot) GetTeamNumber() int32 {
	if x != nil && x.TeamNumber != nil {
		return *x.TeamNumber
	}
	return 0
}

func (x *CMsgUnitMeterSnapshot) GetDamageDealt() *CMsgUnitMeterDamageDealt {
	if x != nil {
		return x.DamageDealt
	}
	return nil
}

func (x *CMsgUnitMeterSnapshot) GetDamageTaken() *CMsgUnitMeterDamageTaken {
	if x != nil {
		return x.DamageTaken
	}
	return nil
}

func (x *CMsgUnitMeterSnapshot) GetHealingDone() uint32 {
	if x != nil && x.HealingDone != nil {
		return *x.HealingDone
	}
	return 0
}

func (x *CMsgUnitMeterSnapshot) GetKills() uint32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMsgUnitMeterSnapshot) GetTimeOfDeath() float32 {
	if x != nil && x.TimeOfDeath != nil {
		return *x.TimeOfDeath
	}
	return 0
}

func (x *CMsgUnitMeterSnapshot) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CMsgUnitMeterSnapshot) GetGlobalindex() int32 {
	if x != nil && x.Globalindex != nil {
		return *x.Globalindex
	}
	return 0
}

func (x *CMsgUnitMeterSnapshot) GetDamageDealtDetails() []*CMsgUnitMeterDetail {
	if x != nil {
		return x.DamageDealtDetails
	}
	return nil
}

func (x *CMsgUnitMeterSnapshot) GetHealingDoneDetails() []*CMsgUnitMeterDetail {
	if x != nil {
		return x.HealingDoneDetails
	}
	return nil
}

func (x *CMsgUnitMeterSnapshot) GetDisableDone() float32 {
	if x != nil && x.DisableDone != nil {
		return *x.DisableDone
	}
	return 0
}

func (x *CMsgUnitMeterSnapshot) GetDamageTakenDetails() []*CMsgUnitMeterDetail {
	if x != nil {
		return x.DamageTakenDetails
	}
	return nil
}

func (x *CMsgUnitMeterSnapshot) GetKillsDetails() []*CMsgUnitMeterDetail {
	if x != nil {
		return x.KillsDetails
	}
	return nil
}

func (x *CMsgUnitMeterSnapshot) GetDisableDoneDetails() []*CMsgUnitMeterDetail {
	if x != nil {
		return x.DisableDoneDetails
	}
	return nil
}

type CMsgCombatMetersSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotTime *float32                 `protobuf:"fixed32,1,req,name=snapshot_time,json=snapshotTime" json:"snapshot_time,omitempty"`
	Units        []*CMsgUnitMeterSnapshot `protobuf:"bytes,2,rep,name=units" json:"units,omitempty"`
}

func (x *CMsgCombatMetersSnapshot) Reset() {
	*x = CMsgCombatMetersSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatMetersSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatMetersSnapshot) ProtoMessage() {}

func (x *CMsgCombatMetersSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatMetersSnapshot.ProtoReflect.Descriptor instead.
func (*CMsgCombatMetersSnapshot) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgCombatMetersSnapshot) GetSnapshotTime() float32 {
	if x != nil && x.SnapshotTime != nil {
		return *x.SnapshotTime
	}
	return 0
}

func (x *CMsgCombatMetersSnapshot) GetUnits() []*CMsgUnitMeterSnapshot {
	if x != nil {
		return x.Units
	}
	return nil
}

type CMsgCombatDebugSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathfindingCells []*CMsgCombatDebugSnapshot_PathfindingCell `protobuf:"bytes,1,rep,name=pathfinding_cells,json=pathfindingCells" json:"pathfinding_cells,omitempty"`
	ActivePaths      []*CMsgCombatDebugSnapshot_ActivePath      `protobuf:"bytes,2,rep,name=active_paths,json=activePaths" json:"active_paths,omitempty"`
}

func (x *CMsgCombatDebugSnapshot) Reset() {
	*x = CMsgCombatDebugSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatDebugSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatDebugSnapshot) ProtoMessage() {}

func (x *CMsgCombatDebugSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatDebugSnapshot.ProtoReflect.Descriptor instead.
func (*CMsgCombatDebugSnapshot) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{51}
}

func (x *CMsgCombatDebugSnapshot) GetPathfindingCells() []*CMsgCombatDebugSnapshot_PathfindingCell {
	if x != nil {
		return x.PathfindingCells
	}
	return nil
}

func (x *CMsgCombatDebugSnapshot) GetActivePaths() []*CMsgCombatDebugSnapshot_ActivePath {
	if x != nil {
		return x.ActivePaths
	}
	return nil
}

type CMsgCombatSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotTime  *float32                 `protobuf:"fixed32,1,req,name=snapshot_time,json=snapshotTime" json:"snapshot_time,omitempty"`
	Units         []*CMsgUnitSnapshot      `protobuf:"bytes,2,rep,name=units" json:"units,omitempty"`
	DebugSnapshot *CMsgCombatDebugSnapshot `protobuf:"bytes,3,opt,name=debug_snapshot,json=debugSnapshot" json:"debug_snapshot,omitempty"`
}

func (x *CMsgCombatSnapshot) Reset() {
	*x = CMsgCombatSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatSnapshot) ProtoMessage() {}

func (x *CMsgCombatSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatSnapshot.ProtoReflect.Descriptor instead.
func (*CMsgCombatSnapshot) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{52}
}

func (x *CMsgCombatSnapshot) GetSnapshotTime() float32 {
	if x != nil && x.SnapshotTime != nil {
		return *x.SnapshotTime
	}
	return 0
}

func (x *CMsgCombatSnapshot) GetUnits() []*CMsgUnitSnapshot {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgCombatSnapshot) GetDebugSnapshot() *CMsgCombatDebugSnapshot {
	if x != nil {
		return x.DebugSnapshot
	}
	return nil
}

type CMsgCombatEvent_Attack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackProjectileSpeed *int32 `protobuf:"varint,1,opt,name=attack_projectile_speed,json=attackProjectileSpeed" json:"attack_projectile_speed,omitempty"`
}

func (x *CMsgCombatEvent_Attack) Reset() {
	*x = CMsgCombatEvent_Attack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_Attack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_Attack) ProtoMessage() {}

func (x *CMsgCombatEvent_Attack) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_Attack.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_Attack) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{53}
}

func (x *CMsgCombatEvent_Attack) GetAttackProjectileSpeed() int32 {
	if x != nil && x.AttackProjectileSpeed != nil {
		return *x.AttackProjectileSpeed
	}
	return 0
}

type CMsgCombatEvent_Damage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DamageAmount *uint32 `protobuf:"varint,1,opt,name=damage_amount,json=damageAmount" json:"damage_amount,omitempty"`
	IsCritical   *bool   `protobuf:"varint,2,opt,name=is_critical,json=isCritical" json:"is_critical,omitempty"`
}

func (x *CMsgCombatEvent_Damage) Reset() {
	*x = CMsgCombatEvent_Damage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_Damage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_Damage) ProtoMessage() {}

func (x *CMsgCombatEvent_Damage) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_Damage.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_Damage) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{54}
}

func (x *CMsgCombatEvent_Damage) GetDamageAmount() uint32 {
	if x != nil && x.DamageAmount != nil {
		return *x.DamageAmount
	}
	return 0
}

func (x *CMsgCombatEvent_Damage) GetIsCritical() bool {
	if x != nil && x.IsCritical != nil {
		return *x.IsCritical
	}
	return false
}

type CMsgCombatEvent_AttackMissed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgCombatEvent_AttackMissed) Reset() {
	*x = CMsgCombatEvent_AttackMissed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_AttackMissed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_AttackMissed) ProtoMessage() {}

func (x *CMsgCombatEvent_AttackMissed) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_AttackMissed.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_AttackMissed) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{55}
}

type CMsgCombatEvent_AttackEvaded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgCombatEvent_AttackEvaded) Reset() {
	*x = CMsgCombatEvent_AttackEvaded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_AttackEvaded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_AttackEvaded) ProtoMessage() {}

func (x *CMsgCombatEvent_AttackEvaded) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_AttackEvaded.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_AttackEvaded) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{56}
}

type CMsgCombatEvent_AttackBlocked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockAmount *uint32 `protobuf:"varint,1,opt,name=block_amount,json=blockAmount" json:"block_amount,omitempty"`
}

func (x *CMsgCombatEvent_AttackBlocked) Reset() {
	*x = CMsgCombatEvent_AttackBlocked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_AttackBlocked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_AttackBlocked) ProtoMessage() {}

func (x *CMsgCombatEvent_AttackBlocked) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_AttackBlocked.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_AttackBlocked) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{57}
}

func (x *CMsgCombatEvent_AttackBlocked) GetBlockAmount() uint32 {
	if x != nil && x.BlockAmount != nil {
		return *x.BlockAmount
	}
	return 0
}

type CMsgCombatEvent_Death struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgCombatEvent_Death) Reset() {
	*x = CMsgCombatEvent_Death{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_Death) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_Death) ProtoMessage() {}

func (x *CMsgCombatEvent_Death) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_Death.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_Death) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{58}
}

type CMsgCombatEvent_StartAttack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttackSpeed *float32 `protobuf:"fixed32,1,opt,name=attack_speed,json=attackSpeed" json:"attack_speed,omitempty"`
}

func (x *CMsgCombatEvent_StartAttack) Reset() {
	*x = CMsgCombatEvent_StartAttack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_StartAttack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_StartAttack) ProtoMessage() {}

func (x *CMsgCombatEvent_StartAttack) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_StartAttack.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_StartAttack) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{59}
}

func (x *CMsgCombatEvent_StartAttack) GetAttackSpeed() float32 {
	if x != nil && x.AttackSpeed != nil {
		return *x.AttackSpeed
	}
	return 0
}

type CMsgCombatEvent_SoundEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoundeventHash     *uint32           `protobuf:"varint,1,opt,name=soundevent_hash,json=soundeventHash" json:"soundevent_hash,omitempty"`
	Position           *CMsgUnitPosition `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
	RestrictToHomeTeam *bool             `protobuf:"varint,4,opt,name=restrict_to_home_team,json=restrictToHomeTeam" json:"restrict_to_home_team,omitempty"`
}

func (x *CMsgCombatEvent_SoundEvent) Reset() {
	*x = CMsgCombatEvent_SoundEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_SoundEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_SoundEvent) ProtoMessage() {}

func (x *CMsgCombatEvent_SoundEvent) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_SoundEvent.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_SoundEvent) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{60}
}

func (x *CMsgCombatEvent_SoundEvent) GetSoundeventHash() uint32 {
	if x != nil && x.SoundeventHash != nil {
		return *x.SoundeventHash
	}
	return 0
}

func (x *CMsgCombatEvent_SoundEvent) GetPosition() *CMsgUnitPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CMsgCombatEvent_SoundEvent) GetRestrictToHomeTeam() bool {
	if x != nil && x.RestrictToHomeTeam != nil {
		return *x.RestrictToHomeTeam
	}
	return false
}

type CMsgCombatEvent_SpeechEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VcdName            *string `protobuf:"bytes,1,opt,name=vcd_name,json=vcdName" json:"vcd_name,omitempty"`
	RestrictToHomeTeam *bool   `protobuf:"varint,2,opt,name=restrict_to_home_team,json=restrictToHomeTeam" json:"restrict_to_home_team,omitempty"`
	Priority           *int32  `protobuf:"varint,3,opt,name=priority" json:"priority,omitempty"`
}

func (x *CMsgCombatEvent_SpeechEvent) Reset() {
	*x = CMsgCombatEvent_SpeechEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_SpeechEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_SpeechEvent) ProtoMessage() {}

func (x *CMsgCombatEvent_SpeechEvent) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_SpeechEvent.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_SpeechEvent) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{61}
}

func (x *CMsgCombatEvent_SpeechEvent) GetVcdName() string {
	if x != nil && x.VcdName != nil {
		return *x.VcdName
	}
	return ""
}

func (x *CMsgCombatEvent_SpeechEvent) GetRestrictToHomeTeam() bool {
	if x != nil && x.RestrictToHomeTeam != nil {
		return *x.RestrictToHomeTeam
	}
	return false
}

func (x *CMsgCombatEvent_SpeechEvent) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

type CMsgCombatEvent_ModifierCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModifierEntindex *uint32  `protobuf:"varint,1,req,name=modifier_entindex,json=modifierEntindex" json:"modifier_entindex,omitempty"`
	ModifierId       *uint32  `protobuf:"varint,2,req,name=modifier_id,json=modifierId" json:"modifier_id,omitempty"`
	Duration         *float32 `protobuf:"fixed32,3,opt,name=duration" json:"duration,omitempty"`
	SynergyLevel     *int32   `protobuf:"varint,4,opt,name=synergy_level,json=synergyLevel" json:"synergy_level,omitempty"`
}

func (x *CMsgCombatEvent_ModifierCreate) Reset() {
	*x = CMsgCombatEvent_ModifierCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_ModifierCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_ModifierCreate) ProtoMessage() {}

func (x *CMsgCombatEvent_ModifierCreate) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_ModifierCreate.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_ModifierCreate) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{62}
}

func (x *CMsgCombatEvent_ModifierCreate) GetModifierEntindex() uint32 {
	if x != nil && x.ModifierEntindex != nil {
		return *x.ModifierEntindex
	}
	return 0
}

func (x *CMsgCombatEvent_ModifierCreate) GetModifierId() uint32 {
	if x != nil && x.ModifierId != nil {
		return *x.ModifierId
	}
	return 0
}

func (x *CMsgCombatEvent_ModifierCreate) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgCombatEvent_ModifierCreate) GetSynergyLevel() int32 {
	if x != nil && x.SynergyLevel != nil {
		return *x.SynergyLevel
	}
	return 0
}

type CMsgCombatEvent_ModifierDestroy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModifierEntindex *uint32 `protobuf:"varint,1,req,name=modifier_entindex,json=modifierEntindex" json:"modifier_entindex,omitempty"`
}

func (x *CMsgCombatEvent_ModifierDestroy) Reset() {
	*x = CMsgCombatEvent_ModifierDestroy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_ModifierDestroy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_ModifierDestroy) ProtoMessage() {}

func (x *CMsgCombatEvent_ModifierDestroy) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_ModifierDestroy.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_ModifierDestroy) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{63}
}

func (x *CMsgCombatEvent_ModifierDestroy) GetModifierEntindex() uint32 {
	if x != nil && x.ModifierEntindex != nil {
		return *x.ModifierEntindex
	}
	return 0
}

type CMsgCombatEvent_StartGesture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *uint32  `protobuf:"varint,1,req,name=activity" json:"activity,omitempty"`
	FadeIn   *float32 `protobuf:"fixed32,2,opt,name=fade_in,json=fadeIn" json:"fade_in,omitempty"`
	FadeOut  *float32 `protobuf:"fixed32,3,opt,name=fade_out,json=fadeOut" json:"fade_out,omitempty"`
	Slot     *int32   `protobuf:"varint,4,opt,name=slot" json:"slot,omitempty"`
	Duration *float32 `protobuf:"fixed32,5,opt,name=duration" json:"duration,omitempty"`
}

func (x *CMsgCombatEvent_StartGesture) Reset() {
	*x = CMsgCombatEvent_StartGesture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_StartGesture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_StartGesture) ProtoMessage() {}

func (x *CMsgCombatEvent_StartGesture) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_StartGesture.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_StartGesture) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{64}
}

func (x *CMsgCombatEvent_StartGesture) GetActivity() uint32 {
	if x != nil && x.Activity != nil {
		return *x.Activity
	}
	return 0
}

func (x *CMsgCombatEvent_StartGesture) GetFadeIn() float32 {
	if x != nil && x.FadeIn != nil {
		return *x.FadeIn
	}
	return 0
}

func (x *CMsgCombatEvent_StartGesture) GetFadeOut() float32 {
	if x != nil && x.FadeOut != nil {
		return *x.FadeOut
	}
	return 0
}

func (x *CMsgCombatEvent_StartGesture) GetSlot() int32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CMsgCombatEvent_StartGesture) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CMsgCombatEvent_StopGesture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *uint32 `protobuf:"varint,1,req,name=activity" json:"activity,omitempty"`
}

func (x *CMsgCombatEvent_StopGesture) Reset() {
	*x = CMsgCombatEvent_StopGesture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_StopGesture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_StopGesture) ProtoMessage() {}

func (x *CMsgCombatEvent_StopGesture) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_StopGesture.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_StopGesture) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{65}
}

func (x *CMsgCombatEvent_StopGesture) GetActivity() uint32 {
	if x != nil && x.Activity != nil {
		return *x.Activity
	}
	return 0
}

type CMsgCombatEvent_CancelAttack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgCombatEvent_CancelAttack) Reset() {
	*x = CMsgCombatEvent_CancelAttack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_CancelAttack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_CancelAttack) ProtoMessage() {}

func (x *CMsgCombatEvent_CancelAttack) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_CancelAttack.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_CancelAttack) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{66}
}

type CMsgCombatEvent_CombatEnded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RanOutOfTime *bool `protobuf:"varint,1,opt,name=ran_out_of_time,json=ranOutOfTime" json:"ran_out_of_time,omitempty"`
}

func (x *CMsgCombatEvent_CombatEnded) Reset() {
	*x = CMsgCombatEvent_CombatEnded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_CombatEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_CombatEnded) ProtoMessage() {}

func (x *CMsgCombatEvent_CombatEnded) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_CombatEnded.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_CombatEnded) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{67}
}

func (x *CMsgCombatEvent_CombatEnded) GetRanOutOfTime() bool {
	if x != nil && x.RanOutOfTime != nil {
		return *x.RanOutOfTime
	}
	return false
}

type CMsgCombatEvent_Resurrect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgCombatEvent_Resurrect) Reset() {
	*x = CMsgCombatEvent_Resurrect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_Resurrect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_Resurrect) ProtoMessage() {}

func (x *CMsgCombatEvent_Resurrect) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_Resurrect.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_Resurrect) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{68}
}

type CMsgCombatEvent_CastAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityId *uint32 `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
}

func (x *CMsgCombatEvent_CastAbility) Reset() {
	*x = CMsgCombatEvent_CastAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent_CastAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent_CastAbility) ProtoMessage() {}

func (x *CMsgCombatEvent_CastAbility) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent_CastAbility.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent_CastAbility) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{69}
}

func (x *CMsgCombatEvent_CastAbility) GetAbilityId() uint32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return 0
}

type CMsgCombatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTime      *float32 `protobuf:"fixed32,1,req,name=event_time,json=eventTime" json:"event_time,omitempty"`
	SourceEntindex *uint32  `protobuf:"varint,2,opt,name=source_entindex,json=sourceEntindex" json:"source_entindex,omitempty"`
	TargetEntindex *uint32  `protobuf:"varint,3,opt,name=target_entindex,json=targetEntindex" json:"target_entindex,omitempty"`
	// Types that are assignable to Details:
	//	*CMsgCombatEvent_DetailsAttack
	//	*CMsgCombatEvent_DetailsDamage
	//	*CMsgCombatEvent_DetailsDeath
	//	*CMsgCombatEvent_DetailsStartAttack
	//	*CMsgCombatEvent_DetailsSoundEvent
	//	*CMsgCombatEvent_DetailsParticleEvent
	//	*CMsgCombatEvent_DetailsModifierCreate
	//	*CMsgCombatEvent_DetailsModifierDestroy
	//	*CMsgCombatEvent_DetailsStartGesture
	//	*CMsgCombatEvent_DetailsCancelAttack
	//	*CMsgCombatEvent_DetailsCombatEnded
	//	*CMsgCombatEvent_DetailsAttackMissed
	//	*CMsgCombatEvent_DetailsAttackEvaded
	//	*CMsgCombatEvent_DetailsAttackBlocked
	//	*CMsgCombatEvent_DetailsResurrect
	//	*CMsgCombatEvent_DetailsSpeechEvent
	//	*CMsgCombatEvent_DetailsCastAbility
	//	*CMsgCombatEvent_DetailsStopGesture
	Details isCMsgCombatEvent_Details `protobuf_oneof:"details"`
}

func (x *CMsgCombatEvent) Reset() {
	*x = CMsgCombatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatEvent) ProtoMessage() {}

func (x *CMsgCombatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatEvent.ProtoReflect.Descriptor instead.
func (*CMsgCombatEvent) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{70}
}

func (x *CMsgCombatEvent) GetEventTime() float32 {
	if x != nil && x.EventTime != nil {
		return *x.EventTime
	}
	return 0
}

func (x *CMsgCombatEvent) GetSourceEntindex() uint32 {
	if x != nil && x.SourceEntindex != nil {
		return *x.SourceEntindex
	}
	return 0
}

func (x *CMsgCombatEvent) GetTargetEntindex() uint32 {
	if x != nil && x.TargetEntindex != nil {
		return *x.TargetEntindex
	}
	return 0
}

func (m *CMsgCombatEvent) GetDetails() isCMsgCombatEvent_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsAttack() *CMsgCombatEvent_Attack {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsAttack); ok {
		return x.DetailsAttack
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsDamage() *CMsgCombatEvent_Damage {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsDamage); ok {
		return x.DetailsDamage
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsDeath() *CMsgCombatEvent_Death {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsDeath); ok {
		return x.DetailsDeath
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsStartAttack() *CMsgCombatEvent_StartAttack {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsStartAttack); ok {
		return x.DetailsStartAttack
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsSoundEvent() *CMsgCombatEvent_SoundEvent {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsSoundEvent); ok {
		return x.DetailsSoundEvent
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsParticleEvent() *CUserMsg_ParticleManager {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsParticleEvent); ok {
		return x.DetailsParticleEvent
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsModifierCreate() *CMsgCombatEvent_ModifierCreate {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsModifierCreate); ok {
		return x.DetailsModifierCreate
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsModifierDestroy() *CMsgCombatEvent_ModifierDestroy {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsModifierDestroy); ok {
		return x.DetailsModifierDestroy
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsStartGesture() *CMsgCombatEvent_StartGesture {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsStartGesture); ok {
		return x.DetailsStartGesture
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsCancelAttack() *CMsgCombatEvent_CancelAttack {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsCancelAttack); ok {
		return x.DetailsCancelAttack
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsCombatEnded() *CMsgCombatEvent_CombatEnded {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsCombatEnded); ok {
		return x.DetailsCombatEnded
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsAttackMissed() *CMsgCombatEvent_AttackMissed {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsAttackMissed); ok {
		return x.DetailsAttackMissed
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsAttackEvaded() *CMsgCombatEvent_AttackEvaded {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsAttackEvaded); ok {
		return x.DetailsAttackEvaded
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsAttackBlocked() *CMsgCombatEvent_AttackBlocked {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsAttackBlocked); ok {
		return x.DetailsAttackBlocked
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsResurrect() *CMsgCombatEvent_Resurrect {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsResurrect); ok {
		return x.DetailsResurrect
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsSpeechEvent() *CMsgCombatEvent_SpeechEvent {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsSpeechEvent); ok {
		return x.DetailsSpeechEvent
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsCastAbility() *CMsgCombatEvent_CastAbility {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsCastAbility); ok {
		return x.DetailsCastAbility
	}
	return nil
}

func (x *CMsgCombatEvent) GetDetailsStopGesture() *CMsgCombatEvent_StopGesture {
	if x, ok := x.GetDetails().(*CMsgCombatEvent_DetailsStopGesture); ok {
		return x.DetailsStopGesture
	}
	return nil
}

type isCMsgCombatEvent_Details interface {
	isCMsgCombatEvent_Details()
}

type CMsgCombatEvent_DetailsAttack struct {
	DetailsAttack *CMsgCombatEvent_Attack `protobuf:"bytes,4,opt,name=details_attack,json=detailsAttack,oneof"`
}

type CMsgCombatEvent_DetailsDamage struct {
	DetailsDamage *CMsgCombatEvent_Damage `protobuf:"bytes,5,opt,name=details_damage,json=detailsDamage,oneof"`
}

type CMsgCombatEvent_DetailsDeath struct {
	DetailsDeath *CMsgCombatEvent_Death `protobuf:"bytes,6,opt,name=details_death,json=detailsDeath,oneof"`
}

type CMsgCombatEvent_DetailsStartAttack struct {
	DetailsStartAttack *CMsgCombatEvent_StartAttack `protobuf:"bytes,7,opt,name=details_start_attack,json=detailsStartAttack,oneof"`
}

type CMsgCombatEvent_DetailsSoundEvent struct {
	DetailsSoundEvent *CMsgCombatEvent_SoundEvent `protobuf:"bytes,8,opt,name=details_sound_event,json=detailsSoundEvent,oneof"`
}

type CMsgCombatEvent_DetailsParticleEvent struct {
	DetailsParticleEvent *CUserMsg_ParticleManager `protobuf:"bytes,9,opt,name=details_particle_event,json=detailsParticleEvent,oneof"`
}

type CMsgCombatEvent_DetailsModifierCreate struct {
	DetailsModifierCreate *CMsgCombatEvent_ModifierCreate `protobuf:"bytes,10,opt,name=details_modifier_create,json=detailsModifierCreate,oneof"`
}

type CMsgCombatEvent_DetailsModifierDestroy struct {
	DetailsModifierDestroy *CMsgCombatEvent_ModifierDestroy `protobuf:"bytes,11,opt,name=details_modifier_destroy,json=detailsModifierDestroy,oneof"`
}

type CMsgCombatEvent_DetailsStartGesture struct {
	DetailsStartGesture *CMsgCombatEvent_StartGesture `protobuf:"bytes,12,opt,name=details_start_gesture,json=detailsStartGesture,oneof"`
}

type CMsgCombatEvent_DetailsCancelAttack struct {
	DetailsCancelAttack *CMsgCombatEvent_CancelAttack `protobuf:"bytes,13,opt,name=details_cancel_attack,json=detailsCancelAttack,oneof"`
}

type CMsgCombatEvent_DetailsCombatEnded struct {
	DetailsCombatEnded *CMsgCombatEvent_CombatEnded `protobuf:"bytes,14,opt,name=details_combat_ended,json=detailsCombatEnded,oneof"`
}

type CMsgCombatEvent_DetailsAttackMissed struct {
	DetailsAttackMissed *CMsgCombatEvent_AttackMissed `protobuf:"bytes,15,opt,name=details_attack_missed,json=detailsAttackMissed,oneof"`
}

type CMsgCombatEvent_DetailsAttackEvaded struct {
	DetailsAttackEvaded *CMsgCombatEvent_AttackEvaded `protobuf:"bytes,16,opt,name=details_attack_evaded,json=detailsAttackEvaded,oneof"`
}

type CMsgCombatEvent_DetailsAttackBlocked struct {
	DetailsAttackBlocked *CMsgCombatEvent_AttackBlocked `protobuf:"bytes,17,opt,name=details_attack_blocked,json=detailsAttackBlocked,oneof"`
}

type CMsgCombatEvent_DetailsResurrect struct {
	DetailsResurrect *CMsgCombatEvent_Resurrect `protobuf:"bytes,18,opt,name=details_resurrect,json=detailsResurrect,oneof"`
}

type CMsgCombatEvent_DetailsSpeechEvent struct {
	DetailsSpeechEvent *CMsgCombatEvent_SpeechEvent `protobuf:"bytes,19,opt,name=details_speech_event,json=detailsSpeechEvent,oneof"`
}

type CMsgCombatEvent_DetailsCastAbility struct {
	DetailsCastAbility *CMsgCombatEvent_CastAbility `protobuf:"bytes,20,opt,name=details_cast_ability,json=detailsCastAbility,oneof"`
}

type CMsgCombatEvent_DetailsStopGesture struct {
	DetailsStopGesture *CMsgCombatEvent_StopGesture `protobuf:"bytes,21,opt,name=details_stop_gesture,json=detailsStopGesture,oneof"`
}

func (*CMsgCombatEvent_DetailsAttack) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsDamage) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsDeath) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsStartAttack) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsSoundEvent) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsParticleEvent) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsModifierCreate) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsModifierDestroy) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsStartGesture) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsCancelAttack) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsCombatEnded) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsAttackMissed) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsAttackEvaded) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsAttackBlocked) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsResurrect) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsSpeechEvent) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsCastAbility) isCMsgCombatEvent_Details() {}

func (*CMsgCombatEvent_DetailsStopGesture) isCMsgCombatEvent_Details() {}

type CMsgCombatHighlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighlightType *EDACIncidentType `protobuf:"varint,1,req,name=highlight_type,json=highlightType,enum=underlords.EDACIncidentType,def=0" json:"highlight_type,omitempty"`
	StartTime     *float32          `protobuf:"fixed32,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	FinishTime    *float32          `protobuf:"fixed32,3,opt,name=finish_time,json=finishTime" json:"finish_time,omitempty"`
	SourceUnitIdx *int32            `protobuf:"varint,4,opt,name=source_unit_idx,json=sourceUnitIdx" json:"source_unit_idx,omitempty"`
	TargetUnitIdx *int32            `protobuf:"varint,5,opt,name=target_unit_idx,json=targetUnitIdx" json:"target_unit_idx,omitempty"`
	Magnitude     *float32          `protobuf:"fixed32,6,opt,name=magnitude" json:"magnitude,omitempty"`
}

// Default values for CMsgCombatHighlight fields.
const (
	Default_CMsgCombatHighlight_HighlightType = EDACIncidentType_EDACIncidentType_None
)

func (x *CMsgCombatHighlight) Reset() {
	*x = CMsgCombatHighlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatHighlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatHighlight) ProtoMessage() {}

func (x *CMsgCombatHighlight) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatHighlight.ProtoReflect.Descriptor instead.
func (*CMsgCombatHighlight) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{71}
}

func (x *CMsgCombatHighlight) GetHighlightType() EDACIncidentType {
	if x != nil && x.HighlightType != nil {
		return *x.HighlightType
	}
	return Default_CMsgCombatHighlight_HighlightType
}

func (x *CMsgCombatHighlight) GetStartTime() float32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgCombatHighlight) GetFinishTime() float32 {
	if x != nil && x.FinishTime != nil {
		return *x.FinishTime
	}
	return 0
}

func (x *CMsgCombatHighlight) GetSourceUnitIdx() int32 {
	if x != nil && x.SourceUnitIdx != nil {
		return *x.SourceUnitIdx
	}
	return 0
}

func (x *CMsgCombatHighlight) GetTargetUnitIdx() int32 {
	if x != nil && x.TargetUnitIdx != nil {
		return *x.TargetUnitIdx
	}
	return 0
}

func (x *CMsgCombatHighlight) GetMagnitude() float32 {
	if x != nil && x.Magnitude != nil {
		return *x.Magnitude
	}
	return 0
}

type CMsgRoundCombat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber            *int32                      `protobuf:"varint,1,opt,name=round_number,json=roundNumber" json:"round_number,omitempty"`
	CombatDuration         *float32                    `protobuf:"fixed32,2,opt,name=combat_duration,json=combatDuration" json:"combat_duration,omitempty"`
	CombatIntroDuration    *float32                    `protobuf:"fixed32,3,opt,name=combat_intro_duration,json=combatIntroDuration" json:"combat_intro_duration,omitempty"`
	AddedTimeBeforeResults *float32                    `protobuf:"fixed32,4,opt,name=added_time_before_results,json=addedTimeBeforeResults" json:"added_time_before_results,omitempty"`
	Snapshots              []*CMsgCombatSnapshot       `protobuf:"bytes,5,rep,name=snapshots" json:"snapshots,omitempty"`
	Events                 []*CMsgCombatEvent          `protobuf:"bytes,6,rep,name=events" json:"events,omitempty"`
	Result                 *ERoundCombatResult         `protobuf:"varint,7,opt,name=result,enum=underlords.ERoundCombatResult,def=0" json:"result,omitempty"`
	PlayerPlayerSlot       *uint32                     `protobuf:"varint,8,opt,name=player_player_slot,json=playerPlayerSlot" json:"player_player_slot,omitempty"`
	MeterSnapshots         []*CMsgCombatMetersSnapshot `protobuf:"bytes,11,rep,name=meter_snapshots,json=meterSnapshots" json:"meter_snapshots,omitempty"`
	CombatHighlights       []*CMsgCombatHighlight      `protobuf:"bytes,12,rep,name=combat_highlights,json=combatHighlights" json:"combat_highlights,omitempty"`
	Mirrored               *bool                       `protobuf:"varint,14,opt,name=mirrored" json:"mirrored,omitempty"`
	// Types that are assignable to Opponent:
	//	*CMsgRoundCombat_OpponentPlayerSlot
	//	*CMsgRoundCombat_OpponentNeutralWave
	Opponent isCMsgRoundCombat_Opponent `protobuf_oneof:"opponent"`
}

// Default values for CMsgRoundCombat fields.
const (
	Default_CMsgRoundCombat_Result = ERoundCombatResult_ERoundCombatResult_Draw
)

func (x *CMsgRoundCombat) Reset() {
	*x = CMsgRoundCombat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRoundCombat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRoundCombat) ProtoMessage() {}

func (x *CMsgRoundCombat) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRoundCombat.ProtoReflect.Descriptor instead.
func (*CMsgRoundCombat) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{72}
}

func (x *CMsgRoundCombat) GetRoundNumber() int32 {
	if x != nil && x.RoundNumber != nil {
		return *x.RoundNumber
	}
	return 0
}

func (x *CMsgRoundCombat) GetCombatDuration() float32 {
	if x != nil && x.CombatDuration != nil {
		return *x.CombatDuration
	}
	return 0
}

func (x *CMsgRoundCombat) GetCombatIntroDuration() float32 {
	if x != nil && x.CombatIntroDuration != nil {
		return *x.CombatIntroDuration
	}
	return 0
}

func (x *CMsgRoundCombat) GetAddedTimeBeforeResults() float32 {
	if x != nil && x.AddedTimeBeforeResults != nil {
		return *x.AddedTimeBeforeResults
	}
	return 0
}

func (x *CMsgRoundCombat) GetSnapshots() []*CMsgCombatSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *CMsgRoundCombat) GetEvents() []*CMsgCombatEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CMsgRoundCombat) GetResult() ERoundCombatResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgRoundCombat_Result
}

func (x *CMsgRoundCombat) GetPlayerPlayerSlot() uint32 {
	if x != nil && x.PlayerPlayerSlot != nil {
		return *x.PlayerPlayerSlot
	}
	return 0
}

func (x *CMsgRoundCombat) GetMeterSnapshots() []*CMsgCombatMetersSnapshot {
	if x != nil {
		return x.MeterSnapshots
	}
	return nil
}

func (x *CMsgRoundCombat) GetCombatHighlights() []*CMsgCombatHighlight {
	if x != nil {
		return x.CombatHighlights
	}
	return nil
}

func (x *CMsgRoundCombat) GetMirrored() bool {
	if x != nil && x.Mirrored != nil {
		return *x.Mirrored
	}
	return false
}

func (m *CMsgRoundCombat) GetOpponent() isCMsgRoundCombat_Opponent {
	if m != nil {
		return m.Opponent
	}
	return nil
}

func (x *CMsgRoundCombat) GetOpponentPlayerSlot() uint32 {
	if x, ok := x.GetOpponent().(*CMsgRoundCombat_OpponentPlayerSlot); ok {
		return x.OpponentPlayerSlot
	}
	return 0
}

func (x *CMsgRoundCombat) GetOpponentNeutralWave() uint32 {
	if x, ok := x.GetOpponent().(*CMsgRoundCombat_OpponentNeutralWave); ok {
		return x.OpponentNeutralWave
	}
	return 0
}

type isCMsgRoundCombat_Opponent interface {
	isCMsgRoundCombat_Opponent()
}

type CMsgRoundCombat_OpponentPlayerSlot struct {
	OpponentPlayerSlot uint32 `protobuf:"varint,9,opt,name=opponent_player_slot,json=opponentPlayerSlot,oneof"`
}

type CMsgRoundCombat_OpponentNeutralWave struct {
	OpponentNeutralWave uint32 `protobuf:"varint,10,opt,name=opponent_neutral_wave,json=opponentNeutralWave,oneof"`
}

func (*CMsgRoundCombat_OpponentPlayerSlot) isCMsgRoundCombat_Opponent() {}

func (*CMsgRoundCombat_OpponentNeutralWave) isCMsgRoundCombat_Opponent() {}

type CMsgBattle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber *int32                 `protobuf:"varint,1,opt,name=round_number,json=roundNumber" json:"round_number,omitempty"`
	Combats     []*CMsgRoundCombat     `protobuf:"bytes,2,rep,name=combats" json:"combats,omitempty"`
	Global      *CMsgRoundCombatGlobal `protobuf:"bytes,3,opt,name=global" json:"global,omitempty"`
}

func (x *CMsgBattle) Reset() {
	*x = CMsgBattle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBattle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBattle) ProtoMessage() {}

func (x *CMsgBattle) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBattle.ProtoReflect.Descriptor instead.
func (*CMsgBattle) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{73}
}

func (x *CMsgBattle) GetRoundNumber() int32 {
	if x != nil && x.RoundNumber != nil {
		return *x.RoundNumber
	}
	return 0
}

func (x *CMsgBattle) GetCombats() []*CMsgRoundCombat {
	if x != nil {
		return x.Combats
	}
	return nil
}

func (x *CMsgBattle) GetGlobal() *CMsgRoundCombatGlobal {
	if x != nil {
		return x.Global
	}
	return nil
}

type CMsgRoundCombatGlobal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber              *int32                                                 `protobuf:"varint,1,opt,name=round_number,json=roundNumber" json:"round_number,omitempty"`
	CombatPlayerSlotToEvents []*CMsgRoundCombatGlobal_CombatPlayerSlotToEventsEntry `protobuf:"bytes,2,rep,name=combat_player_slot_to_events,json=combatPlayerSlotToEvents" json:"combat_player_slot_to_events,omitempty"`
}

func (x *CMsgRoundCombatGlobal) Reset() {
	*x = CMsgRoundCombatGlobal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRoundCombatGlobal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRoundCombatGlobal) ProtoMessage() {}

func (x *CMsgRoundCombatGlobal) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRoundCombatGlobal.ProtoReflect.Descriptor instead.
func (*CMsgRoundCombatGlobal) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{74}
}

func (x *CMsgRoundCombatGlobal) GetRoundNumber() int32 {
	if x != nil && x.RoundNumber != nil {
		return *x.RoundNumber
	}
	return 0
}

func (x *CMsgRoundCombatGlobal) GetCombatPlayerSlotToEvents() []*CMsgRoundCombatGlobal_CombatPlayerSlotToEventsEntry {
	if x != nil {
		return x.CombatPlayerSlotToEvents
	}
	return nil
}

type CMsgClientServerHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId   *EDACGameMessages `protobuf:"varint,1,req,name=msg_id,json=msgId,enum=underlords.EDACGameMessages,def=2" json:"msg_id,omitempty"`
	Payload []byte            `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
}

// Default values for CMsgClientServerHeader fields.
const (
	Default_CMsgClientServerHeader_MsgId = EDACGameMessages_k_EMsgNetBufferContents
)

func (x *CMsgClientServerHeader) Reset() {
	*x = CMsgClientServerHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientServerHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientServerHeader) ProtoMessage() {}

func (x *CMsgClientServerHeader) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientServerHeader.ProtoReflect.Descriptor instead.
func (*CMsgClientServerHeader) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{75}
}

func (x *CMsgClientServerHeader) GetMsgId() EDACGameMessages {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return Default_CMsgClientServerHeader_MsgId
}

func (x *CMsgClientServerHeader) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CMsgNetBufferContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDiff             *bool          `protobuf:"varint,1,opt,name=is_diff,json=isDiff" json:"is_diff,omitempty"`
	IsLast             *bool          `protobuf:"varint,2,opt,name=is_last,json=isLast" json:"is_last,omitempty"`
	Payload            []byte         `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	UnpackedStateSize  *uint32        `protobuf:"varint,4,opt,name=unpacked_state_size,json=unpackedStateSize" json:"unpacked_state_size,omitempty"`
	NetBufferType      *EDACNetBuffer `protobuf:"varint,5,opt,name=net_buffer_type,json=netBufferType,enum=underlords.EDACNetBuffer,def=0" json:"net_buffer_type,omitempty"`
	NetBufferId        *uint32        `protobuf:"varint,6,opt,name=net_buffer_id,json=netBufferId" json:"net_buffer_id,omitempty"`
	ServerTimeMs       *uint32        `protobuf:"varint,7,opt,name=server_time_ms,json=serverTimeMs" json:"server_time_ms,omitempty"`
	IsResultCompressed *bool          `protobuf:"varint,8,opt,name=is_result_compressed,json=isResultCompressed" json:"is_result_compressed,omitempty"`
	IsUpdateCompressed *bool          `protobuf:"varint,9,opt,name=is_update_compressed,json=isUpdateCompressed" json:"is_update_compressed,omitempty"`
}

// Default values for CMsgNetBufferContents fields.
const (
	Default_CMsgNetBufferContents_NetBufferType = EDACNetBuffer_k_eDACNetBuffer_MatchState
)

func (x *CMsgNetBufferContents) Reset() {
	*x = CMsgNetBufferContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetBufferContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetBufferContents) ProtoMessage() {}

func (x *CMsgNetBufferContents) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetBufferContents.ProtoReflect.Descriptor instead.
func (*CMsgNetBufferContents) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{76}
}

func (x *CMsgNetBufferContents) GetIsDiff() bool {
	if x != nil && x.IsDiff != nil {
		return *x.IsDiff
	}
	return false
}

func (x *CMsgNetBufferContents) GetIsLast() bool {
	if x != nil && x.IsLast != nil {
		return *x.IsLast
	}
	return false
}

func (x *CMsgNetBufferContents) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CMsgNetBufferContents) GetUnpackedStateSize() uint32 {
	if x != nil && x.UnpackedStateSize != nil {
		return *x.UnpackedStateSize
	}
	return 0
}

func (x *CMsgNetBufferContents) GetNetBufferType() EDACNetBuffer {
	if x != nil && x.NetBufferType != nil {
		return *x.NetBufferType
	}
	return Default_CMsgNetBufferContents_NetBufferType
}

func (x *CMsgNetBufferContents) GetNetBufferId() uint32 {
	if x != nil && x.NetBufferId != nil {
		return *x.NetBufferId
	}
	return 0
}

func (x *CMsgNetBufferContents) GetServerTimeMs() uint32 {
	if x != nil && x.ServerTimeMs != nil {
		return *x.ServerTimeMs
	}
	return 0
}

func (x *CMsgNetBufferContents) GetIsResultCompressed() bool {
	if x != nil && x.IsResultCompressed != nil {
		return *x.IsResultCompressed
	}
	return false
}

func (x *CMsgNetBufferContents) GetIsUpdateCompressed() bool {
	if x != nil && x.IsUpdateCompressed != nil {
		return *x.IsUpdateCompressed
	}
	return false
}

type CMsgNetBufferRemoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetBufferType *EDACNetBuffer `protobuf:"varint,5,opt,name=net_buffer_type,json=netBufferType,enum=underlords.EDACNetBuffer,def=0" json:"net_buffer_type,omitempty"`
	NetBufferId   *uint32        `protobuf:"varint,6,opt,name=net_buffer_id,json=netBufferId" json:"net_buffer_id,omitempty"`
}

// Default values for CMsgNetBufferRemoved fields.
const (
	Default_CMsgNetBufferRemoved_NetBufferType = EDACNetBuffer_k_eDACNetBuffer_MatchState
)

func (x *CMsgNetBufferRemoved) Reset() {
	*x = CMsgNetBufferRemoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetBufferRemoved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetBufferRemoved) ProtoMessage() {}

func (x *CMsgNetBufferRemoved) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetBufferRemoved.ProtoReflect.Descriptor instead.
func (*CMsgNetBufferRemoved) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{77}
}

func (x *CMsgNetBufferRemoved) GetNetBufferType() EDACNetBuffer {
	if x != nil && x.NetBufferType != nil {
		return *x.NetBufferType
	}
	return Default_CMsgNetBufferRemoved_NetBufferType
}

func (x *CMsgNetBufferRemoved) GetNetBufferId() uint32 {
	if x != nil && x.NetBufferId != nil {
		return *x.NetBufferId
	}
	return 0
}

type CMsgClientConnectionStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InDeveloperMode    *bool                                      `protobuf:"varint,1,opt,name=in_developer_mode,json=inDeveloperMode" json:"in_developer_mode,omitempty"`
	InOfflineMode      *bool                                      `protobuf:"varint,2,opt,name=in_offline_mode,json=inOfflineMode" json:"in_offline_mode,omitempty"`
	IsListenServerGame *bool                                      `protobuf:"varint,3,opt,name=is_listen_server_game,json=isListenServerGame" json:"is_listen_server_game,omitempty"`
	IsSingleHumanGame  *bool                                      `protobuf:"varint,4,opt,name=is_single_human_game,json=isSingleHumanGame" json:"is_single_human_game,omitempty"`
	MatchMode          *EDACMatchMode                             `protobuf:"varint,5,opt,name=match_mode,json=matchMode,enum=underlords.EDACMatchMode,def=0" json:"match_mode,omitempty"`
	GameMode           *EDACGameMode                              `protobuf:"varint,6,opt,name=game_mode,json=gameMode,enum=underlords.EDACGameMode,def=0" json:"game_mode,omitempty"`
	GameConstants      *CMsgClientConnectionStarted_GameConstants `protobuf:"bytes,7,opt,name=game_constants,json=gameConstants" json:"game_constants,omitempty"`
	GameManager        *CMsgClientConnectionStarted_GameManager   `protobuf:"bytes,8,opt,name=game_manager,json=gameManager" json:"game_manager,omitempty"`
}

// Default values for CMsgClientConnectionStarted fields.
const (
	Default_CMsgClientConnectionStarted_MatchMode = EDACMatchMode_k_EDACMatchMode_Invalid
	Default_CMsgClientConnectionStarted_GameMode  = EDACGameMode_k_EDACGameMode_Invalid
)

func (x *CMsgClientConnectionStarted) Reset() {
	*x = CMsgClientConnectionStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientConnectionStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientConnectionStarted) ProtoMessage() {}

func (x *CMsgClientConnectionStarted) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientConnectionStarted.ProtoReflect.Descriptor instead.
func (*CMsgClientConnectionStarted) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{78}
}

func (x *CMsgClientConnectionStarted) GetInDeveloperMode() bool {
	if x != nil && x.InDeveloperMode != nil {
		return *x.InDeveloperMode
	}
	return false
}

func (x *CMsgClientConnectionStarted) GetInOfflineMode() bool {
	if x != nil && x.InOfflineMode != nil {
		return *x.InOfflineMode
	}
	return false
}

func (x *CMsgClientConnectionStarted) GetIsListenServerGame() bool {
	if x != nil && x.IsListenServerGame != nil {
		return *x.IsListenServerGame
	}
	return false
}

func (x *CMsgClientConnectionStarted) GetIsSingleHumanGame() bool {
	if x != nil && x.IsSingleHumanGame != nil {
		return *x.IsSingleHumanGame
	}
	return false
}

func (x *CMsgClientConnectionStarted) GetMatchMode() EDACMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgClientConnectionStarted_MatchMode
}

func (x *CMsgClientConnectionStarted) GetGameMode() EDACGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgClientConnectionStarted_GameMode
}

func (x *CMsgClientConnectionStarted) GetGameConstants() *CMsgClientConnectionStarted_GameConstants {
	if x != nil {
		return x.GameConstants
	}
	return nil
}

func (x *CMsgClientConnectionStarted) GetGameManager() *CMsgClientConnectionStarted_GameManager {
	if x != nil {
		return x.GameManager
	}
	return nil
}

type CMsgClientConnectionComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgClientConnectionComplete) Reset() {
	*x = CMsgClientConnectionComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientConnectionComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientConnectionComplete) ProtoMessage() {}

func (x *CMsgClientConnectionComplete) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientConnectionComplete.ProtoReflect.Descriptor instead.
func (*CMsgClientConnectionComplete) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{79}
}

type CMsgClientSetDebugNetBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetBufferId   *uint32 `protobuf:"varint,1,opt,name=net_buffer_id,json=netBufferId" json:"net_buffer_id,omitempty"`
	Contents      *string `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
	Repeat        *uint32 `protobuf:"varint,3,opt,name=repeat" json:"repeat,omitempty"`
	ForceFullSend *bool   `protobuf:"varint,4,opt,name=force_full_send,json=forceFullSend" json:"force_full_send,omitempty"`
}

func (x *CMsgClientSetDebugNetBuffer) Reset() {
	*x = CMsgClientSetDebugNetBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientSetDebugNetBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSetDebugNetBuffer) ProtoMessage() {}

func (x *CMsgClientSetDebugNetBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSetDebugNetBuffer.ProtoReflect.Descriptor instead.
func (*CMsgClientSetDebugNetBuffer) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{80}
}

func (x *CMsgClientSetDebugNetBuffer) GetNetBufferId() uint32 {
	if x != nil && x.NetBufferId != nil {
		return *x.NetBufferId
	}
	return 0
}

func (x *CMsgClientSetDebugNetBuffer) GetContents() string {
	if x != nil && x.Contents != nil {
		return *x.Contents
	}
	return ""
}

func (x *CMsgClientSetDebugNetBuffer) GetRepeat() uint32 {
	if x != nil && x.Repeat != nil {
		return *x.Repeat
	}
	return 0
}

func (x *CMsgClientSetDebugNetBuffer) GetForceFullSend() bool {
	if x != nil && x.ForceFullSend != nil {
		return *x.ForceFullSend
	}
	return false
}

type CDACNetBuffer_Debug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contents *string `protobuf:"bytes,1,opt,name=contents" json:"contents,omitempty"`
}

func (x *CDACNetBuffer_Debug) Reset() {
	*x = CDACNetBuffer_Debug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDACNetBuffer_Debug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDACNetBuffer_Debug) ProtoMessage() {}

func (x *CDACNetBuffer_Debug) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDACNetBuffer_Debug.ProtoReflect.Descriptor instead.
func (*CDACNetBuffer_Debug) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{81}
}

func (x *CDACNetBuffer_Debug) GetContents() string {
	if x != nil && x.Contents != nil {
		return *x.Contents
	}
	return ""
}

type CMsgGameReplayActionMarker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *CMsgGameReplayActionMarker_EActionType `protobuf:"varint,1,opt,name=action,enum=underlords.CMsgGameReplayActionMarker_EActionType,def=1" json:"action,omitempty"`
}

// Default values for CMsgGameReplayActionMarker fields.
const (
	Default_CMsgGameReplayActionMarker_Action = CMsgGameReplayActionMarker_k_eActionType_Placholder
)

func (x *CMsgGameReplayActionMarker) Reset() {
	*x = CMsgGameReplayActionMarker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameReplayActionMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameReplayActionMarker) ProtoMessage() {}

func (x *CMsgGameReplayActionMarker) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameReplayActionMarker.ProtoReflect.Descriptor instead.
func (*CMsgGameReplayActionMarker) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{82}
}

func (x *CMsgGameReplayActionMarker) GetAction() CMsgGameReplayActionMarker_EActionType {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_CMsgGameReplayActionMarker_Action
}

type CMsgModifierName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModifierList []*CMsgModifierName_Modifier `protobuf:"bytes,1,rep,name=modifier_list,json=modifierList" json:"modifier_list,omitempty"`
}

func (x *CMsgModifierName) Reset() {
	*x = CMsgModifierName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgModifierName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgModifierName) ProtoMessage() {}

func (x *CMsgModifierName) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgModifierName.ProtoReflect.Descriptor instead.
func (*CMsgModifierName) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{83}
}

func (x *CMsgModifierName) GetModifierList() []*CMsgModifierName_Modifier {
	if x != nil {
		return x.ModifierList
	}
	return nil
}

type CMsgClientToServerChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId              *uint32          `protobuf:"varint,1,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	CustomText             *string          `protobuf:"bytes,2,opt,name=custom_text,json=customText" json:"custom_text,omitempty"`
	ChatType               *EInGameChatType `protobuf:"varint,3,opt,name=chat_type,json=chatType,enum=underlords.EInGameChatType,def=0" json:"chat_type,omitempty"`
	BoardSprayId           *uint32          `protobuf:"varint,4,opt,name=board_spray_id,json=boardSprayId" json:"board_spray_id,omitempty"`
	BoardSprayX            *float32         `protobuf:"fixed32,5,opt,name=board_spray_x,json=boardSprayX" json:"board_spray_x,omitempty"`
	BoardSprayY            *float32         `protobuf:"fixed32,6,opt,name=board_spray_y,json=boardSprayY" json:"board_spray_y,omitempty"`
	SprayedBoardPlayerSlot *uint32          `protobuf:"varint,7,opt,name=sprayed_board_player_slot,json=sprayedBoardPlayerSlot" json:"sprayed_board_player_slot,omitempty"`
}

// Default values for CMsgClientToServerChatMsg fields.
const (
	Default_CMsgClientToServerChatMsg_ChatType = EInGameChatType_k_eInGameChatType_Global
)

func (x *CMsgClientToServerChatMsg) Reset() {
	*x = CMsgClientToServerChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToServerChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToServerChatMsg) ProtoMessage() {}

func (x *CMsgClientToServerChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToServerChatMsg.ProtoReflect.Descriptor instead.
func (*CMsgClientToServerChatMsg) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{84}
}

func (x *CMsgClientToServerChatMsg) GetMessageId() uint32 {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return 0
}

func (x *CMsgClientToServerChatMsg) GetCustomText() string {
	if x != nil && x.CustomText != nil {
		return *x.CustomText
	}
	return ""
}

func (x *CMsgClientToServerChatMsg) GetChatType() EInGameChatType {
	if x != nil && x.ChatType != nil {
		return *x.ChatType
	}
	return Default_CMsgClientToServerChatMsg_ChatType
}

func (x *CMsgClientToServerChatMsg) GetBoardSprayId() uint32 {
	if x != nil && x.BoardSprayId != nil {
		return *x.BoardSprayId
	}
	return 0
}

func (x *CMsgClientToServerChatMsg) GetBoardSprayX() float32 {
	if x != nil && x.BoardSprayX != nil {
		return *x.BoardSprayX
	}
	return 0
}

func (x *CMsgClientToServerChatMsg) GetBoardSprayY() float32 {
	if x != nil && x.BoardSprayY != nil {
		return *x.BoardSprayY
	}
	return 0
}

func (x *CMsgClientToServerChatMsg) GetSprayedBoardPlayerSlot() uint32 {
	if x != nil && x.SprayedBoardPlayerSlot != nil {
		return *x.SprayedBoardPlayerSlot
	}
	return 0
}

type CMsgServerToClientChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot             *uint32          `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	MessageId              *uint32          `protobuf:"varint,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	CustomText             *string          `protobuf:"bytes,3,opt,name=custom_text,json=customText" json:"custom_text,omitempty"`
	NotificationId         *uint32          `protobuf:"varint,4,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
	ChatType               *EInGameChatType `protobuf:"varint,5,opt,name=chat_type,json=chatType,enum=underlords.EInGameChatType,def=0" json:"chat_type,omitempty"`
	BoardSprayId           *uint32          `protobuf:"varint,6,opt,name=board_spray_id,json=boardSprayId" json:"board_spray_id,omitempty"`
	BoardSprayX            *float32         `protobuf:"fixed32,7,opt,name=board_spray_x,json=boardSprayX" json:"board_spray_x,omitempty"`
	BoardSprayY            *float32         `protobuf:"fixed32,8,opt,name=board_spray_y,json=boardSprayY" json:"board_spray_y,omitempty"`
	SprayedBoardPlayerSlot *uint32          `protobuf:"varint,9,opt,name=sprayed_board_player_slot,json=sprayedBoardPlayerSlot" json:"sprayed_board_player_slot,omitempty"`
}

// Default values for CMsgServerToClientChatMsg fields.
const (
	Default_CMsgServerToClientChatMsg_ChatType = EInGameChatType_k_eInGameChatType_Global
)

func (x *CMsgServerToClientChatMsg) Reset() {
	*x = CMsgServerToClientChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToClientChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToClientChatMsg) ProtoMessage() {}

func (x *CMsgServerToClientChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToClientChatMsg.ProtoReflect.Descriptor instead.
func (*CMsgServerToClientChatMsg) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{85}
}

func (x *CMsgServerToClientChatMsg) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgServerToClientChatMsg) GetMessageId() uint32 {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return 0
}

func (x *CMsgServerToClientChatMsg) GetCustomText() string {
	if x != nil && x.CustomText != nil {
		return *x.CustomText
	}
	return ""
}

func (x *CMsgServerToClientChatMsg) GetNotificationId() uint32 {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return 0
}

func (x *CMsgServerToClientChatMsg) GetChatType() EInGameChatType {
	if x != nil && x.ChatType != nil {
		return *x.ChatType
	}
	return Default_CMsgServerToClientChatMsg_ChatType
}

func (x *CMsgServerToClientChatMsg) GetBoardSprayId() uint32 {
	if x != nil && x.BoardSprayId != nil {
		return *x.BoardSprayId
	}
	return 0
}

func (x *CMsgServerToClientChatMsg) GetBoardSprayX() float32 {
	if x != nil && x.BoardSprayX != nil {
		return *x.BoardSprayX
	}
	return 0
}

func (x *CMsgServerToClientChatMsg) GetBoardSprayY() float32 {
	if x != nil && x.BoardSprayY != nil {
		return *x.BoardSprayY
	}
	return 0
}

func (x *CMsgServerToClientChatMsg) GetSprayedBoardPlayerSlot() uint32 {
	if x != nil && x.SprayedBoardPlayerSlot != nil {
		return *x.SprayedBoardPlayerSlot
	}
	return 0
}

type CMsgClientToServerClickMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClickType        *EClickType `protobuf:"varint,1,opt,name=click_type,json=clickType,enum=underlords.EClickType,def=0" json:"click_type,omitempty"`
	TargetPlayerSlot *uint32     `protobuf:"varint,2,opt,name=target_player_slot,json=targetPlayerSlot" json:"target_player_slot,omitempty"`
	ClickX           *float32    `protobuf:"fixed32,3,opt,name=click_x,json=clickX" json:"click_x,omitempty"`
	ClickY           *float32    `protobuf:"fixed32,4,opt,name=click_y,json=clickY" json:"click_y,omitempty"`
	ClickZ           *float32    `protobuf:"fixed32,5,opt,name=click_z,json=clickZ" json:"click_z,omitempty"`
}

// Default values for CMsgClientToServerClickMsg fields.
const (
	Default_CMsgClientToServerClickMsg_ClickType = EClickType_k_eClickType_Left
)

func (x *CMsgClientToServerClickMsg) Reset() {
	*x = CMsgClientToServerClickMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToServerClickMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToServerClickMsg) ProtoMessage() {}

func (x *CMsgClientToServerClickMsg) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToServerClickMsg.ProtoReflect.Descriptor instead.
func (*CMsgClientToServerClickMsg) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{86}
}

func (x *CMsgClientToServerClickMsg) GetClickType() EClickType {
	if x != nil && x.ClickType != nil {
		return *x.ClickType
	}
	return Default_CMsgClientToServerClickMsg_ClickType
}

func (x *CMsgClientToServerClickMsg) GetTargetPlayerSlot() uint32 {
	if x != nil && x.TargetPlayerSlot != nil {
		return *x.TargetPlayerSlot
	}
	return 0
}

func (x *CMsgClientToServerClickMsg) GetClickX() float32 {
	if x != nil && x.ClickX != nil {
		return *x.ClickX
	}
	return 0
}

func (x *CMsgClientToServerClickMsg) GetClickY() float32 {
	if x != nil && x.ClickY != nil {
		return *x.ClickY
	}
	return 0
}

func (x *CMsgClientToServerClickMsg) GetClickZ() float32 {
	if x != nil && x.ClickZ != nil {
		return *x.ClickZ
	}
	return 0
}

type CMsgServerToClientClickMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClickType        *EClickType `protobuf:"varint,1,opt,name=click_type,json=clickType,enum=underlords.EClickType,def=0" json:"click_type,omitempty"`
	SourcePlayerSlot *uint32     `protobuf:"varint,2,opt,name=source_player_slot,json=sourcePlayerSlot" json:"source_player_slot,omitempty"`
	TargetPlayerSlot *uint32     `protobuf:"varint,3,opt,name=target_player_slot,json=targetPlayerSlot" json:"target_player_slot,omitempty"`
	ClickX           *float32    `protobuf:"fixed32,4,opt,name=click_x,json=clickX" json:"click_x,omitempty"`
	ClickY           *float32    `protobuf:"fixed32,5,opt,name=click_y,json=clickY" json:"click_y,omitempty"`
	ClickZ           *float32    `protobuf:"fixed32,6,opt,name=click_z,json=clickZ" json:"click_z,omitempty"`
}

// Default values for CMsgServerToClientClickMsg fields.
const (
	Default_CMsgServerToClientClickMsg_ClickType = EClickType_k_eClickType_Left
)

func (x *CMsgServerToClientClickMsg) Reset() {
	*x = CMsgServerToClientClickMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToClientClickMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToClientClickMsg) ProtoMessage() {}

func (x *CMsgServerToClientClickMsg) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToClientClickMsg.ProtoReflect.Descriptor instead.
func (*CMsgServerToClientClickMsg) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{87}
}

func (x *CMsgServerToClientClickMsg) GetClickType() EClickType {
	if x != nil && x.ClickType != nil {
		return *x.ClickType
	}
	return Default_CMsgServerToClientClickMsg_ClickType
}

func (x *CMsgServerToClientClickMsg) GetSourcePlayerSlot() uint32 {
	if x != nil && x.SourcePlayerSlot != nil {
		return *x.SourcePlayerSlot
	}
	return 0
}

func (x *CMsgServerToClientClickMsg) GetTargetPlayerSlot() uint32 {
	if x != nil && x.TargetPlayerSlot != nil {
		return *x.TargetPlayerSlot
	}
	return 0
}

func (x *CMsgServerToClientClickMsg) GetClickX() float32 {
	if x != nil && x.ClickX != nil {
		return *x.ClickX
	}
	return 0
}

func (x *CMsgServerToClientClickMsg) GetClickY() float32 {
	if x != nil && x.ClickY != nil {
		return *x.ClickY
	}
	return 0
}

func (x *CMsgServerToClientClickMsg) GetClickZ() float32 {
	if x != nil && x.ClickZ != nil {
		return *x.ClickZ
	}
	return 0
}

type CMsgPlayerMapPropCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command    *uint32 `protobuf:"varint,1,opt,name=command" json:"command,omitempty"`
	PlayerSlot *uint32 `protobuf:"varint,2,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	PropIdx    *uint32 `protobuf:"varint,3,opt,name=prop_idx,json=propIdx" json:"prop_idx,omitempty"`
}

func (x *CMsgPlayerMapPropCommand) Reset() {
	*x = CMsgPlayerMapPropCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerMapPropCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerMapPropCommand) ProtoMessage() {}

func (x *CMsgPlayerMapPropCommand) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerMapPropCommand.ProtoReflect.Descriptor instead.
func (*CMsgPlayerMapPropCommand) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{88}
}

func (x *CMsgPlayerMapPropCommand) GetCommand() uint32 {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return 0
}

func (x *CMsgPlayerMapPropCommand) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgPlayerMapPropCommand) GetPropIdx() uint32 {
	if x != nil && x.PropIdx != nil {
		return *x.PropIdx
	}
	return 0
}

type CMsgClientToServerTeammateDuosMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeammateSlot *uint32                 `protobuf:"varint,1,opt,name=teammate_slot,json=teammateSlot" json:"teammate_slot,omitempty"`
	MessageType  *EDuosMessageType       `protobuf:"varint,2,opt,name=message_type,json=messageType,enum=underlords.EDuosMessageType,def=0" json:"message_type,omitempty"`
	TargetType   *EDuosMessageTargetType `protobuf:"varint,3,opt,name=target_type,json=targetType,enum=underlords.EDuosMessageTargetType,def=0" json:"target_type,omitempty"`
	TargetId     *uint32                 `protobuf:"varint,4,opt,name=target_id,json=targetId" json:"target_id,omitempty"`
}

// Default values for CMsgClientToServerTeammateDuosMessage fields.
const (
	Default_CMsgClientToServerTeammateDuosMessage_MessageType = EDuosMessageType_k_eDuosMessageType_None
	Default_CMsgClientToServerTeammateDuosMessage_TargetType  = EDuosMessageTargetType_k_eDuosMessageTargetType_None
)

func (x *CMsgClientToServerTeammateDuosMessage) Reset() {
	*x = CMsgClientToServerTeammateDuosMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToServerTeammateDuosMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToServerTeammateDuosMessage) ProtoMessage() {}

func (x *CMsgClientToServerTeammateDuosMessage) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToServerTeammateDuosMessage.ProtoReflect.Descriptor instead.
func (*CMsgClientToServerTeammateDuosMessage) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{89}
}

func (x *CMsgClientToServerTeammateDuosMessage) GetTeammateSlot() uint32 {
	if x != nil && x.TeammateSlot != nil {
		return *x.TeammateSlot
	}
	return 0
}

func (x *CMsgClientToServerTeammateDuosMessage) GetMessageType() EDuosMessageType {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return Default_CMsgClientToServerTeammateDuosMessage_MessageType
}

func (x *CMsgClientToServerTeammateDuosMessage) GetTargetType() EDuosMessageTargetType {
	if x != nil && x.TargetType != nil {
		return *x.TargetType
	}
	return Default_CMsgClientToServerTeammateDuosMessage_TargetType
}

func (x *CMsgClientToServerTeammateDuosMessage) GetTargetId() uint32 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

type CMsgServerToClientTeammateDuosMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeammateSlot *uint32                 `protobuf:"varint,1,opt,name=teammate_slot,json=teammateSlot" json:"teammate_slot,omitempty"`
	MessageType  *EDuosMessageType       `protobuf:"varint,2,opt,name=message_type,json=messageType,enum=underlords.EDuosMessageType,def=0" json:"message_type,omitempty"`
	TargetType   *EDuosMessageTargetType `protobuf:"varint,3,opt,name=target_type,json=targetType,enum=underlords.EDuosMessageTargetType,def=0" json:"target_type,omitempty"`
	TargetId     *uint32                 `protobuf:"varint,4,opt,name=target_id,json=targetId" json:"target_id,omitempty"`
}

// Default values for CMsgServerToClientTeammateDuosMessage fields.
const (
	Default_CMsgServerToClientTeammateDuosMessage_MessageType = EDuosMessageType_k_eDuosMessageType_None
	Default_CMsgServerToClientTeammateDuosMessage_TargetType  = EDuosMessageTargetType_k_eDuosMessageTargetType_None
)

func (x *CMsgServerToClientTeammateDuosMessage) Reset() {
	*x = CMsgServerToClientTeammateDuosMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToClientTeammateDuosMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToClientTeammateDuosMessage) ProtoMessage() {}

func (x *CMsgServerToClientTeammateDuosMessage) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToClientTeammateDuosMessage.ProtoReflect.Descriptor instead.
func (*CMsgServerToClientTeammateDuosMessage) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{90}
}

func (x *CMsgServerToClientTeammateDuosMessage) GetTeammateSlot() uint32 {
	if x != nil && x.TeammateSlot != nil {
		return *x.TeammateSlot
	}
	return 0
}

func (x *CMsgServerToClientTeammateDuosMessage) GetMessageType() EDuosMessageType {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return Default_CMsgServerToClientTeammateDuosMessage_MessageType
}

func (x *CMsgServerToClientTeammateDuosMessage) GetTargetType() EDuosMessageTargetType {
	if x != nil && x.TargetType != nil {
		return *x.TargetType
	}
	return Default_CMsgServerToClientTeammateDuosMessage_TargetType
}

func (x *CMsgServerToClientTeammateDuosMessage) GetTargetId() uint32 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

type CMsgClientToServerLoadShareCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareCode *string `protobuf:"bytes,1,opt,name=share_code,json=shareCode" json:"share_code,omitempty"`
}

func (x *CMsgClientToServerLoadShareCode) Reset() {
	*x = CMsgClientToServerLoadShareCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToServerLoadShareCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToServerLoadShareCode) ProtoMessage() {}

func (x *CMsgClientToServerLoadShareCode) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToServerLoadShareCode.ProtoReflect.Descriptor instead.
func (*CMsgClientToServerLoadShareCode) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{91}
}

func (x *CMsgClientToServerLoadShareCode) GetShareCode() string {
	if x != nil && x.ShareCode != nil {
		return *x.ShareCode
	}
	return ""
}

type CMsgClientToServerBoardBuddyCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command *uint32  `protobuf:"varint,1,opt,name=command" json:"command,omitempty"`
	PosX    *float32 `protobuf:"fixed32,2,opt,name=pos_x,json=posX" json:"pos_x,omitempty"`
	PosY    *float32 `protobuf:"fixed32,3,opt,name=pos_y,json=posY" json:"pos_y,omitempty"`
}

func (x *CMsgClientToServerBoardBuddyCommand) Reset() {
	*x = CMsgClientToServerBoardBuddyCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToServerBoardBuddyCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToServerBoardBuddyCommand) ProtoMessage() {}

func (x *CMsgClientToServerBoardBuddyCommand) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToServerBoardBuddyCommand.ProtoReflect.Descriptor instead.
func (*CMsgClientToServerBoardBuddyCommand) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{92}
}

func (x *CMsgClientToServerBoardBuddyCommand) GetCommand() uint32 {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return 0
}

func (x *CMsgClientToServerBoardBuddyCommand) GetPosX() float32 {
	if x != nil && x.PosX != nil {
		return *x.PosX
	}
	return 0
}

func (x *CMsgClientToServerBoardBuddyCommand) GetPosY() float32 {
	if x != nil && x.PosY != nil {
		return *x.PosY
	}
	return 0
}

type CMsgClientToServerPuzzleLeaderboardCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leaderboard *uint32 `protobuf:"varint,1,opt,name=leaderboard" json:"leaderboard,omitempty"`
}

func (x *CMsgClientToServerPuzzleLeaderboardCommand) Reset() {
	*x = CMsgClientToServerPuzzleLeaderboardCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToServerPuzzleLeaderboardCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToServerPuzzleLeaderboardCommand) ProtoMessage() {}

func (x *CMsgClientToServerPuzzleLeaderboardCommand) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToServerPuzzleLeaderboardCommand.ProtoReflect.Descriptor instead.
func (*CMsgClientToServerPuzzleLeaderboardCommand) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{93}
}

func (x *CMsgClientToServerPuzzleLeaderboardCommand) GetLeaderboard() uint32 {
	if x != nil && x.Leaderboard != nil {
		return *x.Leaderboard
	}
	return 0
}

type CMsgRecordLocalBotStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializedMsg []byte `protobuf:"bytes,1,opt,name=serialized_msg,json=serializedMsg" json:"serialized_msg,omitempty"`
}

func (x *CMsgRecordLocalBotStats) Reset() {
	*x = CMsgRecordLocalBotStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRecordLocalBotStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRecordLocalBotStats) ProtoMessage() {}

func (x *CMsgRecordLocalBotStats) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRecordLocalBotStats.ProtoReflect.Descriptor instead.
func (*CMsgRecordLocalBotStats) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{94}
}

func (x *CMsgRecordLocalBotStats) GetSerializedMsg() []byte {
	if x != nil {
		return x.SerializedMsg
	}
	return nil
}

type CMsgClientToServerUpvoteNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationId *uint32 `protobuf:"varint,1,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
}

func (x *CMsgClientToServerUpvoteNotification) Reset() {
	*x = CMsgClientToServerUpvoteNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToServerUpvoteNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToServerUpvoteNotification) ProtoMessage() {}

func (x *CMsgClientToServerUpvoteNotification) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToServerUpvoteNotification.ProtoReflect.Descriptor instead.
func (*CMsgClientToServerUpvoteNotification) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{95}
}

func (x *CMsgClientToServerUpvoteNotification) GetNotificationId() uint32 {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return 0
}

type CMsgServerToClientNotificationChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationId *uint32                                                `protobuf:"varint,1,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
	Upvotes        *uint32                                                `protobuf:"varint,2,opt,name=upvotes" json:"upvotes,omitempty"`
	Subtypes       []*CMsgServerToClientNotificationChanged_UpvoteSubtype `protobuf:"bytes,3,rep,name=subtypes" json:"subtypes,omitempty"`
}

func (x *CMsgServerToClientNotificationChanged) Reset() {
	*x = CMsgServerToClientNotificationChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToClientNotificationChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToClientNotificationChanged) ProtoMessage() {}

func (x *CMsgServerToClientNotificationChanged) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToClientNotificationChanged.ProtoReflect.Descriptor instead.
func (*CMsgServerToClientNotificationChanged) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{96}
}

func (x *CMsgServerToClientNotificationChanged) GetNotificationId() uint32 {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return 0
}

func (x *CMsgServerToClientNotificationChanged) GetUpvotes() uint32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CMsgServerToClientNotificationChanged) GetSubtypes() []*CMsgServerToClientNotificationChanged_UpvoteSubtype {
	if x != nil {
		return x.Subtypes
	}
	return nil
}

type CMsgClientToServerLocalPlayerInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerLoadout []*CMsgClientToServerLocalPlayerInventory_LoadoutItem `protobuf:"bytes,1,rep,name=player_loadout,json=playerLoadout" json:"player_loadout,omitempty"`
}

func (x *CMsgClientToServerLocalPlayerInventory) Reset() {
	*x = CMsgClientToServerLocalPlayerInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToServerLocalPlayerInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToServerLocalPlayerInventory) ProtoMessage() {}

func (x *CMsgClientToServerLocalPlayerInventory) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToServerLocalPlayerInventory.ProtoReflect.Descriptor instead.
func (*CMsgClientToServerLocalPlayerInventory) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{97}
}

func (x *CMsgClientToServerLocalPlayerInventory) GetPlayerLoadout() []*CMsgClientToServerLocalPlayerInventory_LoadoutItem {
	if x != nil {
		return x.PlayerLoadout
	}
	return nil
}

type CMsgGameStateIntegrationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *uint32                 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PublicPlayerState  *CMsgPublicPlayerState  `protobuf:"bytes,2,opt,name=public_player_state,json=publicPlayerState" json:"public_player_state,omitempty"`
	PrivatePlayerState *CMsgPrivatePlayerState `protobuf:"bytes,3,opt,name=private_player_state,json=privatePlayerState" json:"private_player_state,omitempty"`
}

func (x *CMsgGameStateIntegrationData) Reset() {
	*x = CMsgGameStateIntegrationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameStateIntegrationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameStateIntegrationData) ProtoMessage() {}

func (x *CMsgGameStateIntegrationData) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameStateIntegrationData.ProtoReflect.Descriptor instead.
func (*CMsgGameStateIntegrationData) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{98}
}

func (x *CMsgGameStateIntegrationData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgGameStateIntegrationData) GetPublicPlayerState() *CMsgPublicPlayerState {
	if x != nil {
		return x.PublicPlayerState
	}
	return nil
}

func (x *CMsgGameStateIntegrationData) GetPrivatePlayerState() *CMsgPrivatePlayerState {
	if x != nil {
		return x.PrivatePlayerState
	}
	return nil
}

type CMsgGameStateIntegrationBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CMsgGameStateIntegrationData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Id   *uint32                         `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (x *CMsgGameStateIntegrationBlock) Reset() {
	*x = CMsgGameStateIntegrationBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameStateIntegrationBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameStateIntegrationBlock) ProtoMessage() {}

func (x *CMsgGameStateIntegrationBlock) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameStateIntegrationBlock.ProtoReflect.Descriptor instead.
func (*CMsgGameStateIntegrationBlock) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{99}
}

func (x *CMsgGameStateIntegrationBlock) GetData() []*CMsgGameStateIntegrationData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CMsgGameStateIntegrationBlock) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type CMsgGameStateIntegrationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block []*CMsgGameStateIntegrationBlock `protobuf:"bytes,1,rep,name=block" json:"block,omitempty"`
	Auth  *string                          `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
}

func (x *CMsgGameStateIntegrationUpdate) Reset() {
	*x = CMsgGameStateIntegrationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameStateIntegrationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameStateIntegrationUpdate) ProtoMessage() {}

func (x *CMsgGameStateIntegrationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameStateIntegrationUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGameStateIntegrationUpdate) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{100}
}

func (x *CMsgGameStateIntegrationUpdate) GetBlock() []*CMsgGameStateIntegrationBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *CMsgGameStateIntegrationUpdate) GetAuth() string {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return ""
}

type CMsgClientToServerInitData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameModifiers              *CMsgGameModifiers    `protobuf:"bytes,1,opt,name=game_modifiers,json=gameModifiers" json:"game_modifiers,omitempty"`
	EventId                    *uint32               `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	DeveloperMode              *bool                 `protobuf:"varint,3,opt,name=developer_mode,json=developerMode" json:"developer_mode,omitempty"`
	LoadSaveFile               *string               `protobuf:"bytes,4,opt,name=load_save_file,json=loadSaveFile" json:"load_save_file,omitempty"`
	LocalMmrLevel              *int32                `protobuf:"varint,5,opt,name=local_mmr_level,json=localMmrLevel,def=-1" json:"local_mmr_level,omitempty"`
	Underlord                  *uint32               `protobuf:"varint,6,opt,name=underlord" json:"underlord,omitempty"`
	LocalGlobalLeaderboardRank *uint32               `protobuf:"varint,7,opt,name=local_global_leaderboard_rank,json=localGlobalLeaderboardRank" json:"local_global_leaderboard_rank,omitempty"`
	OfflineMode                *bool                 `protobuf:"varint,8,opt,name=offline_mode,json=offlineMode" json:"offline_mode,omitempty"`
	BotDifficulty              *int32                `protobuf:"varint,9,opt,name=bot_difficulty,json=botDifficulty,def=0" json:"bot_difficulty,omitempty"`
	Tutorial                   *bool                 `protobuf:"varint,10,opt,name=tutorial" json:"tutorial,omitempty"`
	GameMode                   *EDACGameMode         `protobuf:"varint,11,opt,name=game_mode,json=gameMode,enum=underlords.EDACGameMode,def=1" json:"game_mode,omitempty"`
	GameModeSettings           *CMsgGameModeSettings `protobuf:"bytes,12,opt,name=game_mode_settings,json=gameModeSettings" json:"game_mode_settings,omitempty"`
	FeatureControls            *string               `protobuf:"bytes,13,opt,name=feature_controls,json=featureControls" json:"feature_controls,omitempty"`
	ActiveChallengeSlotId      *uint32               `protobuf:"varint,14,opt,name=active_challenge_slot_id,json=activeChallengeSlotId" json:"active_challenge_slot_id,omitempty"`
}

// Default values for CMsgClientToServerInitData fields.
const (
	Default_CMsgClientToServerInitData_LocalMmrLevel = int32(-1)
	Default_CMsgClientToServerInitData_BotDifficulty = int32(0)
	Default_CMsgClientToServerInitData_GameMode      = EDACGameMode_k_EDACGameMode_Normal
)

func (x *CMsgClientToServerInitData) Reset() {
	*x = CMsgClientToServerInitData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToServerInitData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToServerInitData) ProtoMessage() {}

func (x *CMsgClientToServerInitData) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToServerInitData.ProtoReflect.Descriptor instead.
func (*CMsgClientToServerInitData) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{101}
}

func (x *CMsgClientToServerInitData) GetGameModifiers() *CMsgGameModifiers {
	if x != nil {
		return x.GameModifiers
	}
	return nil
}

func (x *CMsgClientToServerInitData) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToServerInitData) GetDeveloperMode() bool {
	if x != nil && x.DeveloperMode != nil {
		return *x.DeveloperMode
	}
	return false
}

func (x *CMsgClientToServerInitData) GetLoadSaveFile() string {
	if x != nil && x.LoadSaveFile != nil {
		return *x.LoadSaveFile
	}
	return ""
}

func (x *CMsgClientToServerInitData) GetLocalMmrLevel() int32 {
	if x != nil && x.LocalMmrLevel != nil {
		return *x.LocalMmrLevel
	}
	return Default_CMsgClientToServerInitData_LocalMmrLevel
}

func (x *CMsgClientToServerInitData) GetUnderlord() uint32 {
	if x != nil && x.Underlord != nil {
		return *x.Underlord
	}
	return 0
}

func (x *CMsgClientToServerInitData) GetLocalGlobalLeaderboardRank() uint32 {
	if x != nil && x.LocalGlobalLeaderboardRank != nil {
		return *x.LocalGlobalLeaderboardRank
	}
	return 0
}

func (x *CMsgClientToServerInitData) GetOfflineMode() bool {
	if x != nil && x.OfflineMode != nil {
		return *x.OfflineMode
	}
	return false
}

func (x *CMsgClientToServerInitData) GetBotDifficulty() int32 {
	if x != nil && x.BotDifficulty != nil {
		return *x.BotDifficulty
	}
	return Default_CMsgClientToServerInitData_BotDifficulty
}

func (x *CMsgClientToServerInitData) GetTutorial() bool {
	if x != nil && x.Tutorial != nil {
		return *x.Tutorial
	}
	return false
}

func (x *CMsgClientToServerInitData) GetGameMode() EDACGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgClientToServerInitData_GameMode
}

func (x *CMsgClientToServerInitData) GetGameModeSettings() *CMsgGameModeSettings {
	if x != nil {
		return x.GameModeSettings
	}
	return nil
}

func (x *CMsgClientToServerInitData) GetFeatureControls() string {
	if x != nil && x.FeatureControls != nil {
		return *x.FeatureControls
	}
	return ""
}

func (x *CMsgClientToServerInitData) GetActiveChallengeSlotId() uint32 {
	if x != nil && x.ActiveChallengeSlotId != nil {
		return *x.ActiveChallengeSlotId
	}
	return 0
}

type CMsgClientAccountSyncStorageFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *uint32  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ids     []uint32 `protobuf:"varint,2,rep,name=ids" json:"ids,omitempty"`
	Values  []uint32 `protobuf:"varint,3,rep,name=values" json:"values,omitempty"`
}

func (x *CMsgClientAccountSyncStorageFile) Reset() {
	*x = CMsgClientAccountSyncStorageFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientAccountSyncStorageFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientAccountSyncStorageFile) ProtoMessage() {}

func (x *CMsgClientAccountSyncStorageFile) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientAccountSyncStorageFile.ProtoReflect.Descriptor instead.
func (*CMsgClientAccountSyncStorageFile) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{102}
}

func (x *CMsgClientAccountSyncStorageFile) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgClientAccountSyncStorageFile) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *CMsgClientAccountSyncStorageFile) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type CMsgPlayerChallengeCompletePrediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId         *uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SlotId          *uint32 `protobuf:"varint,2,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	ChallengeId     *uint32 `protobuf:"varint,3,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	ConfigId        *uint32 `protobuf:"varint,4,opt,name=config_id,json=configId" json:"config_id,omitempty"`
	InitialProgress *uint32 `protobuf:"varint,5,opt,name=initial_progress,json=initialProgress" json:"initial_progress,omitempty"`
	PredictedTotal  *uint32 `protobuf:"varint,6,opt,name=predicted_total,json=predictedTotal" json:"predicted_total,omitempty"`
}

func (x *CMsgPlayerChallengeCompletePrediction) Reset() {
	*x = CMsgPlayerChallengeCompletePrediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerChallengeCompletePrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerChallengeCompletePrediction) ProtoMessage() {}

func (x *CMsgPlayerChallengeCompletePrediction) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerChallengeCompletePrediction.ProtoReflect.Descriptor instead.
func (*CMsgPlayerChallengeCompletePrediction) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{103}
}

func (x *CMsgPlayerChallengeCompletePrediction) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgPlayerChallengeCompletePrediction) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgPlayerChallengeCompletePrediction) GetChallengeId() uint32 {
	if x != nil && x.ChallengeId != nil {
		return *x.ChallengeId
	}
	return 0
}

func (x *CMsgPlayerChallengeCompletePrediction) GetConfigId() uint32 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *CMsgPlayerChallengeCompletePrediction) GetInitialProgress() uint32 {
	if x != nil && x.InitialProgress != nil {
		return *x.InitialProgress
	}
	return 0
}

func (x *CMsgPlayerChallengeCompletePrediction) GetPredictedTotal() uint32 {
	if x != nil && x.PredictedTotal != nil {
		return *x.PredictedTotal
	}
	return 0
}

type CMsgPlayerCombatResult_DamageSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *EDamageSourceType `protobuf:"varint,1,req,name=type,enum=underlords.EDamageSourceType,def=0" json:"type,omitempty"`
	EntityId    *int32             `protobuf:"varint,2,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	Rank        *int32             `protobuf:"varint,3,opt,name=rank" json:"rank,omitempty"`
	DamageDealt *int32             `protobuf:"varint,4,opt,name=damage_dealt,json=damageDealt" json:"damage_dealt,omitempty"`
}

// Default values for CMsgPlayerCombatResult_DamageSource fields.
const (
	Default_CMsgPlayerCombatResult_DamageSource_Type = EDamageSourceType_k_EDamageSourceType_Round
)

func (x *CMsgPlayerCombatResult_DamageSource) Reset() {
	*x = CMsgPlayerCombatResult_DamageSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerCombatResult_DamageSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerCombatResult_DamageSource) ProtoMessage() {}

func (x *CMsgPlayerCombatResult_DamageSource) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerCombatResult_DamageSource.ProtoReflect.Descriptor instead.
func (*CMsgPlayerCombatResult_DamageSource) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CMsgPlayerCombatResult_DamageSource) GetType() EDamageSourceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CMsgPlayerCombatResult_DamageSource_Type
}

func (x *CMsgPlayerCombatResult_DamageSource) GetEntityId() int32 {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return 0
}

func (x *CMsgPlayerCombatResult_DamageSource) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CMsgPlayerCombatResult_DamageSource) GetDamageDealt() int32 {
	if x != nil && x.DamageDealt != nil {
		return *x.DamageDealt
	}
	return 0
}

type CMsgPublicPlayerState_LoadoutItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot     *uint32 `protobuf:"varint,1,opt,name=slot" json:"slot,omitempty"`
	SubSlot  *uint32 `protobuf:"varint,2,opt,name=sub_slot,json=subSlot" json:"sub_slot,omitempty"`
	DefIndex *uint32 `protobuf:"varint,3,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
}

func (x *CMsgPublicPlayerState_LoadoutItem) Reset() {
	*x = CMsgPublicPlayerState_LoadoutItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPublicPlayerState_LoadoutItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPublicPlayerState_LoadoutItem) ProtoMessage() {}

func (x *CMsgPublicPlayerState_LoadoutItem) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPublicPlayerState_LoadoutItem.ProtoReflect.Descriptor instead.
func (*CMsgPublicPlayerState_LoadoutItem) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{24, 0}
}

func (x *CMsgPublicPlayerState_LoadoutItem) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CMsgPublicPlayerState_LoadoutItem) GetSubSlot() uint32 {
	if x != nil && x.SubSlot != nil {
		return *x.SubSlot
	}
	return 0
}

func (x *CMsgPublicPlayerState_LoadoutItem) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

type CMsgPublicPostMatchStats_PlayerPerRoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gold                     *uint32         `protobuf:"varint,1,opt,name=gold" json:"gold,omitempty"`
	Health                   *uint32         `protobuf:"varint,2,opt,name=health" json:"health,omitempty"`
	Level                    *uint32         `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Wins                     *uint32         `protobuf:"varint,4,opt,name=wins" json:"wins,omitempty"`
	Losses                   *uint32         `protobuf:"varint,5,opt,name=losses" json:"losses,omitempty"`
	NetWorth                 *uint32         `protobuf:"varint,6,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Units                    []*CMsgUnit     `protobuf:"bytes,7,rep,name=units" json:"units,omitempty"`
	Synergies                []uint32        `protobuf:"varint,8,rep,name=synergies" json:"synergies,omitempty"`
	ItemSlots                []*CMsgItemSlot `protobuf:"bytes,9,rep,name=item_slots,json=itemSlots" json:"item_slots,omitempty"`
	UnderlordSelectedTalents []uint32        `protobuf:"varint,10,rep,name=underlord_selected_talents,json=underlordSelectedTalents" json:"underlord_selected_talents,omitempty"`
}

func (x *CMsgPublicPostMatchStats_PlayerPerRoundInfo) Reset() {
	*x = CMsgPublicPostMatchStats_PlayerPerRoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPublicPostMatchStats_PlayerPerRoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPublicPostMatchStats_PlayerPerRoundInfo) ProtoMessage() {}

func (x *CMsgPublicPostMatchStats_PlayerPerRoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPublicPostMatchStats_PlayerPerRoundInfo.ProtoReflect.Descriptor instead.
func (*CMsgPublicPostMatchStats_PlayerPerRoundInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{25, 0}
}

func (x *CMsgPublicPostMatchStats_PlayerPerRoundInfo) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgPublicPostMatchStats_PlayerPerRoundInfo) GetHealth() uint32 {
	if x != nil && x.Health != nil {
		return *x.Health
	}
	return 0
}

func (x *CMsgPublicPostMatchStats_PlayerPerRoundInfo) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgPublicPostMatchStats_PlayerPerRoundInfo) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CMsgPublicPostMatchStats_PlayerPerRoundInfo) GetLosses() uint32 {
	if x != nil && x.Losses != nil {
		return *x.Losses
	}
	return 0
}

func (x *CMsgPublicPostMatchStats_PlayerPerRoundInfo) GetNetWorth() uint32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMsgPublicPostMatchStats_PlayerPerRoundInfo) GetUnits() []*CMsgUnit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgPublicPostMatchStats_PlayerPerRoundInfo) GetSynergies() []uint32 {
	if x != nil {
		return x.Synergies
	}
	return nil
}

func (x *CMsgPublicPostMatchStats_PlayerPerRoundInfo) GetItemSlots() []*CMsgItemSlot {
	if x != nil {
		return x.ItemSlots
	}
	return nil
}

func (x *CMsgPublicPostMatchStats_PlayerPerRoundInfo) GetUnderlordSelectedTalents() []uint32 {
	if x != nil {
		return x.UnderlordSelectedTalents
	}
	return nil
}

type CMsgPublicPostMatchStats_PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rounds                []*CMsgPublicPostMatchStats_PlayerPerRoundInfo `protobuf:"bytes,1,rep,name=rounds" json:"rounds,omitempty"`
	PlayerSlot            *uint32                                        `protobuf:"varint,2,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	AccountId             *uint32                                        `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	IsHumanPlayer         *bool                                          `protobuf:"varint,4,opt,name=is_human_player,json=isHumanPlayer" json:"is_human_player,omitempty"`
	PersonaName           *string                                        `protobuf:"bytes,5,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	MmrLevel              *uint32                                        `protobuf:"varint,6,opt,name=mmr_level,json=mmrLevel" json:"mmr_level,omitempty"`
	GlobalLeaderboardRank *uint32                                        `protobuf:"varint,7,opt,name=global_leaderboard_rank,json=globalLeaderboardRank" json:"global_leaderboard_rank,omitempty"`
	FinalPosition         *uint32                                        `protobuf:"varint,8,opt,name=final_position,json=finalPosition" json:"final_position,omitempty"`
	LobbyTeam             *EDACLobbyTeam                                 `protobuf:"varint,9,opt,name=lobby_team,json=lobbyTeam,enum=underlords.EDACLobbyTeam,def=0" json:"lobby_team,omitempty"`
}

// Default values for CMsgPublicPostMatchStats_PlayerInfo fields.
const (
	Default_CMsgPublicPostMatchStats_PlayerInfo_LobbyTeam = EDACLobbyTeam_k_EDACLobbyTeam_Team0
)

func (x *CMsgPublicPostMatchStats_PlayerInfo) Reset() {
	*x = CMsgPublicPostMatchStats_PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPublicPostMatchStats_PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPublicPostMatchStats_PlayerInfo) ProtoMessage() {}

func (x *CMsgPublicPostMatchStats_PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPublicPostMatchStats_PlayerInfo.ProtoReflect.Descriptor instead.
func (*CMsgPublicPostMatchStats_PlayerInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{25, 1}
}

func (x *CMsgPublicPostMatchStats_PlayerInfo) GetRounds() []*CMsgPublicPostMatchStats_PlayerPerRoundInfo {
	if x != nil {
		return x.Rounds
	}
	return nil
}

func (x *CMsgPublicPostMatchStats_PlayerInfo) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgPublicPostMatchStats_PlayerInfo) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgPublicPostMatchStats_PlayerInfo) GetIsHumanPlayer() bool {
	if x != nil && x.IsHumanPlayer != nil {
		return *x.IsHumanPlayer
	}
	return false
}

func (x *CMsgPublicPostMatchStats_PlayerInfo) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CMsgPublicPostMatchStats_PlayerInfo) GetMmrLevel() uint32 {
	if x != nil && x.MmrLevel != nil {
		return *x.MmrLevel
	}
	return 0
}

func (x *CMsgPublicPostMatchStats_PlayerInfo) GetGlobalLeaderboardRank() uint32 {
	if x != nil && x.GlobalLeaderboardRank != nil {
		return *x.GlobalLeaderboardRank
	}
	return 0
}

func (x *CMsgPublicPostMatchStats_PlayerInfo) GetFinalPosition() uint32 {
	if x != nil && x.FinalPosition != nil {
		return *x.FinalPosition
	}
	return 0
}

func (x *CMsgPublicPostMatchStats_PlayerInfo) GetLobbyTeam() EDACLobbyTeam {
	if x != nil && x.LobbyTeam != nil {
		return *x.LobbyTeam
	}
	return Default_CMsgPublicPostMatchStats_PlayerInfo_LobbyTeam
}

type CMsgIndividualPostMatchStats_Round struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Units                    []*CMsgUnit     `protobuf:"bytes,1,rep,name=units" json:"units,omitempty"`
	Synergies                []uint32        `protobuf:"varint,2,rep,name=synergies" json:"synergies,omitempty"`
	Items                    []*CMsgItemSlot `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	GoldSpentOnRerolls       *uint32         `protobuf:"varint,4,opt,name=gold_spent_on_rerolls,json=goldSpentOnRerolls" json:"gold_spent_on_rerolls,omitempty"`
	GoldEarned               *uint32         `protobuf:"varint,5,opt,name=gold_earned,json=goldEarned" json:"gold_earned,omitempty"`
	InterestGoldEarned       *uint32         `protobuf:"varint,6,opt,name=interest_gold_earned,json=interestGoldEarned" json:"interest_gold_earned,omitempty"`
	StreakGoldEarned         *uint32         `protobuf:"varint,7,opt,name=streak_gold_earned,json=streakGoldEarned" json:"streak_gold_earned,omitempty"`
	Victory                  *uint32         `protobuf:"varint,8,opt,name=victory" json:"victory,omitempty"`
	XpEarned                 *uint32         `protobuf:"varint,9,opt,name=xp_earned,json=xpEarned" json:"xp_earned,omitempty"`
	Health                   *uint32         `protobuf:"varint,10,opt,name=health" json:"health,omitempty"`
	Gold                     *uint32         `protobuf:"varint,11,opt,name=gold" json:"gold,omitempty"`
	RoundRanking             *uint32         `protobuf:"varint,12,opt,name=round_ranking,json=roundRanking" json:"round_ranking,omitempty"`
	Level                    *uint32         `protobuf:"varint,13,opt,name=level" json:"level,omitempty"`
	EnemyPlayerSlot          *uint32         `protobuf:"varint,14,opt,name=enemy_player_slot,json=enemyPlayerSlot" json:"enemy_player_slot,omitempty"`
	GoldSpentOnLevels        *uint32         `protobuf:"varint,15,opt,name=gold_spent_on_levels,json=goldSpentOnLevels" json:"gold_spent_on_levels,omitempty"`
	GoldSpentOnUnits         *uint32         `protobuf:"varint,16,opt,name=gold_spent_on_units,json=goldSpentOnUnits" json:"gold_spent_on_units,omitempty"`
	DamageDealtToUnits       *uint32         `protobuf:"varint,17,opt,name=damage_dealt_to_units,json=damageDealtToUnits" json:"damage_dealt_to_units,omitempty"`
	VictoryLevel             *uint32         `protobuf:"varint,18,opt,name=victory_level,json=victoryLevel" json:"victory_level,omitempty"`
	DamageDealtToPlayer      *uint32         `protobuf:"varint,19,opt,name=damage_dealt_to_player,json=damageDealtToPlayer" json:"damage_dealt_to_player,omitempty"`
	EnemyUnderlord           *uint32         `protobuf:"varint,20,opt,name=enemy_underlord,json=enemyUnderlord" json:"enemy_underlord,omitempty"`
	UnderlordSelectedTalents []uint32        `protobuf:"varint,21,rep,name=underlord_selected_talents,json=underlordSelectedTalents" json:"underlord_selected_talents,omitempty"`
}

func (x *CMsgIndividualPostMatchStats_Round) Reset() {
	*x = CMsgIndividualPostMatchStats_Round{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgIndividualPostMatchStats_Round) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgIndividualPostMatchStats_Round) ProtoMessage() {}

func (x *CMsgIndividualPostMatchStats_Round) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgIndividualPostMatchStats_Round.ProtoReflect.Descriptor instead.
func (*CMsgIndividualPostMatchStats_Round) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{26, 0}
}

func (x *CMsgIndividualPostMatchStats_Round) GetUnits() []*CMsgUnit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *CMsgIndividualPostMatchStats_Round) GetSynergies() []uint32 {
	if x != nil {
		return x.Synergies
	}
	return nil
}

func (x *CMsgIndividualPostMatchStats_Round) GetItems() []*CMsgItemSlot {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CMsgIndividualPostMatchStats_Round) GetGoldSpentOnRerolls() uint32 {
	if x != nil && x.GoldSpentOnRerolls != nil {
		return *x.GoldSpentOnRerolls
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetGoldEarned() uint32 {
	if x != nil && x.GoldEarned != nil {
		return *x.GoldEarned
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetInterestGoldEarned() uint32 {
	if x != nil && x.InterestGoldEarned != nil {
		return *x.InterestGoldEarned
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetStreakGoldEarned() uint32 {
	if x != nil && x.StreakGoldEarned != nil {
		return *x.StreakGoldEarned
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetVictory() uint32 {
	if x != nil && x.Victory != nil {
		return *x.Victory
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetXpEarned() uint32 {
	if x != nil && x.XpEarned != nil {
		return *x.XpEarned
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetHealth() uint32 {
	if x != nil && x.Health != nil {
		return *x.Health
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetRoundRanking() uint32 {
	if x != nil && x.RoundRanking != nil {
		return *x.RoundRanking
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetEnemyPlayerSlot() uint32 {
	if x != nil && x.EnemyPlayerSlot != nil {
		return *x.EnemyPlayerSlot
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetGoldSpentOnLevels() uint32 {
	if x != nil && x.GoldSpentOnLevels != nil {
		return *x.GoldSpentOnLevels
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetGoldSpentOnUnits() uint32 {
	if x != nil && x.GoldSpentOnUnits != nil {
		return *x.GoldSpentOnUnits
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetDamageDealtToUnits() uint32 {
	if x != nil && x.DamageDealtToUnits != nil {
		return *x.DamageDealtToUnits
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetVictoryLevel() uint32 {
	if x != nil && x.VictoryLevel != nil {
		return *x.VictoryLevel
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetDamageDealtToPlayer() uint32 {
	if x != nil && x.DamageDealtToPlayer != nil {
		return *x.DamageDealtToPlayer
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetEnemyUnderlord() uint32 {
	if x != nil && x.EnemyUnderlord != nil {
		return *x.EnemyUnderlord
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Round) GetUnderlordSelectedTalents() []uint32 {
	if x != nil {
		return x.UnderlordSelectedTalents
	}
	return nil
}

type CMsgIndividualPostMatchStats_Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId          *uint32 `protobuf:"varint,1,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	SequenceId      *uint32 `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	Progress        *uint32 `protobuf:"varint,3,opt,name=progress" json:"progress,omitempty"`
	InitialProgress *uint32 `protobuf:"varint,4,opt,name=initial_progress,json=initialProgress" json:"initial_progress,omitempty"`
	Claimed         *uint32 `protobuf:"varint,5,opt,name=claimed" json:"claimed,omitempty"`
}

func (x *CMsgIndividualPostMatchStats_Challenge) Reset() {
	*x = CMsgIndividualPostMatchStats_Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgIndividualPostMatchStats_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgIndividualPostMatchStats_Challenge) ProtoMessage() {}

func (x *CMsgIndividualPostMatchStats_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgIndividualPostMatchStats_Challenge.ProtoReflect.Descriptor instead.
func (*CMsgIndividualPostMatchStats_Challenge) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{26, 1}
}

func (x *CMsgIndividualPostMatchStats_Challenge) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Challenge) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Challenge) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Challenge) GetInitialProgress() uint32 {
	if x != nil && x.InitialProgress != nil {
		return *x.InitialProgress
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Challenge) GetClaimed() uint32 {
	if x != nil && x.Claimed != nil {
		return *x.Claimed
	}
	return 0
}

type CMsgIndividualPostMatchStats_Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyId    *uint32 `protobuf:"varint,1,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	InitialAmount *uint32 `protobuf:"varint,2,opt,name=initial_amount,json=initialAmount" json:"initial_amount,omitempty"`
	AmountGained  *uint32 `protobuf:"varint,3,opt,name=amount_gained,json=amountGained" json:"amount_gained,omitempty"`
}

func (x *CMsgIndividualPostMatchStats_Currency) Reset() {
	*x = CMsgIndividualPostMatchStats_Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgIndividualPostMatchStats_Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgIndividualPostMatchStats_Currency) ProtoMessage() {}

func (x *CMsgIndividualPostMatchStats_Currency) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgIndividualPostMatchStats_Currency.ProtoReflect.Descriptor instead.
func (*CMsgIndividualPostMatchStats_Currency) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{26, 2}
}

func (x *CMsgIndividualPostMatchStats_Currency) GetCurrencyId() uint32 {
	if x != nil && x.CurrencyId != nil {
		return *x.CurrencyId
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Currency) GetInitialAmount() uint32 {
	if x != nil && x.InitialAmount != nil {
		return *x.InitialAmount
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Currency) GetAmountGained() uint32 {
	if x != nil && x.AmountGained != nil {
		return *x.AmountGained
	}
	return 0
}

type CMsgIndividualPostMatchStats_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    *uint32                                   `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EventOwned *bool                                     `protobuf:"varint,2,opt,name=event_owned,json=eventOwned" json:"event_owned,omitempty"`
	EventTier  *uint32                                   `protobuf:"varint,3,opt,name=event_tier,json=eventTier" json:"event_tier,omitempty"`
	Challenges []*CMsgIndividualPostMatchStats_Challenge `protobuf:"bytes,4,rep,name=challenges" json:"challenges,omitempty"`
	Currencies []*CMsgIndividualPostMatchStats_Currency  `protobuf:"bytes,5,rep,name=currencies" json:"currencies,omitempty"`
}

func (x *CMsgIndividualPostMatchStats_Event) Reset() {
	*x = CMsgIndividualPostMatchStats_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgIndividualPostMatchStats_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgIndividualPostMatchStats_Event) ProtoMessage() {}

func (x *CMsgIndividualPostMatchStats_Event) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgIndividualPostMatchStats_Event.ProtoReflect.Descriptor instead.
func (*CMsgIndividualPostMatchStats_Event) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{26, 3}
}

func (x *CMsgIndividualPostMatchStats_Event) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Event) GetEventOwned() bool {
	if x != nil && x.EventOwned != nil {
		return *x.EventOwned
	}
	return false
}

func (x *CMsgIndividualPostMatchStats_Event) GetEventTier() uint32 {
	if x != nil && x.EventTier != nil {
		return *x.EventTier
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_Event) GetChallenges() []*CMsgIndividualPostMatchStats_Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

func (x *CMsgIndividualPostMatchStats_Event) GetCurrencies() []*CMsgIndividualPostMatchStats_Currency {
	if x != nil {
		return x.Currencies
	}
	return nil
}

type CMsgIndividualPostMatchStats_RankUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialLevelScore           *uint32  `protobuf:"varint,1,opt,name=initial_level_score,json=initialLevelScore" json:"initial_level_score,omitempty"`
	InitialLevel                *uint32  `protobuf:"varint,2,opt,name=initial_level,json=initialLevel" json:"initial_level,omitempty"`
	InitialLevelPartialProgress *float32 `protobuf:"fixed32,3,opt,name=initial_level_partial_progress,json=initialLevelPartialProgress" json:"initial_level_partial_progress,omitempty"`
	FinalLevelScore             *uint32  `protobuf:"varint,4,opt,name=final_level_score,json=finalLevelScore" json:"final_level_score,omitempty"`
	FinalLevel                  *uint32  `protobuf:"varint,5,opt,name=final_level,json=finalLevel" json:"final_level,omitempty"`
	FinalLevelPartialProgress   *float32 `protobuf:"fixed32,6,opt,name=final_level_partial_progress,json=finalLevelPartialProgress" json:"final_level_partial_progress,omitempty"`
	InitialLeaderboardPlace     *uint32  `protobuf:"varint,7,opt,name=initial_leaderboard_place,json=initialLeaderboardPlace" json:"initial_leaderboard_place,omitempty"`
}

func (x *CMsgIndividualPostMatchStats_RankUpdate) Reset() {
	*x = CMsgIndividualPostMatchStats_RankUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgIndividualPostMatchStats_RankUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgIndividualPostMatchStats_RankUpdate) ProtoMessage() {}

func (x *CMsgIndividualPostMatchStats_RankUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgIndividualPostMatchStats_RankUpdate.ProtoReflect.Descriptor instead.
func (*CMsgIndividualPostMatchStats_RankUpdate) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{26, 4}
}

func (x *CMsgIndividualPostMatchStats_RankUpdate) GetInitialLevelScore() uint32 {
	if x != nil && x.InitialLevelScore != nil {
		return *x.InitialLevelScore
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_RankUpdate) GetInitialLevel() uint32 {
	if x != nil && x.InitialLevel != nil {
		return *x.InitialLevel
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_RankUpdate) GetInitialLevelPartialProgress() float32 {
	if x != nil && x.InitialLevelPartialProgress != nil {
		return *x.InitialLevelPartialProgress
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_RankUpdate) GetFinalLevelScore() uint32 {
	if x != nil && x.FinalLevelScore != nil {
		return *x.FinalLevelScore
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_RankUpdate) GetFinalLevel() uint32 {
	if x != nil && x.FinalLevel != nil {
		return *x.FinalLevel
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_RankUpdate) GetFinalLevelPartialProgress() float32 {
	if x != nil && x.FinalLevelPartialProgress != nil {
		return *x.FinalLevelPartialProgress
	}
	return 0
}

func (x *CMsgIndividualPostMatchStats_RankUpdate) GetInitialLeaderboardPlace() uint32 {
	if x != nil && x.InitialLeaderboardPlace != nil {
		return *x.InitialLeaderboardPlace
	}
	return 0
}

type CMsgPrivatePlayerState_ItemChoiceReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardId *int32                                            `protobuf:"varint,1,req,name=reward_id,json=rewardId" json:"reward_id,omitempty"`
	Choices  []*CMsgPrivatePlayerState_ItemChoiceReward_Choice `protobuf:"bytes,2,rep,name=choices" json:"choices,omitempty"`
}

func (x *CMsgPrivatePlayerState_ItemChoiceReward) Reset() {
	*x = CMsgPrivatePlayerState_ItemChoiceReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPrivatePlayerState_ItemChoiceReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPrivatePlayerState_ItemChoiceReward) ProtoMessage() {}

func (x *CMsgPrivatePlayerState_ItemChoiceReward) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPrivatePlayerState_ItemChoiceReward.ProtoReflect.Descriptor instead.
func (*CMsgPrivatePlayerState_ItemChoiceReward) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{28, 0}
}

func (x *CMsgPrivatePlayerState_ItemChoiceReward) GetRewardId() int32 {
	if x != nil && x.RewardId != nil {
		return *x.RewardId
	}
	return 0
}

func (x *CMsgPrivatePlayerState_ItemChoiceReward) GetChoices() []*CMsgPrivatePlayerState_ItemChoiceReward_Choice {
	if x != nil {
		return x.Choices
	}
	return nil
}

type CMsgPrivatePlayerState_Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId          *uint32 `protobuf:"varint,1,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	SequenceId      *uint32 `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	Progress        *uint32 `protobuf:"varint,3,opt,name=progress" json:"progress,omitempty"`
	InitialProgress *uint32 `protobuf:"varint,4,opt,name=initial_progress,json=initialProgress" json:"initial_progress,omitempty"`
	Claimed         *uint32 `protobuf:"varint,5,opt,name=claimed" json:"claimed,omitempty"`
}

func (x *CMsgPrivatePlayerState_Challenge) Reset() {
	*x = CMsgPrivatePlayerState_Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPrivatePlayerState_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPrivatePlayerState_Challenge) ProtoMessage() {}

func (x *CMsgPrivatePlayerState_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPrivatePlayerState_Challenge.ProtoReflect.Descriptor instead.
func (*CMsgPrivatePlayerState_Challenge) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{28, 1}
}

func (x *CMsgPrivatePlayerState_Challenge) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgPrivatePlayerState_Challenge) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

func (x *CMsgPrivatePlayerState_Challenge) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CMsgPrivatePlayerState_Challenge) GetInitialProgress() uint32 {
	if x != nil && x.InitialProgress != nil {
		return *x.InitialProgress
	}
	return 0
}

func (x *CMsgPrivatePlayerState_Challenge) GetClaimed() uint32 {
	if x != nil && x.Claimed != nil {
		return *x.Claimed
	}
	return 0
}

type CMsgPrivatePlayerState_ItemChoiceReward_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId    *uint32 `protobuf:"varint,1,req,name=item_id,json=itemId" json:"item_id,omitempty"`
	Available *bool   `protobuf:"varint,2,opt,name=available" json:"available,omitempty"`
}

func (x *CMsgPrivatePlayerState_ItemChoiceReward_Choice) Reset() {
	*x = CMsgPrivatePlayerState_ItemChoiceReward_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPrivatePlayerState_ItemChoiceReward_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPrivatePlayerState_ItemChoiceReward_Choice) ProtoMessage() {}

func (x *CMsgPrivatePlayerState_ItemChoiceReward_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPrivatePlayerState_ItemChoiceReward_Choice.ProtoReflect.Descriptor instead.
func (*CMsgPrivatePlayerState_ItemChoiceReward_Choice) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{28, 0, 0}
}

func (x *CMsgPrivatePlayerState_ItemChoiceReward_Choice) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgPrivatePlayerState_ItemChoiceReward_Choice) GetAvailable() bool {
	if x != nil && x.Available != nil {
		return *x.Available
	}
	return false
}

type CMsgMatchState_TeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyTeam            *EDACLobbyTeam `protobuf:"varint,1,opt,name=lobby_team,json=lobbyTeam,enum=underlords.EDACLobbyTeam,def=0" json:"lobby_team,omitempty"`
	TeamName             *string        `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamMmrLevel         *uint32        `protobuf:"varint,3,opt,name=team_mmr_level,json=teamMmrLevel" json:"team_mmr_level,omitempty"`
	TeamLeaderboardPlace *uint32        `protobuf:"varint,4,opt,name=team_leaderboard_place,json=teamLeaderboardPlace" json:"team_leaderboard_place,omitempty"`
}

// Default values for CMsgMatchState_TeamInfo fields.
const (
	Default_CMsgMatchState_TeamInfo_LobbyTeam = EDACLobbyTeam_k_EDACLobbyTeam_Team0
)

func (x *CMsgMatchState_TeamInfo) Reset() {
	*x = CMsgMatchState_TeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchState_TeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchState_TeamInfo) ProtoMessage() {}

func (x *CMsgMatchState_TeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchState_TeamInfo.ProtoReflect.Descriptor instead.
func (*CMsgMatchState_TeamInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{29, 0}
}

func (x *CMsgMatchState_TeamInfo) GetLobbyTeam() EDACLobbyTeam {
	if x != nil && x.LobbyTeam != nil {
		return *x.LobbyTeam
	}
	return Default_CMsgMatchState_TeamInfo_LobbyTeam
}

func (x *CMsgMatchState_TeamInfo) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgMatchState_TeamInfo) GetTeamMmrLevel() uint32 {
	if x != nil && x.TeamMmrLevel != nil {
		return *x.TeamMmrLevel
	}
	return 0
}

func (x *CMsgMatchState_TeamInfo) GetTeamLeaderboardPlace() uint32 {
	if x != nil && x.TeamLeaderboardPlace != nil {
		return *x.TeamLeaderboardPlace
	}
	return 0
}

type CMsgGameModeState_Puzzle_ActiveRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule         *EDACPuzzleRule `protobuf:"varint,1,opt,name=rule,enum=underlords.EDACPuzzleRule,def=0" json:"rule,omitempty"`
	Satisfied    *bool           `protobuf:"varint,2,opt,name=satisfied" json:"satisfied,omitempty"`
	Constraints  []int32         `protobuf:"varint,3,rep,packed,name=constraints" json:"constraints,omitempty"`
	CurrentValue *int32          `protobuf:"varint,4,opt,name=current_value,json=currentValue" json:"current_value,omitempty"`
}

// Default values for CMsgGameModeState_Puzzle_ActiveRule fields.
const (
	Default_CMsgGameModeState_Puzzle_ActiveRule_Rule = EDACPuzzleRule_k_EDACPuzzleRule_None
)

func (x *CMsgGameModeState_Puzzle_ActiveRule) Reset() {
	*x = CMsgGameModeState_Puzzle_ActiveRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameModeState_Puzzle_ActiveRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameModeState_Puzzle_ActiveRule) ProtoMessage() {}

func (x *CMsgGameModeState_Puzzle_ActiveRule) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameModeState_Puzzle_ActiveRule.ProtoReflect.Descriptor instead.
func (*CMsgGameModeState_Puzzle_ActiveRule) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{36, 0}
}

func (x *CMsgGameModeState_Puzzle_ActiveRule) GetRule() EDACPuzzleRule {
	if x != nil && x.Rule != nil {
		return *x.Rule
	}
	return Default_CMsgGameModeState_Puzzle_ActiveRule_Rule
}

func (x *CMsgGameModeState_Puzzle_ActiveRule) GetSatisfied() bool {
	if x != nil && x.Satisfied != nil {
		return *x.Satisfied
	}
	return false
}

func (x *CMsgGameModeState_Puzzle_ActiveRule) GetConstraints() []int32 {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *CMsgGameModeState_Puzzle_ActiveRule) GetCurrentValue() int32 {
	if x != nil && x.CurrentValue != nil {
		return *x.CurrentValue
	}
	return 0
}

type CMsgCombatDebugSnapshot_PathfindingCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserved      *bool  `protobuf:"varint,1,req,name=reserved" json:"reserved,omitempty"`
	OwnerEntindex *int32 `protobuf:"varint,2,opt,name=owner_entindex,json=ownerEntindex" json:"owner_entindex,omitempty"`
}

func (x *CMsgCombatDebugSnapshot_PathfindingCell) Reset() {
	*x = CMsgCombatDebugSnapshot_PathfindingCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatDebugSnapshot_PathfindingCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatDebugSnapshot_PathfindingCell) ProtoMessage() {}

func (x *CMsgCombatDebugSnapshot_PathfindingCell) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatDebugSnapshot_PathfindingCell.ProtoReflect.Descriptor instead.
func (*CMsgCombatDebugSnapshot_PathfindingCell) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{51, 0}
}

func (x *CMsgCombatDebugSnapshot_PathfindingCell) GetReserved() bool {
	if x != nil && x.Reserved != nil {
		return *x.Reserved
	}
	return false
}

func (x *CMsgCombatDebugSnapshot_PathfindingCell) GetOwnerEntindex() int32 {
	if x != nil && x.OwnerEntindex != nil {
		return *x.OwnerEntindex
	}
	return 0
}

type CMsgCombatDebugSnapshot_ActivePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerEntindex     *int32          `protobuf:"varint,1,opt,name=owner_entindex,json=ownerEntindex" json:"owner_entindex,omitempty"`
	PathWaypoints     []*CMsgPosition `protobuf:"bytes,2,rep,name=path_waypoints,json=pathWaypoints" json:"path_waypoints,omitempty"`
	PathWaypointIndex *int32          `protobuf:"varint,3,opt,name=path_waypoint_index,json=pathWaypointIndex" json:"path_waypoint_index,omitempty"`
}

func (x *CMsgCombatDebugSnapshot_ActivePath) Reset() {
	*x = CMsgCombatDebugSnapshot_ActivePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCombatDebugSnapshot_ActivePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCombatDebugSnapshot_ActivePath) ProtoMessage() {}

func (x *CMsgCombatDebugSnapshot_ActivePath) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCombatDebugSnapshot_ActivePath.ProtoReflect.Descriptor instead.
func (*CMsgCombatDebugSnapshot_ActivePath) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{51, 1}
}

func (x *CMsgCombatDebugSnapshot_ActivePath) GetOwnerEntindex() int32 {
	if x != nil && x.OwnerEntindex != nil {
		return *x.OwnerEntindex
	}
	return 0
}

func (x *CMsgCombatDebugSnapshot_ActivePath) GetPathWaypoints() []*CMsgPosition {
	if x != nil {
		return x.PathWaypoints
	}
	return nil
}

func (x *CMsgCombatDebugSnapshot_ActivePath) GetPathWaypointIndex() int32 {
	if x != nil && x.PathWaypointIndex != nil {
		return *x.PathWaypointIndex
	}
	return 0
}

type CMsgRoundCombatGlobal_EventList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*CMsgCombatEvent `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (x *CMsgRoundCombatGlobal_EventList) Reset() {
	*x = CMsgRoundCombatGlobal_EventList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRoundCombatGlobal_EventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRoundCombatGlobal_EventList) ProtoMessage() {}

func (x *CMsgRoundCombatGlobal_EventList) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRoundCombatGlobal_EventList.ProtoReflect.Descriptor instead.
func (*CMsgRoundCombatGlobal_EventList) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{74, 0}
}

func (x *CMsgRoundCombatGlobal_EventList) GetEvents() []*CMsgCombatEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type CMsgRoundCombatGlobal_CombatPlayerSlotToEventsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *uint32                          `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	Value *CMsgRoundCombatGlobal_EventList `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgRoundCombatGlobal_CombatPlayerSlotToEventsEntry) Reset() {
	*x = CMsgRoundCombatGlobal_CombatPlayerSlotToEventsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRoundCombatGlobal_CombatPlayerSlotToEventsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRoundCombatGlobal_CombatPlayerSlotToEventsEntry) ProtoMessage() {}

func (x *CMsgRoundCombatGlobal_CombatPlayerSlotToEventsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRoundCombatGlobal_CombatPlayerSlotToEventsEntry.ProtoReflect.Descriptor instead.
func (*CMsgRoundCombatGlobal_CombatPlayerSlotToEventsEntry) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{74, 1}
}

func (x *CMsgRoundCombatGlobal_CombatPlayerSlotToEventsEntry) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *CMsgRoundCombatGlobal_CombatPlayerSlotToEventsEntry) GetValue() *CMsgRoundCombatGlobal_EventList {
	if x != nil {
		return x.Value
	}
	return nil
}

type CMsgClientConnectionStarted_GameConstants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameModeSettings           *CMsgGameModeSettings                                    `protobuf:"bytes,1,opt,name=game_mode_settings,json=gameModeSettings" json:"game_mode_settings,omitempty"`
	PlayerExperienceTable      []int32                                                  `protobuf:"varint,2,rep,name=player_experience_table,json=playerExperienceTable" json:"player_experience_table,omitempty"`
	ExperiencePurchaseGoldCost *int32                                                   `protobuf:"varint,3,opt,name=experience_purchase_gold_cost,json=experiencePurchaseGoldCost" json:"experience_purchase_gold_cost,omitempty"`
	ExperiencePurchaseAmount   *int32                                                   `protobuf:"varint,4,opt,name=experience_purchase_amount,json=experiencePurchaseAmount" json:"experience_purchase_amount,omitempty"`
	UnitTierChances            []*CMsgClientConnectionStarted_GameConstants_UnitChances `protobuf:"bytes,5,rep,name=unit_tier_chances,json=unitTierChances" json:"unit_tier_chances,omitempty"`
	MaxInterestGold            *int32                                                   `protobuf:"varint,6,opt,name=max_interest_gold,json=maxInterestGold" json:"max_interest_gold,omitempty"`
	InterestGoldDivisor        *int32                                                   `protobuf:"varint,7,opt,name=interest_gold_divisor,json=interestGoldDivisor" json:"interest_gold_divisor,omitempty"`
	WinMattersForItemRewards   *bool                                                    `protobuf:"varint,8,opt,name=win_matters_for_item_rewards,json=winMattersForItemRewards" json:"win_matters_for_item_rewards,omitempty"`
	LootRoundNumbers           []int32                                                  `protobuf:"varint,9,rep,name=loot_round_numbers,json=lootRoundNumbers" json:"loot_round_numbers,omitempty"`
	HasNeutralRounds           *bool                                                    `protobuf:"varint,10,opt,name=has_neutral_rounds,json=hasNeutralRounds" json:"has_neutral_rounds,omitempty"`
	UnderlordSelectionRound    *int32                                                   `protobuf:"varint,11,opt,name=underlord_selection_round,json=underlordSelectionRound" json:"underlord_selection_round,omitempty"`
	KillMultiplier             *float32                                                 `protobuf:"fixed32,12,opt,name=kill_multiplier,json=killMultiplier" json:"kill_multiplier,omitempty"`
	PrestigeLevel              *uint32                                                  `protobuf:"varint,13,opt,name=prestige_level,json=prestigeLevel" json:"prestige_level,omitempty"`
}

func (x *CMsgClientConnectionStarted_GameConstants) Reset() {
	*x = CMsgClientConnectionStarted_GameConstants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientConnectionStarted_GameConstants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientConnectionStarted_GameConstants) ProtoMessage() {}

func (x *CMsgClientConnectionStarted_GameConstants) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientConnectionStarted_GameConstants.ProtoReflect.Descriptor instead.
func (*CMsgClientConnectionStarted_GameConstants) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{78, 0}
}

func (x *CMsgClientConnectionStarted_GameConstants) GetGameModeSettings() *CMsgGameModeSettings {
	if x != nil {
		return x.GameModeSettings
	}
	return nil
}

func (x *CMsgClientConnectionStarted_GameConstants) GetPlayerExperienceTable() []int32 {
	if x != nil {
		return x.PlayerExperienceTable
	}
	return nil
}

func (x *CMsgClientConnectionStarted_GameConstants) GetExperiencePurchaseGoldCost() int32 {
	if x != nil && x.ExperiencePurchaseGoldCost != nil {
		return *x.ExperiencePurchaseGoldCost
	}
	return 0
}

func (x *CMsgClientConnectionStarted_GameConstants) GetExperiencePurchaseAmount() int32 {
	if x != nil && x.ExperiencePurchaseAmount != nil {
		return *x.ExperiencePurchaseAmount
	}
	return 0
}

func (x *CMsgClientConnectionStarted_GameConstants) GetUnitTierChances() []*CMsgClientConnectionStarted_GameConstants_UnitChances {
	if x != nil {
		return x.UnitTierChances
	}
	return nil
}

func (x *CMsgClientConnectionStarted_GameConstants) GetMaxInterestGold() int32 {
	if x != nil && x.MaxInterestGold != nil {
		return *x.MaxInterestGold
	}
	return 0
}

func (x *CMsgClientConnectionStarted_GameConstants) GetInterestGoldDivisor() int32 {
	if x != nil && x.InterestGoldDivisor != nil {
		return *x.InterestGoldDivisor
	}
	return 0
}

func (x *CMsgClientConnectionStarted_GameConstants) GetWinMattersForItemRewards() bool {
	if x != nil && x.WinMattersForItemRewards != nil {
		return *x.WinMattersForItemRewards
	}
	return false
}

func (x *CMsgClientConnectionStarted_GameConstants) GetLootRoundNumbers() []int32 {
	if x != nil {
		return x.LootRoundNumbers
	}
	return nil
}

func (x *CMsgClientConnectionStarted_GameConstants) GetHasNeutralRounds() bool {
	if x != nil && x.HasNeutralRounds != nil {
		return *x.HasNeutralRounds
	}
	return false
}

func (x *CMsgClientConnectionStarted_GameConstants) GetUnderlordSelectionRound() int32 {
	if x != nil && x.UnderlordSelectionRound != nil {
		return *x.UnderlordSelectionRound
	}
	return 0
}

func (x *CMsgClientConnectionStarted_GameConstants) GetKillMultiplier() float32 {
	if x != nil && x.KillMultiplier != nil {
		return *x.KillMultiplier
	}
	return 0
}

func (x *CMsgClientConnectionStarted_GameConstants) GetPrestigeLevel() uint32 {
	if x != nil && x.PrestigeLevel != nil {
		return *x.PrestigeLevel
	}
	return 0
}

type CMsgClientConnectionStarted_GameManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefinitionSet *uint32 `protobuf:"varint,1,opt,name=definition_set,json=definitionSet" json:"definition_set,omitempty"`
}

func (x *CMsgClientConnectionStarted_GameManager) Reset() {
	*x = CMsgClientConnectionStarted_GameManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientConnectionStarted_GameManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientConnectionStarted_GameManager) ProtoMessage() {}

func (x *CMsgClientConnectionStarted_GameManager) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientConnectionStarted_GameManager.ProtoReflect.Descriptor instead.
func (*CMsgClientConnectionStarted_GameManager) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{78, 1}
}

func (x *CMsgClientConnectionStarted_GameManager) GetDefinitionSet() uint32 {
	if x != nil && x.DefinitionSet != nil {
		return *x.DefinitionSet
	}
	return 0
}

type CMsgClientConnectionStarted_GameConstants_UnitChances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chance []float32 `protobuf:"fixed32,1,rep,name=chance" json:"chance,omitempty"`
}

func (x *CMsgClientConnectionStarted_GameConstants_UnitChances) Reset() {
	*x = CMsgClientConnectionStarted_GameConstants_UnitChances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientConnectionStarted_GameConstants_UnitChances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientConnectionStarted_GameConstants_UnitChances) ProtoMessage() {}

func (x *CMsgClientConnectionStarted_GameConstants_UnitChances) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientConnectionStarted_GameConstants_UnitChances.ProtoReflect.Descriptor instead.
func (*CMsgClientConnectionStarted_GameConstants_UnitChances) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{78, 0, 0}
}

func (x *CMsgClientConnectionStarted_GameConstants_UnitChances) GetChance() []float32 {
	if x != nil {
		return x.Chance
	}
	return nil
}

type CMsgModifierName_Modifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModifierId   *uint32 `protobuf:"varint,1,req,name=modifier_id,json=modifierId" json:"modifier_id,omitempty"`
	ModifierName *string `protobuf:"bytes,2,req,name=modifier_name,json=modifierName" json:"modifier_name,omitempty"`
}

func (x *CMsgModifierName_Modifier) Reset() {
	*x = CMsgModifierName_Modifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgModifierName_Modifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgModifierName_Modifier) ProtoMessage() {}

func (x *CMsgModifierName_Modifier) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgModifierName_Modifier.ProtoReflect.Descriptor instead.
func (*CMsgModifierName_Modifier) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{83, 0}
}

func (x *CMsgModifierName_Modifier) GetModifierId() uint32 {
	if x != nil && x.ModifierId != nil {
		return *x.ModifierId
	}
	return 0
}

func (x *CMsgModifierName_Modifier) GetModifierName() string {
	if x != nil && x.ModifierName != nil {
		return *x.ModifierName
	}
	return ""
}

type CMsgServerToClientNotificationChanged_UpvoteSubtype struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId  *uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	Upvotes *uint32 `protobuf:"varint,2,opt,name=upvotes" json:"upvotes,omitempty"`
}

func (x *CMsgServerToClientNotificationChanged_UpvoteSubtype) Reset() {
	*x = CMsgServerToClientNotificationChanged_UpvoteSubtype{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToClientNotificationChanged_UpvoteSubtype) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToClientNotificationChanged_UpvoteSubtype) ProtoMessage() {}

func (x *CMsgServerToClientNotificationChanged_UpvoteSubtype) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToClientNotificationChanged_UpvoteSubtype.ProtoReflect.Descriptor instead.
func (*CMsgServerToClientNotificationChanged_UpvoteSubtype) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{96, 0}
}

func (x *CMsgServerToClientNotificationChanged_UpvoteSubtype) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgServerToClientNotificationChanged_UpvoteSubtype) GetUpvotes() uint32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

type CMsgClientToServerLocalPlayerInventory_LoadoutItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot     *uint32 `protobuf:"varint,1,opt,name=slot" json:"slot,omitempty"`
	SubSlot  *uint32 `protobuf:"varint,2,opt,name=sub_slot,json=subSlot" json:"sub_slot,omitempty"`
	DefIndex *uint32 `protobuf:"varint,3,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
}

func (x *CMsgClientToServerLocalPlayerInventory_LoadoutItem) Reset() {
	*x = CMsgClientToServerLocalPlayerInventory_LoadoutItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gamemessages_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientToServerLocalPlayerInventory_LoadoutItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToServerLocalPlayerInventory_LoadoutItem) ProtoMessage() {}

func (x *CMsgClientToServerLocalPlayerInventory_LoadoutItem) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gamemessages_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToServerLocalPlayerInventory_LoadoutItem.ProtoReflect.Descriptor instead.
func (*CMsgClientToServerLocalPlayerInventory_LoadoutItem) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gamemessages_proto_rawDescGZIP(), []int{97, 0}
}

func (x *CMsgClientToServerLocalPlayerInventory_LoadoutItem) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CMsgClientToServerLocalPlayerInventory_LoadoutItem) GetSubSlot() uint32 {
	if x != nil && x.SubSlot != nil {
		return *x.SubSlot
	}
	return 0
}

func (x *CMsgClientToServerLocalPlayerInventory_LoadoutItem) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

var File_underlords_dac_gamemessages_proto protoreflect.FileDescriptor

var file_underlords_dac_gamemessages_proto_rawDesc = []byte{
	0x0a, 0x21, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x64, 0x61, 0x63,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x1a,
	0x1e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x26, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x64, 0x61, 0x63, 0x5f,
	0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x02, 0x0a, 0x14, 0x43, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x64, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75,
	0x64, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x75,
	0x64, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x64, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x9b, 0x01, 0x0a,
	0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64,
	0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74,
	0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x0f, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x15, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x6c, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x70, 0x6f, 0x6f, 0x66, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70, 0x6f, 0x6f, 0x66, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x34,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x35, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x36, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x36,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x31, 0x22, 0x39, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64,
	0x22, 0xd5, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6f, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x75, 0x6f,
	0x73, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x22, 0x7b, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x6c, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x44, 0x75, 0x6f, 0x73, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x64,
	0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xda, 0x07, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x4f, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x17, 0x45, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x44, 0x72, 0x61, 0x77, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x12, 0x56, 0x0a, 0x0e, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x65, 0x67, 0x69,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x65,
	0x67, 0x69, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x0d, 0x76, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x1f,
	0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x76, 0x65, 0x52,
	0x0c, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a,
	0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x67, 0x6f, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67,
	0x6f, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x26, 0x0a,
	0x0f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x67, 0x6f, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6f, 0x6c, 0x64,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x6f, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x69, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x6f, 0x70, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x70, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x57, 0x61, 0x76, 0x65, 0x1a, 0xb0,
	0x01, 0x0a, 0x0c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x19, 0x6b, 0x5f,
	0x45, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x84, 0x01,
	0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x14, 0x43, 0x4d,
	0x73, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x6c, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x77, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x70,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x27, 0x0a, 0x10, 0x77, 0x61, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x61, 0x73, 0x48,
	0x65, 0x61, 0x64, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x22, 0x2a, 0x0a, 0x0c, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x01, 0x79, 0x22, 0x8b, 0x05, 0x0a, 0x08, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x12, 0x34, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x75, 0x65, 0x6c, 0x5f,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x64, 0x75, 0x65, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x74,
	0x43, 0x61, 0x70, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x74, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63,
	0x61, 0x6e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x12, 0x1e, 0x0a,
	0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x3a, 0x0a,
	0x19, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x0c, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x68, 0x6f, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x16, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x77,
	0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x77,
	0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x54, 0x77, 0x6f, 0x53, 0x74, 0x61,
	0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x77, 0x69,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x77, 0x69,
	0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x62, 0x0a, 0x0f, 0x43, 0x4d, 0x73,
	0x67, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x55, 0x6e, 0x69,
	0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x73, 0x22, 0x5b, 0x0a,
	0x1b, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x50, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x0b, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x79, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x48, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x14, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4a, 0x0a, 0x22, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x0c,
	0x43, 0x4d, 0x73, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x6e,
	0x69, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x58, 0x0a, 0x0e, 0x43, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x75, 0x64, 0x64, 0x79, 0x12, 0x22, 0x0a, 0x0d,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x58,
	0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x5f,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x50, 0x6f, 0x73, 0x59, 0x22, 0x66, 0x0a, 0x0b, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x22, 0xcd, 0x16, 0x0a,
	0x15, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x21, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f,
	0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x78, 0x70, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c,
	0x6f, 0x74, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x2a, 0x0a,
	0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x78, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x58, 0x70, 0x12, 0x35,
	0x0a, 0x09, 0x73, 0x79, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x79, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x65,
	0x72, 0x67, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72,
	0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x69, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x76,
	0x73, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x73, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x73, 0x5f, 0x6f, 0x70, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x76, 0x73, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x73, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x76, 0x73, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x61, 0x77, 0x73, 0x12,
	0x49, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45,
	0x44, 0x41, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x13, 0x6b, 0x5f, 0x65,
	0x44, 0x41, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x4e, 0x6f, 0x6e, 0x65,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x69, 0x6e, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x54, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x6f,
	0x75, 0x74, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x6f, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f,
	0x72, 0x74, 0x68, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x52, 0x09,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x48, 0x0a, 0x21, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x75, 0x74, 0x72,
	0x61, 0x6c, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6e,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x57, 0x61, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55, 0x6e, 0x69,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x19, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x62, 0x75, 0x64, 0x64, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x42, 0x75, 0x64, 0x64, 0x79, 0x52, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42,
	0x75, 0x64, 0x64, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x38, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x70, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x62, 0x72, 0x61, 0x77, 0x6e, 0x79, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x62, 0x72, 0x61, 0x77, 0x6e, 0x79,
	0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77,
	0x6e, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6f, 0x77, 0x6e, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x69, 0x74, 0x79, 0x50, 0x72, 0x65, 0x73,
	0x74, 0x69, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x74, 0x61,
	0x74, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x73, 0x74, 0x61, 0x74, 0x42, 0x65, 0x73, 0x74, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x5f,
	0x62, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x65, 0x74,
	0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73,
	0x74, 0x61, 0x74, 0x42, 0x65, 0x73, 0x74, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x5a, 0x0a, 0x2a, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x62,
	0x65, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x25, 0x73, 0x74, 0x61,
	0x74, 0x42, 0x65, 0x73, 0x74, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0xee, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x74, 0x61, 0x74, 0x42, 0x65, 0x73, 0x74, 0x56, 0x69,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x74,
	0x61, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x73, 0x74, 0x61, 0x74, 0x50, 0x72, 0x65, 0x76, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x65,
	0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x73, 0x74, 0x61, 0x74, 0x50, 0x72, 0x65, 0x76, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4e,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x5a, 0x0a, 0x2a, 0x73, 0x74, 0x61, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x25, 0x73, 0x74,
	0x61, 0x74, 0x50, 0x72, 0x65, 0x76, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0xef,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x74, 0x61, 0x74, 0x50, 0x72, 0x65, 0x76, 0x56,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x6f,
	0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x70, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x75, 0x74,
	0x72, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x13, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61,
	0x6c, 0x57, 0x61, 0x76, 0x65, 0x1a, 0x59, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x62, 0x53,
	0x6c, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x42, 0x0a, 0x0a, 0x08, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0xb8, 0x07, 0x0a,
	0x18, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x1a, 0xe0, 0x02, 0x0a,
	0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x2a,
	0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79,
	0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x79, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x74,
	0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x1a,
	0xb5, 0x03, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f,
	0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65, 0x72, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x48, 0x75, 0x6d, 0x61,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6d,
	0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d,
	0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x30, 0x52, 0x09, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x22, 0xcf, 0x14, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67,
	0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x75, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49,
	0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x16, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x14, 0x69, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x5d, 0x0a, 0x10, 0x64, 0x75, 0x6f, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0e, 0x64, 0x75, 0x6f, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x4d, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x16, 0x6b, 0x5f,
	0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x51,
	0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x17, 0x6b,
	0x5f, 0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x5e, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x42, 0x6f, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43,
	0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x1a, 0xd3, 0x06, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x05,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x65,
	0x72, 0x67, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x79, 0x6e,
	0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73,
	0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74,
	0x4f, 0x6e, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6c,
	0x64, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x67, 0x6f, 0x6c, 0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x47, 0x6f, 0x6c, 0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x69, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x78, 0x70, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x78, 0x70, 0x45, 0x61, 0x72, 0x6e, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x65, 0x6d,
	0x79, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x65, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74,
	0x54, 0x6f, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x16,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x65, 0x6d,
	0x79, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xa6, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x1a, 0x77, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x67, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x47, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x1a, 0x89, 0x02, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x65, 0x72, 0x12,
	0x52, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x50,
	0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0xf0, 0x02, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x1c,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x19, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x43, 0x0a, 0x15, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61,
	0x75, 0x74, 0x6f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0xcd,
	0x0b, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x6e,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x75, 0x6e, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x6b, 0x0a, 0x17, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x15, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x55, 0x6e,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x37,
	0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x70, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x6f, 0x6c, 0x64, 0x5f,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x67, 0x6f, 0x6c, 0x64, 0x45, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x54, 0x68, 0x69, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x70, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x3a, 0x10, 0x45, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x4e, 0x6f, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x18, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x75, 0x73, 0x65, 0x64, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54,
	0x75, 0x72, 0x62, 0x6f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0c, 0x74, 0x75, 0x72, 0x62,
	0x6f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x12, 0x63, 0x0a, 0x19, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x49, 0x0a, 0x22, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x75, 0x73, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x72, 0x6f, 0x6c,
	0x6c, 0x54, 0x68, 0x69, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0xc6, 0x01, 0x0a, 0x10, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x07,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0xa6, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x22, 0x60, 0x0a, 0x0d,
	0x45, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x4e,
	0x6f, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x59, 0x65, 0x73, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x4e, 0x6f, 0x4c, 0x6f,
	0x6e, 0x67, 0x65, 0x72, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x22, 0x84,
	0x06, 0x0a, 0x0e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x47, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x10, 0x45,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x52,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x15, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x1a, 0xd4,
	0x01, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x0a, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41,
	0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x44,
	0x41, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54, 0x65, 0x61, 0x6d,
	0x30, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x34, 0x0a, 0x16, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x22, 0x60, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x12, 0x45, 0x0a, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x22, 0x97, 0x02, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x75, 0x6f, 0x73,
	0x5f, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x70, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x65, 0x61, 0x6d, 0x6d,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xad, 0x01,
	0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x44, 0x75, 0x6f, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12,
	0x4c, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x75, 0x6f, 0x73, 0x5f, 0x54, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4d, 0x0a,
	0x20, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x54, 0x65, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x41, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x4d, 0x0a, 0x19,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0xeb, 0x03, 0x0a, 0x18,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x73,
	0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x61, 0x74, 0x69, 0x73,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74,
	0x44, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0xbc, 0x01, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x3a, 0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7e, 0x0a, 0x1a, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x54,
	0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x78, 0x0a, 0x1d, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x66, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x66, 0x69, 0x67, 0x68, 0x74, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x6c, 0x6f, 0x74, 0x22, 0x2c, 0x0a, 0x11, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x22, 0xf1, 0x02, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x12,
	0x5a, 0x0a, 0x0d, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0c, 0x64,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x11, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52,
	0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e,
	0x6f, 0x6e, 0x65, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x91, 0x06, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x0d, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x5f, 0x64, 0x75, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x75, 0x6f, 0x73,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x75, 0x6f, 0x73, 0x12,
	0x67, 0x0a, 0x18, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x54, 0x65, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x41, 0x48,
	0x00, 0x52, 0x15, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x54, 0x65, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x41, 0x12, 0x50, 0x0a, 0x0f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x5f, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x12, 0x4d, 0x0a, 0x0e, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x5f, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x5c,
	0x0a, 0x13, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x66, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x66, 0x69, 0x67, 0x68, 0x74, 0x12, 0x50, 0x0a, 0x0f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x3c, 0x0a, 0x10, 0x43, 0x4d, 0x73,
	0x67, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x57, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x79,
	0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x10,
	0x0a, 0x03, 0x79, 0x61, 0x77, 0x18, 0x04, 0x20, 0x02, 0x28, 0x02, 0x52, 0x03, 0x79, 0x61, 0x77,
	0x22, 0x5f, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x22, 0x82, 0x0d, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x55, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x12, 0x3a, 0x0a, 0x19, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x46, 0x0a, 0x08, 0x61,
	0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x55, 0x6e, 0x69, 0x74,
	0x41, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x11, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x49,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x64, 0x6c, 0x65, 0x52, 0x07, 0x61, 0x69, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x6f,
	0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x52, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e,
	0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x75, 0x6d, 0x6d,
	0x6f, 0x6e, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x75, 0x65, 0x6c,
	0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x75, 0x65, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d,
	0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x75, 0x6c, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x10, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x66, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x62, 0x69, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x62, 0x61, 0x72, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x69, 0x67, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x62, 0x61, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x64, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x53, 0x6f, 0x6c, 0x64,
	0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4b, 0x69, 0x6c,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x18, 0xea,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x4f,
	0x6e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x22, 0xd2, 0x01, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x61, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73,
	0x70, 0x65, 0x6c, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x65, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x74, 0x65, 0x6d,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x22, 0x3b, 0x0a, 0x13, 0x43,
	0x4d, 0x73, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x18, 0x43, 0x4d, 0x73,
	0x67, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x75, 0x72, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x6b, 0x65, 0x6e, 0x22, 0xc7, 0x06, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e,
	0x69, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x6e,
	0x69, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x65, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c,
	0x74, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x47,
	0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68,
	0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x61, 0x74,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44,
	0x65, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x51, 0x0a, 0x14, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x12, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x51, 0x0a,
	0x14, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x12, 0x68, 0x65,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61,
	0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x12, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x14,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x69, 0x74,
	0x4d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x12, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x78, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x4d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x02, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0xcb, 0x03, 0x0a, 0x17, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x60, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x10, 0x70, 0x61, 0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x54, 0x0a, 0x0f, 0x50, 0x61,
	0x74, 0x68, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x1a, 0xa4, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x25, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x57, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x74, 0x68, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb9, 0x01, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x22, 0x50, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x36, 0x0a,
	0x17, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c, 0x65,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0x5e, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x45,
	0x76, 0x61, 0x64, 0x65, 0x64, 0x22, 0x42, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x65, 0x61,
	0x74, 0x68, 0x22, 0x40, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x55, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54,
	0x6f, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x22, 0x87, 0x01, 0x0a, 0x1b, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x63, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x63, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x48,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x22, 0xaf, 0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x4e, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x9e, 0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f,
	0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47,
	0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x66, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x61, 0x64, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x66,
	0x61, 0x64, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f,
	0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x47, 0x65,
	0x73, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x22, 0x44, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0f, 0x72, 0x61, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x4f, 0x75,
	0x74, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x22, 0x3c, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x61, 0x73, 0x74, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0x82, 0x0e, 0x0a, 0x0f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4b, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x12, 0x4b, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f,
	0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x48, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x65, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0c, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x65, 0x61, 0x74, 0x68, 0x12, 0x5b, 0x0a, 0x14, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x58, 0x0a, 0x13, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x16, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x64, 0x0a, 0x17, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x15, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x48, 0x00, 0x52, 0x16, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12,
	0x5e, 0x0a, 0x15, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x13, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x5e, 0x0a, 0x15, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x13, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12,
	0x5b, 0x0a, 0x14, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x15,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x15,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x65,
	0x76, 0x61, 0x64, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x45,
	0x76, 0x61, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x61, 0x64, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x16,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f,
	0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x54, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x61,
	0x73, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x43, 0x61, 0x73, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x5b, 0x0a, 0x14, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x47,
	0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x53, 0x74, 0x6f, 0x70, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x5a, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15, 0x45, 0x44, 0x41, 0x43, 0x49, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0d, 0x68, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x64, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xed, 0x05, 0x0a, 0x0f, 0x43, 0x4d,
	0x73, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x49, 0x6e, 0x74, 0x72, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x19, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x16, 0x61, 0x64, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x17, 0x45, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x44, 0x72, 0x61, 0x77, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x48, 0x69, 0x67,
	0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x6f, 0x70, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x76, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x57, 0x61, 0x76, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x0a, 0x43, 0x4d,
	0x73, 0x67, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x62, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x22, 0xf3, 0x02,
	0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x7f, 0x0a, 0x1c, 0x63, 0x6f,
	0x6d, 0x62, 0x61, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x54, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x6c, 0x6f, 0x74, 0x54, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x40, 0x0a, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x74, 0x0a,
	0x1d, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f,
	0x74, 0x54, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4c,
	0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x17, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa0, 0x03, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x4e,
	0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x69, 0x66, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5d, 0x0a, 0x0f,
	0x6e, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x4e, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x3a, 0x1a, 0x6b, 0x5f, 0x65, 0x44, 0x41, 0x43, 0x4e, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6e, 0x65,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e,
	0x65, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x14, 0x43, 0x4d,
	0x73, 0x67, 0x4e, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x12, 0x5d, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x4e, 0x65, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x3a, 0x1a, 0x6b, 0x5f, 0x65, 0x44, 0x41, 0x43, 0x4e, 0x65,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9c, 0x0b, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x6e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14,
	0x69, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45,
	0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x17, 0x6b, 0x5f,
	0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x4d, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x16, 0x6b,
	0x5f, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x5c, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x0d,
	0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x56, 0x0a,
	0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a, 0xb6, 0x06, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x41, 0x0a, 0x1d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x6d, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0f,
	0x75, 0x6e, 0x69, 0x74, 0x54, 0x69, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f,
	0x67, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x44, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12,
	0x3e, 0x0a, 0x1c, 0x77, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x77, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x73, 0x46, 0x6f, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x6f, 0x6f,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x4e, 0x65,
	0x75, 0x74, 0x72, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69,
	0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x25, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x34,
	0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4e, 0x65, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x65, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x75, 0x6c, 0x6c,
	0x53, 0x65, 0x6e, 0x64, 0x22, 0x31, 0x0a, 0x13, 0x43, 0x44, 0x41, 0x43, 0x4e, 0x65, 0x74, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x45,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x18, 0x6b, 0x5f, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x63, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x0b,
	0x45, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x6b,
	0x5f, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x6c, 0x61,
	0x63, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x01, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x43, 0x4d,
	0x73, 0x67, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x50, 0x0a, 0x08, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd8, 0x02, 0x0a,
	0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x49, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x18, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x70, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x70, 0x72,
	0x61, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x70,
	0x72, 0x61, 0x79, 0x5f, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x53, 0x70, 0x72, 0x61, 0x79, 0x58, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x73, 0x70, 0x72, 0x61, 0x79, 0x5f, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x70, 0x72, 0x61, 0x79, 0x59, 0x12, 0x39, 0x0a, 0x19,
	0x73, 0x70, 0x72, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x73, 0x70, 0x72, 0x61, 0x79, 0x65, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0xa2, 0x03, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x52, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x45, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x18, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x70, 0x72,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x53, 0x70, 0x72, 0x61, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x70, 0x72, 0x61, 0x79, 0x5f, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x70, 0x72, 0x61, 0x79, 0x58, 0x12, 0x22, 0x0a,
	0x0d, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x70, 0x72, 0x61, 0x79, 0x5f, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x70, 0x72, 0x61, 0x79,
	0x59, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x70, 0x72, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x70, 0x72, 0x61, 0x79, 0x65, 0x64, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0xdf, 0x01, 0x0a,
	0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x48, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x6b, 0x5f, 0x65, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x6c, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x58, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x59, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x7a,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5a, 0x22, 0x8d,
	0x02, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x48, 0x0a,
	0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x6b, 0x5f, 0x65, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x09, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x6c, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x58, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x59, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x7a,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5a, 0x22, 0x70,
	0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x78,
	0x22, 0xa7, 0x02, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x44,
	0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65,
	0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x58, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x45, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x62, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x75, 0x6f,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x1d, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e,
	0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0xa7, 0x02, 0x0a, 0x25, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x58, 0x0a, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x75,
	0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x17, 0x6b,
	0x5f, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x62, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x6b, 0x5f,
	0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x69, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x42, 0x75, 0x64, 0x64, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x5f, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x58, 0x12, 0x13, 0x0a, 0x05,
	0x70, 0x6f, 0x73, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x73,
	0x59, 0x22, 0x4e, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x22, 0x40, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x4d, 0x73, 0x67, 0x22, 0x4f, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x5b, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x2e, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x42,
	0x0a, 0x0d, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x65, 0x0a,
	0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x61,
	0x64, 0x6f, 0x75, 0x74, 0x1a, 0x59, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x62, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0xd7, 0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x51, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x6d, 0x0a, 0x1d, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x75, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22,
	0xc2, 0x05, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44,
	0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x61, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x4d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0e,
	0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a,
	0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x4e, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10,
	0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xef, 0x01, 0x0a,
	0x25, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x2a, 0xc5,
	0x09, 0x0a, 0x10, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4e,
	0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10,
	0x06, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x10,
	0x08, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x09, 0x12,
	0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x73, 0x67, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x10,
	0x12, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x10, 0x13, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x14, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x10, 0x15, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x10, 0x16, 0x12,
	0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x17, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x65, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x10, 0x19,
	0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0x1a, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x65,
	0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x10, 0x1b, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x6d,
	0x61, 0x74, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x1c,
	0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x10, 0x1d,
	0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x44, 0x75, 0x6f, 0x73, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x10, 0x1e, 0x12, 0x25, 0x0a,
	0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x10, 0x1f, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x75, 0x64, 0x64, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x21, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x22, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x10, 0x23, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x4d, 0x73, 0x67, 0x10, 0x24, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x10, 0x25, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x26, 0x2a, 0xa3, 0x03, 0x0a, 0x14, 0x45, 0x44, 0x41, 0x43, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0xe9, 0x07, 0x12, 0x27, 0x0a, 0x22, 0x6b,
	0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x69, 0x74, 0x41, 0x70,
	0x70, 0x10, 0xea, 0x07, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0xeb, 0x07, 0x12, 0x23, 0x0a, 0x1e,
	0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x62, 0x79, 0x65, 0x10, 0xec,
	0x07, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x42, 0x61, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0xd1, 0x0f, 0x12, 0x35, 0x0a, 0x30, 0x6b, 0x5f, 0x45,
	0x44, 0x41, 0x43, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65,
	0x64, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x6c, 0x79, 0x10, 0xd2, 0x0f,
	0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0xd3, 0x0f, 0x12, 0x29, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x4f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0xd4, 0x0f, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x44, 0x41,
	0x43, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x62, 0x79, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x7a, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x10, 0xd5, 0x0f, 0x2a, 0x53, 0x0a, 0x0a,
	0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50,
	0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x10,
	0x02, 0x2a, 0x72, 0x0a, 0x0b, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4f,
	0x76, 0x65, 0x72, 0x10, 0x03, 0x2a, 0xbf, 0x0b, 0x0a, 0x0c, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x42, 0x65, 0x61, 0x73, 0x74, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x55, 0x6e, 0x69,
	0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x44, 0x65, 0x6d, 0x6f, 0x6e, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x55, 0x6e,
	0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x44, 0x77, 0x61, 0x72, 0x66, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x45, 0x6c, 0x66, 0x10,
	0x06, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x47, 0x6f, 0x62, 0x6c, 0x69, 0x6e, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x55,
	0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x48, 0x75, 0x6d, 0x61, 0x6e,
	0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x4e, 0x61, 0x67, 0x61, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x55, 0x6e,
	0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x4f, 0x67, 0x72, 0x65, 0x10, 0x0a,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x4f, 0x72, 0x63, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x54, 0x72, 0x6f, 0x6c, 0x6c, 0x10, 0x0c, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x55,
	0x6e, 0x64, 0x65, 0x61, 0x64, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x55, 0x6e, 0x69, 0x74,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x53, 0x61, 0x74, 0x79, 0x72, 0x10, 0x0e, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x41, 0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55,
	0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x44, 0x65, 0x6d, 0x6f, 0x6e,
	0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x55, 0x6e, 0x69,
	0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x44, 0x72, 0x75, 0x69, 0x64, 0x10, 0x11,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x55, 0x6e,
	0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x4b, 0x6e, 0x69, 0x67, 0x68, 0x74,
	0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x4d, 0x61, 0x67, 0x65, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x55, 0x6e,
	0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x4d, 0x65, 0x63, 0x68, 0x10, 0x15,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x10, 0x16, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x55, 0x6e,
	0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x57, 0x61, 0x72, 0x6c, 0x6f, 0x63,
	0x6b, 0x10, 0x17, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x57, 0x61, 0x72, 0x72, 0x69, 0x6f, 0x72, 0x10, 0x18, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x45, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x4d, 0x65,
	0x67, 0x61, 0x57, 0x61, 0x72, 0x72, 0x69, 0x6f, 0x72, 0x10, 0x19, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x4d, 0x65, 0x67, 0x61,
	0x41, 0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x10, 0x1a, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x55,
	0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x4d, 0x65, 0x67, 0x61, 0x42,
	0x6c, 0x6f, 0x6f, 0x64, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x1b, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x4d, 0x65, 0x67, 0x61,
	0x45, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x10, 0x1c, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55, 0x6e,
	0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x4d, 0x65, 0x67, 0x61, 0x57, 0x61,
	0x72, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x55, 0x6e, 0x69, 0x74,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x4d, 0x65, 0x67, 0x61, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x4d, 0x65, 0x67, 0x61, 0x54, 0x72, 0x6f, 0x6c, 0x6c, 0x10, 0x1f,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x4d, 0x65, 0x67, 0x61, 0x44, 0x65, 0x6d, 0x6f, 0x6e, 0x10, 0x20, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x50, 0x72, 0x69,
	0x6d, 0x6f, 0x72, 0x64, 0x69, 0x61, 0x6c, 0x10, 0x21, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x55, 0x6e,
	0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x42, 0x72, 0x61, 0x77, 0x6e, 0x79,
	0x10, 0x22, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x53, 0x61, 0x76, 0x61, 0x67, 0x65, 0x10, 0x23, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x10, 0x24, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x10, 0x25, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x61, 0x6c, 0x10, 0x26, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x55,
	0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x53, 0x75, 0x6d, 0x6d, 0x6f,
	0x6e, 0x65, 0x72, 0x10, 0x27, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x42, 0x72, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x10, 0x28, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x4d, 0x65, 0x65, 0x70, 0x6f, 0x10, 0x29, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x4d, 0x6f,
	0x6e, 0x6b, 0x10, 0x2a, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x42, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x10, 0x2b, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x10, 0x2c, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x55, 0x6e, 0x69,
	0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x53, 0x6f, 0x72, 0x63, 0x65, 0x72, 0x6f,
	0x72, 0x10, 0x2d, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x10, 0x2e, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x10, 0x2f, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x55,
	0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x46, 0x61, 0x65, 0x72, 0x69,
	0x65, 0x10, 0x30, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x4e, 0x65, 0x63, 0x72, 0x6f, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x10,
	0x31, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x10, 0x32, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x57, 0x69, 0x73,
	0x70, 0x10, 0x33, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x42, 0x72, 0x75, 0x74, 0x61, 0x6c, 0x10, 0x34, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x48, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x10, 0x35, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x56, 0x69, 0x67, 0x69, 0x6c, 0x61, 0x6e, 0x74, 0x10, 0x36,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x56, 0x6f, 0x69, 0x64, 0x10, 0x37, 0x2a, 0x3d, 0x0a, 0x0c, 0x45, 0x53, 0x79, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x53, 0x79, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x53, 0x79, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x61, 0x63, 0x65, 0x10, 0x02, 0x2a, 0xf6, 0x01, 0x0a, 0x0c, 0x45, 0x44, 0x41, 0x43, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x14, 0x45, 0x44, 0x41, 0x43, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x44,
	0x41, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x44, 0x41, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x4f, 0x66,
	0x66, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x44, 0x41,
	0x43, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12,
	0x22, 0x0a, 0x1e, 0x45, 0x44, 0x41, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x44, 0x41, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x05, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x44, 0x41, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x48, 0x61, 0x74, 0x10, 0x09, 0x2a,
	0x8e, 0x01, 0x0a, 0x16, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x02,
	0x2a, 0x35, 0x0a, 0x10, 0x45, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x75, 0x6f, 0x73, 0x5f, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x10, 0x00, 0x2a, 0x81, 0x0a, 0x0a, 0x0c, 0x45, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x6c, 0x6c, 0x55, 0x6e, 0x69,
	0x74, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x4d, 0x6f, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x42,
	0x75, 0x79, 0x58, 0x50, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x10, 0x05, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x68, 0x6f, 0x70, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x07,
	0x12, 0x27, 0x0a, 0x23, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x76, 0x47, 0x6f, 0x6c,
	0x64, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x76, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x0a, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x44, 0x65,
	0x76, 0x48, 0x65, 0x72, 0x6f, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x42, 0x75, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x11,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10,
	0x12, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x53, 0x74, 0x65, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x4d, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10,
	0x15, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x10, 0x16,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x53, 0x65, 0x6e, 0x64, 0x10, 0x17, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x10, 0x18, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x4d, 0x6f, 0x76, 0x65, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x42, 0x75, 0x79, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x6e,
	0x64, 0x10, 0x1a, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x1b, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x44,
	0x65, 0x76, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x6c, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x10, 0x1d, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x76, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x1e, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x76, 0x47, 0x69, 0x76,
	0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x10, 0x20, 0x12, 0x28, 0x0a, 0x24,
	0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x76,
	0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x21, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x76, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x6c, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x10, 0x22, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x76, 0x53, 0x65,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x10, 0x23, 0x12, 0x22, 0x0a, 0x1e, 0x45,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x76, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x10, 0x24, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x25, 0x12, 0x22, 0x0a, 0x1e,
	0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x47, 0x6f, 0x54,
	0x6f, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x26,
	0x12, 0x22, 0x0a, 0x1e, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x10, 0x27, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x54, 0x75, 0x72, 0x62, 0x6f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x10, 0x28, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x10, 0x29, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x76, 0x4d, 0x61,
	0x6b, 0x65, 0x54, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x74, 0x10, 0x2a, 0x12, 0x27, 0x0a, 0x23, 0x45,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x72, 0x6f,
	0x6c, 0x6c, 0x10, 0x2b, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x42, 0x75, 0x79, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x10, 0x2c, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x10, 0x2d, 0x2a, 0x71, 0x0a, 0x12, 0x45,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x44, 0x72, 0x61, 0x77, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x41, 0x77, 0x61, 0x79, 0x57, 0x69, 0x6e, 0x10, 0x02, 0x2a, 0x95,
	0x01, 0x0a, 0x11, 0x45, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x02, 0x12,
	0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x75, 0x6f, 0x73, 0x4e, 0x65, 0x74, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x10, 0x03, 0x2a, 0xd1, 0x02, 0x0a, 0x12, 0x45, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a,
	0x1f, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x76, 0x65,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x69, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x4e, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x56,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x48, 0x6f, 0x6d, 0x65,
	0x46, 0x6c, 0x61, 0x77, 0x6c, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x23, 0x0a,
	0x1f, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x41, 0x77, 0x61, 0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x76, 0x65,
	0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x69, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x41, 0x77, 0x61, 0x79, 0x4e, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x56,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x41, 0x77, 0x61, 0x79,
	0x46, 0x6c, 0x61, 0x77, 0x6c, 0x65, 0x73, 0x73, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x41, 0x77, 0x61, 0x79, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x07, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x44, 0x72, 0x61, 0x77, 0x10, 0x08, 0x2a, 0xf4, 0x07, 0x0a, 0x0e, 0x45,
	0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x44,
	0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10,
	0x02, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43,
	0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x6b,
	0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50,
	0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x1c, 0x0a,
	0x18, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x5f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x31, 0x10, 0x64, 0x12, 0x1c, 0x0a, 0x18, 0x6b,
	0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x32, 0x10, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45,
	0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x33, 0x10, 0x66, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x44, 0x41,
	0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x34, 0x10, 0x67, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50,
	0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x31, 0x10, 0x6e, 0x12, 0x25, 0x0a, 0x21,
	0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x5f, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x32, 0x10, 0x6f, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a,
	0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x33, 0x10, 0x70, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f,
	0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x41,
	0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x34, 0x10,
	0x71, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x31, 0x10, 0x78, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f,
	0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x41,
	0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x32, 0x10, 0x79, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a,
	0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x33, 0x10, 0x7a, 0x12, 0x27, 0x0a, 0x23,
	0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x5f, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x34, 0x10, 0x7b, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50,
	0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x31, 0x10, 0x82, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45,
	0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x55, 0x6e,
	0x69, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x32, 0x10, 0x83, 0x01, 0x12, 0x22, 0x0a,
	0x1d, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x33, 0x10, 0x84,
	0x01, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x34, 0x10, 0x85, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50,
	0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x31, 0x10, 0x8c, 0x01, 0x12, 0x25, 0x0a, 0x20,
	0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x5f, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x32,
	0x10, 0x8d, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a,
	0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x69, 0x73, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x33, 0x10, 0x8e, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f,
	0x45, 0x44, 0x41, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x55,
	0x6e, 0x69, 0x74, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x34, 0x10, 0x8f,
	0x01, 0x2a, 0x8a, 0x02, 0x0a, 0x13, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45,
	0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45,
	0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x53, 0x68, 0x6f, 0x70, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45,
	0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x4d, 0x79, 0x73, 0x74, 0x65, 0x72, 0x79, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e,
	0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x6f, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x03,
	0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x6f, 0x73, 0x73, 0x10, 0x05, 0x12, 0x1e,
	0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52,
	0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x6f, 0x73, 0x73, 0x10, 0x06, 0x2a, 0xee,
	0x02, 0x0a, 0x10, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x43, 0x68, 0x6f,
	0x6f, 0x73, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x10, 0x01,
	0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x43, 0x68, 0x6f,
	0x6f, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x72, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4d,
	0x61, 0x69, 0x6e, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x50, 0x6f, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x10, 0x05, 0x12,
	0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x5f,
	0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x06,
	0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x07,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x10, 0x08, 0x2a,
	0x86, 0x03, 0x0a, 0x0c, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55, 0x6e, 0x69, 0x74,
	0x41, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x41,
	0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x55, 0x6e, 0x69, 0x74,
	0x41, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x03,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x43, 0x61, 0x73, 0x74, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44,
	0x65, 0x61, 0x64, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x49,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x10, 0x06,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x57, 0x61, 0x6c, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x55, 0x6e, 0x69, 0x74, 0x41, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x65, 0x6c, 0x65,
	0x62, 0x72, 0x61, 0x74, 0x65, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x55, 0x6e, 0x69, 0x74,
	0x41, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6e, 0x64,
	0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55,
	0x6e, 0x69, 0x74, 0x41, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x55, 0x6e,
	0x69, 0x74, 0x41, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x57, 0x61, 0x6c, 0x6b, 0x54, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x47, 0x61, 0x74, 0x65, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x55, 0x6e, 0x69, 0x74, 0x41, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4d, 0x6f, 0x76, 0x65,
	0x49, 0x6e, 0x46, 0x65, 0x61, 0x72, 0x10, 0x0c, 0x2a, 0xcd, 0x01, 0x0a, 0x10, 0x45, 0x44, 0x41,
	0x43, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x44, 0x41, 0x43, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x44, 0x41, 0x43,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x45, 0x44, 0x41, 0x43, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x44, 0x41, 0x43, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x72, 0x65,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x44, 0x41, 0x43, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x69, 0x65, 0x64, 0x10, 0x04, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x44, 0x41, 0x43, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x48, 0x65, 0x61, 0x6c, 0x10, 0x05, 0x2a, 0xfe, 0x02, 0x0a, 0x0d, 0x45, 0x44, 0x41,
	0x43, 0x4e, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f,
	0x65, 0x44, 0x41, 0x43, 0x4e, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f,
	0x65, 0x44, 0x41, 0x43, 0x4e, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x6b,
	0x5f, 0x65, 0x44, 0x41, 0x43, 0x4e, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x65, 0x44, 0x41, 0x43, 0x4e, 0x65, 0x74, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f,
	0x65, 0x44, 0x41, 0x43, 0x4e, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x65, 0x44, 0x41, 0x43, 0x4e,
	0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x65, 0x44, 0x41,
	0x43, 0x4e, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x65, 0x44, 0x41, 0x43, 0x4e,
	0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50,
	0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0x07, 0x12,
	0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x44, 0x41, 0x43, 0x4e, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x65, 0x44, 0x41, 0x43, 0x4e, 0x65, 0x74, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x61,
	0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x10, 0x09, 0x2a, 0x4d, 0x0a, 0x0f, 0x45, 0x49, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x10, 0x01, 0x2a, 0x3b, 0x0a, 0x0a, 0x45, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x6b, 0x5f, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x10, 0x01, 0x2a, 0x4a, 0x0a, 0x0f, 0x45, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x4d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x4d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x10,
	0x01, 0x2a, 0xe1, 0x03, 0x0a, 0x10, 0x45, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x57, 0x61, 0x6e, 0x74, 0x10,
	0xe9, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x6f, 0x59, 0x6f, 0x75, 0x57, 0x61,
	0x6e, 0x74, 0x10, 0xea, 0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x59, 0x65, 0x73, 0x57,
	0x61, 0x6e, 0x74, 0x10, 0xeb, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x57,
	0x61, 0x6e, 0x74, 0x10, 0xec, 0x07, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x72, 0x65,
	0x65, 0x59, 0x6f, 0x75, 0x72, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x10, 0xed, 0x07,
	0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x68, 0x61, 0x6e, 0x6b, 0x73, 0x10, 0xee, 0x07,
	0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x6e, 0x74, 0x31, 0x47, 0x6f, 0x6c, 0x64,
	0x10, 0xef, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x6e, 0x74, 0x35, 0x47,
	0x6f, 0x6c, 0x64, 0x10, 0xf0, 0x07, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x4e, 0x6f,
	0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x57, 0x61, 0x6e, 0x74, 0x10, 0xf1, 0x07, 0x12, 0x20, 0x0a,
	0x1b, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x57, 0x61, 0x6e, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0xf2, 0x07, 0x12,
	0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xf3, 0x07, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x65, 0x44,
	0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0xf4, 0x07, 0x2a, 0xa7, 0x01, 0x0a, 0x16, 0x45, 0x44, 0x75, 0x6f, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x55, 0x6e, 0x69, 0x74, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x53, 0x79, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x5f, 0x65, 0x44, 0x75, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x03, 0x2a,
	0x52, 0x0a, 0x12, 0x45, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x75, 0x64, 0x64, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x42, 0x75, 0x64, 0x64, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x42, 0x75, 0x64, 0x64, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x4d, 0x6f, 0x76,
	0x65, 0x10, 0x01, 0x42, 0x3e, 0x48, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x80, 0x01, 0x00,
}

var (
	file_underlords_dac_gamemessages_proto_rawDescOnce sync.Once
	file_underlords_dac_gamemessages_proto_rawDescData = file_underlords_dac_gamemessages_proto_rawDesc
)

func file_underlords_dac_gamemessages_proto_rawDescGZIP() []byte {
	file_underlords_dac_gamemessages_proto_rawDescOnce.Do(func() {
		file_underlords_dac_gamemessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_underlords_dac_gamemessages_proto_rawDescData)
	})
	return file_underlords_dac_gamemessages_proto_rawDescData
}

var file_underlords_dac_gamemessages_proto_enumTypes = make([]protoimpl.EnumInfo, 27)
var file_underlords_dac_gamemessages_proto_msgTypes = make([]protoimpl.MessageInfo, 128)
var file_underlords_dac_gamemessages_proto_goTypes = []interface{}{
	(EDACGameMessages)(0),                                         // 0: underlords.EDACGameMessages
	(EDACDisconnectReason)(0),                                     // 1: underlords.EDACDisconnectReason
	(EGameState)(0),                                               // 2: underlords.EGameState
	(ERoundState)(0),                                              // 3: underlords.ERoundState
	(EUnitKeyword)(0),                                             // 4: underlords.EUnitKeyword
	(ESynergyType)(0),                                             // 5: underlords.ESynergyType
	(EDACItemType)(0),                                             // 6: underlords.EDACItemType
	(EPlayerConnectionState)(0),                                   // 7: underlords.EPlayerConnectionState
	(ESendDestination)(0),                                         // 8: underlords.ESendDestination
	(EPlayerOrder)(0),                                             // 9: underlords.EPlayerOrder
	(ERoundCombatResult)(0),                                       // 10: underlords.ERoundCombatResult
	(EDamageSourceType)(0),                                        // 11: underlords.EDamageSourceType
	(ERoundVictoryLevel)(0),                                       // 12: underlords.ERoundVictoryLevel
	(EDACPuzzleRule)(0),                                           // 13: underlords.EDACPuzzleRule
	(EDACDungeonRoomType)(0),                                      // 14: underlords.EDACDungeonRoomType
	(EDACDungeonPhase)(0),                                         // 15: underlords.EDACDungeonPhase
	(EUnitAIState)(0),                                             // 16: underlords.EUnitAIState
	(EDACIncidentType)(0),                                         // 17: underlords.EDACIncidentType
	(EDACNetBuffer)(0),                                            // 18: underlords.EDACNetBuffer
	(EInGameChatType)(0),                                          // 19: underlords.EInGameChatType
	(EClickType)(0),                                               // 20: underlords.EClickType
	(EMapPropCommand)(0),                                          // 21: underlords.EMapPropCommand
	(EDuosMessageType)(0),                                         // 22: underlords.EDuosMessageType
	(EDuosMessageTargetType)(0),                                   // 23: underlords.EDuosMessageTargetType
	(EBoardBuddyCommand)(0),                                       // 24: underlords.EBoardBuddyCommand
	(CMsgPrivatePlayerState_EGrantRewards)(0),                     // 25: underlords.CMsgPrivatePlayerState.EGrantRewards
	(CMsgGameReplayActionMarker_EActionType)(0),                   // 26: underlords.CMsgGameReplayActionMarker.EActionType
	(*CClientReconnectInfo)(nil),                                  // 27: underlords.CClientReconnectInfo
	(*CMsgPlayerStateUpdatesComplete)(nil),                        // 28: underlords.CMsgPlayerStateUpdatesComplete
	(*CMsgClientUnderlordLoadout)(nil),                            // 29: underlords.CMsgClientUnderlordLoadout
	(*CMsgClientUnderlordLoadoutList)(nil),                        // 30: underlords.CMsgClientUnderlordLoadoutList
	(*CMsgPlayerOrder)(nil),                                       // 31: underlords.CMsgPlayerOrder
	(*CMsgPlayerOrderProcessed)(nil),                              // 32: underlords.CMsgPlayerOrderProcessed
	(*CMsgPlayerCombinedHero)(nil),                                // 33: underlords.CMsgPlayerCombinedHero
	(*CMsgPlayerAcquiredItem)(nil),                                // 34: underlords.CMsgPlayerAcquiredItem
	(*CMsgPlayerRecievedUnitFromDuosPartner)(nil),                 // 35: underlords.CMsgPlayerRecievedUnitFromDuosPartner
	(*CMsgPlayerSelectedTalent)(nil),                              // 36: underlords.CMsgPlayerSelectedTalent
	(*CMsgPlayerCombatResult)(nil),                                // 37: underlords.CMsgPlayerCombatResult
	(*CMsgPlayerWinStreak)(nil),                                   // 38: underlords.CMsgPlayerWinStreak
	(*CMsgPlayerLevelUp)(nil),                                     // 39: underlords.CMsgPlayerLevelUp
	(*CMsgItemChangedOwner)(nil),                                  // 40: underlords.CMsgItemChangedOwner
	(*CMsgPlayerEliminated)(nil),                                  // 41: underlords.CMsgPlayerEliminated
	(*CMsgPosition)(nil),                                          // 42: underlords.CMsgPosition
	(*CMsgUnit)(nil),                                              // 43: underlords.CMsgUnit
	(*CMsgShopItem)(nil),                                          // 44: underlords.CMsgShopItem
	(*CMsgTurboBucket)(nil),                                       // 45: underlords.CMsgTurboBucket
	(*CMsgUnderlordPickerOffering)(nil),                           // 46: underlords.CMsgUnderlordPickerOffering
	(*CMsgSynergy)(nil),                                           // 47: underlords.CMsgSynergy
	(*CMsgItemSlot)(nil),                                          // 48: underlords.CMsgItemSlot
	(*CMsgBoardBuddy)(nil),                                        // 49: underlords.CMsgBoardBuddy
	(*CMsgMapProp)(nil),                                           // 50: underlords.CMsgMapProp
	(*CMsgPublicPlayerState)(nil),                                 // 51: underlords.CMsgPublicPlayerState
	(*CMsgPublicPostMatchStats)(nil),                              // 52: underlords.CMsgPublicPostMatchStats
	(*CMsgIndividualPostMatchStats)(nil),                          // 53: underlords.CMsgIndividualPostMatchStats
	(*CMsgPlayerPreferences)(nil),                                 // 54: underlords.CMsgPlayerPreferences
	(*CMsgPrivatePlayerState)(nil),                                // 55: underlords.CMsgPrivatePlayerState
	(*CMsgMatchState)(nil),                                        // 56: underlords.CMsgMatchState
	(*CMsgGameModeState_Normal)(nil),                              // 57: underlords.CMsgGameModeState_Normal
	(*CMsgGameModeState_Turbo)(nil),                               // 58: underlords.CMsgGameModeState_Turbo
	(*CMsgDuos_TeamCombatResult)(nil),                             // 59: underlords.CMsgDuos_TeamCombatResult
	(*CMsgGameModeState_Duos)(nil),                                // 60: underlords.CMsgGameModeState_Duos
	(*CMsgGameModeState_TechPrototypeA)(nil),                      // 61: underlords.CMsgGameModeState_TechPrototypeA
	(*CMsgGameModeState_Sandbox)(nil),                             // 62: underlords.CMsgGameModeState_Sandbox
	(*CMsgGameModeState_Puzzle)(nil),                              // 63: underlords.CMsgGameModeState_Puzzle
	(*CMsgGameModeState_Tutorial)(nil),                            // 64: underlords.CMsgGameModeState_Tutorial
	(*CMsgGameModeState_Streetfight)(nil),                         // 65: underlords.CMsgGameModeState_Streetfight
	(*DungeonActionCard)(nil),                                     // 66: underlords.DungeonActionCard
	(*CMsgGameModeState_Dungeon)(nil),                             // 67: underlords.CMsgGameModeState_Dungeon
	(*CMsgGameModeState)(nil),                                     // 68: underlords.CMsgGameModeState
	(*CMsgUnitPosition)(nil),                                      // 69: underlords.CMsgUnitPosition
	(*CMsgUnitPositionAndFacing)(nil),                             // 70: underlords.CMsgUnitPositionAndFacing
	(*CMsgUnitAbilityCooldown)(nil),                               // 71: underlords.CMsgUnitAbilityCooldown
	(*CMsgUnitSnapshot)(nil),                                      // 72: underlords.CMsgUnitSnapshot
	(*CMsgUnitMeterDamageDealt)(nil),                              // 73: underlords.CMsgUnitMeterDamageDealt
	(*CMsgUnitMeterDetail)(nil),                                   // 74: underlords.CMsgUnitMeterDetail
	(*CMsgUnitMeterDamageTaken)(nil),                              // 75: underlords.CMsgUnitMeterDamageTaken
	(*CMsgUnitMeterSnapshot)(nil),                                 // 76: underlords.CMsgUnitMeterSnapshot
	(*CMsgCombatMetersSnapshot)(nil),                              // 77: underlords.CMsgCombatMetersSnapshot
	(*CMsgCombatDebugSnapshot)(nil),                               // 78: underlords.CMsgCombatDebugSnapshot
	(*CMsgCombatSnapshot)(nil),                                    // 79: underlords.CMsgCombatSnapshot
	(*CMsgCombatEvent_Attack)(nil),                                // 80: underlords.CMsgCombatEvent_Attack
	(*CMsgCombatEvent_Damage)(nil),                                // 81: underlords.CMsgCombatEvent_Damage
	(*CMsgCombatEvent_AttackMissed)(nil),                          // 82: underlords.CMsgCombatEvent_AttackMissed
	(*CMsgCombatEvent_AttackEvaded)(nil),                          // 83: underlords.CMsgCombatEvent_AttackEvaded
	(*CMsgCombatEvent_AttackBlocked)(nil),                         // 84: underlords.CMsgCombatEvent_AttackBlocked
	(*CMsgCombatEvent_Death)(nil),                                 // 85: underlords.CMsgCombatEvent_Death
	(*CMsgCombatEvent_StartAttack)(nil),                           // 86: underlords.CMsgCombatEvent_StartAttack
	(*CMsgCombatEvent_SoundEvent)(nil),                            // 87: underlords.CMsgCombatEvent_SoundEvent
	(*CMsgCombatEvent_SpeechEvent)(nil),                           // 88: underlords.CMsgCombatEvent_SpeechEvent
	(*CMsgCombatEvent_ModifierCreate)(nil),                        // 89: underlords.CMsgCombatEvent_ModifierCreate
	(*CMsgCombatEvent_ModifierDestroy)(nil),                       // 90: underlords.CMsgCombatEvent_ModifierDestroy
	(*CMsgCombatEvent_StartGesture)(nil),                          // 91: underlords.CMsgCombatEvent_StartGesture
	(*CMsgCombatEvent_StopGesture)(nil),                           // 92: underlords.CMsgCombatEvent_StopGesture
	(*CMsgCombatEvent_CancelAttack)(nil),                          // 93: underlords.CMsgCombatEvent_CancelAttack
	(*CMsgCombatEvent_CombatEnded)(nil),                           // 94: underlords.CMsgCombatEvent_CombatEnded
	(*CMsgCombatEvent_Resurrect)(nil),                             // 95: underlords.CMsgCombatEvent_Resurrect
	(*CMsgCombatEvent_CastAbility)(nil),                           // 96: underlords.CMsgCombatEvent_CastAbility
	(*CMsgCombatEvent)(nil),                                       // 97: underlords.CMsgCombatEvent
	(*CMsgCombatHighlight)(nil),                                   // 98: underlords.CMsgCombatHighlight
	(*CMsgRoundCombat)(nil),                                       // 99: underlords.CMsgRoundCombat
	(*CMsgBattle)(nil),                                            // 100: underlords.CMsgBattle
	(*CMsgRoundCombatGlobal)(nil),                                 // 101: underlords.CMsgRoundCombatGlobal
	(*CMsgClientServerHeader)(nil),                                // 102: underlords.CMsgClientServerHeader
	(*CMsgNetBufferContents)(nil),                                 // 103: underlords.CMsgNetBufferContents
	(*CMsgNetBufferRemoved)(nil),                                  // 104: underlords.CMsgNetBufferRemoved
	(*CMsgClientConnectionStarted)(nil),                           // 105: underlords.CMsgClientConnectionStarted
	(*CMsgClientConnectionComplete)(nil),                          // 106: underlords.CMsgClientConnectionComplete
	(*CMsgClientSetDebugNetBuffer)(nil),                           // 107: underlords.CMsgClientSetDebugNetBuffer
	(*CDACNetBuffer_Debug)(nil),                                   // 108: underlords.CDACNetBuffer_Debug
	(*CMsgGameReplayActionMarker)(nil),                            // 109: underlords.CMsgGameReplayActionMarker
	(*CMsgModifierName)(nil),                                      // 110: underlords.CMsgModifierName
	(*CMsgClientToServerChatMsg)(nil),                             // 111: underlords.CMsgClientToServerChatMsg
	(*CMsgServerToClientChatMsg)(nil),                             // 112: underlords.CMsgServerToClientChatMsg
	(*CMsgClientToServerClickMsg)(nil),                            // 113: underlords.CMsgClientToServerClickMsg
	(*CMsgServerToClientClickMsg)(nil),                            // 114: underlords.CMsgServerToClientClickMsg
	(*CMsgPlayerMapPropCommand)(nil),                              // 115: underlords.CMsgPlayerMapPropCommand
	(*CMsgClientToServerTeammateDuosMessage)(nil),                 // 116: underlords.CMsgClientToServerTeammateDuosMessage
	(*CMsgServerToClientTeammateDuosMessage)(nil),                 // 117: underlords.CMsgServerToClientTeammateDuosMessage
	(*CMsgClientToServerLoadShareCode)(nil),                       // 118: underlords.CMsgClientToServerLoadShareCode
	(*CMsgClientToServerBoardBuddyCommand)(nil),                   // 119: underlords.CMsgClientToServerBoardBuddyCommand
	(*CMsgClientToServerPuzzleLeaderboardCommand)(nil),            // 120: underlords.CMsgClientToServerPuzzleLeaderboardCommand
	(*CMsgRecordLocalBotStats)(nil),                               // 121: underlords.CMsgRecordLocalBotStats
	(*CMsgClientToServerUpvoteNotification)(nil),                  // 122: underlords.CMsgClientToServerUpvoteNotification
	(*CMsgServerToClientNotificationChanged)(nil),                 // 123: underlords.CMsgServerToClientNotificationChanged
	(*CMsgClientToServerLocalPlayerInventory)(nil),                // 124: underlords.CMsgClientToServerLocalPlayerInventory
	(*CMsgGameStateIntegrationData)(nil),                          // 125: underlords.CMsgGameStateIntegrationData
	(*CMsgGameStateIntegrationBlock)(nil),                         // 126: underlords.CMsgGameStateIntegrationBlock
	(*CMsgGameStateIntegrationUpdate)(nil),                        // 127: underlords.CMsgGameStateIntegrationUpdate
	(*CMsgClientToServerInitData)(nil),                            // 128: underlords.CMsgClientToServerInitData
	(*CMsgClientAccountSyncStorageFile)(nil),                      // 129: underlords.CMsgClientAccountSyncStorageFile
	(*CMsgPlayerChallengeCompletePrediction)(nil),                 // 130: underlords.CMsgPlayerChallengeCompletePrediction
	(*CMsgPlayerCombatResult_DamageSource)(nil),                   // 131: underlords.CMsgPlayerCombatResult.DamageSource
	(*CMsgPublicPlayerState_LoadoutItem)(nil),                     // 132: underlords.CMsgPublicPlayerState.LoadoutItem
	(*CMsgPublicPostMatchStats_PlayerPerRoundInfo)(nil),           // 133: underlords.CMsgPublicPostMatchStats.PlayerPerRoundInfo
	(*CMsgPublicPostMatchStats_PlayerInfo)(nil),                   // 134: underlords.CMsgPublicPostMatchStats.PlayerInfo
	(*CMsgIndividualPostMatchStats_Round)(nil),                    // 135: underlords.CMsgIndividualPostMatchStats.Round
	(*CMsgIndividualPostMatchStats_Challenge)(nil),                // 136: underlords.CMsgIndividualPostMatchStats.Challenge
	(*CMsgIndividualPostMatchStats_Currency)(nil),                 // 137: underlords.CMsgIndividualPostMatchStats.Currency
	(*CMsgIndividualPostMatchStats_Event)(nil),                    // 138: underlords.CMsgIndividualPostMatchStats.Event
	(*CMsgIndividualPostMatchStats_RankUpdate)(nil),               // 139: underlords.CMsgIndividualPostMatchStats.RankUpdate
	(*CMsgPrivatePlayerState_ItemChoiceReward)(nil),               // 140: underlords.CMsgPrivatePlayerState.ItemChoiceReward
	(*CMsgPrivatePlayerState_Challenge)(nil),                      // 141: underlords.CMsgPrivatePlayerState.Challenge
	(*CMsgPrivatePlayerState_ItemChoiceReward_Choice)(nil),        // 142: underlords.CMsgPrivatePlayerState.ItemChoiceReward.Choice
	(*CMsgMatchState_TeamInfo)(nil),                               // 143: underlords.CMsgMatchState.TeamInfo
	(*CMsgGameModeState_Puzzle_ActiveRule)(nil),                   // 144: underlords.CMsgGameModeState_Puzzle.ActiveRule
	(*CMsgCombatDebugSnapshot_PathfindingCell)(nil),               // 145: underlords.CMsgCombatDebugSnapshot.PathfindingCell
	(*CMsgCombatDebugSnapshot_ActivePath)(nil),                    // 146: underlords.CMsgCombatDebugSnapshot.ActivePath
	(*CMsgRoundCombatGlobal_EventList)(nil),                       // 147: underlords.CMsgRoundCombatGlobal.EventList
	(*CMsgRoundCombatGlobal_CombatPlayerSlotToEventsEntry)(nil),   // 148: underlords.CMsgRoundCombatGlobal.CombatPlayerSlotToEventsEntry
	(*CMsgClientConnectionStarted_GameConstants)(nil),             // 149: underlords.CMsgClientConnectionStarted.GameConstants
	(*CMsgClientConnectionStarted_GameManager)(nil),               // 150: underlords.CMsgClientConnectionStarted.GameManager
	(*CMsgClientConnectionStarted_GameConstants_UnitChances)(nil), // 151: underlords.CMsgClientConnectionStarted.GameConstants.UnitChances
	(*CMsgModifierName_Modifier)(nil),                             // 152: underlords.CMsgModifierName.Modifier
	(*CMsgServerToClientNotificationChanged_UpvoteSubtype)(nil),   // 153: underlords.CMsgServerToClientNotificationChanged.UpvoteSubtype
	(*CMsgClientToServerLocalPlayerInventory_LoadoutItem)(nil),    // 154: underlords.CMsgClientToServerLocalPlayerInventory.LoadoutItem
	(EDACPlatform)(0),                                             // 155: underlords.EDACPlatform
	(EDACLobbyTeam)(0),                                            // 156: underlords.EDACLobbyTeam
	(EDACGameMode)(0),                                             // 157: underlords.EDACGameMode
	(EDACMatchMode)(0),                                            // 158: underlords.EDACMatchMode
	(EDACBotDifficulty)(0),                                        // 159: underlords.EDACBotDifficulty
	(*CMsgGameModeSettings)(nil),                                  // 160: underlords.CMsgGameModeSettings
	(*CMsgGameModifiers)(nil),                                     // 161: underlords.CMsgGameModifiers
	(*CUserMsg_ParticleManager)(nil),                              // 162: underlords.CUserMsg_ParticleManager
}
var file_underlords_dac_gamemessages_proto_depIdxs = []int32{
	29,  // 0: underlords.CMsgClientUnderlordLoadoutList.loadouts:type_name -> underlords.CMsgClientUnderlordLoadout
	9,   // 1: underlords.CMsgPlayerOrder.order:type_name -> underlords.EPlayerOrder
	10,  // 2: underlords.CMsgPlayerCombatResult.result:type_name -> underlords.ERoundCombatResult
	131, // 3: underlords.CMsgPlayerCombatResult.damage_sources:type_name -> underlords.CMsgPlayerCombatResult.DamageSource
	12,  // 4: underlords.CMsgPlayerCombatResult.victory_level:type_name -> underlords.ERoundVictoryLevel
	42,  // 5: underlords.CMsgUnit.position:type_name -> underlords.CMsgPosition
	4,   // 6: underlords.CMsgUnit.keywords:type_name -> underlords.EUnitKeyword
	4,   // 7: underlords.CMsgShopItem.keywords:type_name -> underlords.EUnitKeyword
	4,   // 8: underlords.CMsgTurboBucket.keywords:type_name -> underlords.EUnitKeyword
	4,   // 9: underlords.CMsgSynergy.keyword:type_name -> underlords.EUnitKeyword
	7,   // 10: underlords.CMsgPublicPlayerState.connection_status:type_name -> underlords.EPlayerConnectionState
	48,  // 11: underlords.CMsgPublicPlayerState.item_slots:type_name -> underlords.CMsgItemSlot
	43,  // 12: underlords.CMsgPublicPlayerState.units:type_name -> underlords.CMsgUnit
	47,  // 13: underlords.CMsgPublicPlayerState.synergies:type_name -> underlords.CMsgSynergy
	155, // 14: underlords.CMsgPublicPlayerState.platform:type_name -> underlords.EDACPlatform
	132, // 15: underlords.CMsgPublicPlayerState.player_loadout:type_name -> underlords.CMsgPublicPlayerState.LoadoutItem
	156, // 16: underlords.CMsgPublicPlayerState.lobby_team:type_name -> underlords.EDACLobbyTeam
	49,  // 17: underlords.CMsgPublicPlayerState.board_buddy:type_name -> underlords.CMsgBoardBuddy
	50,  // 18: underlords.CMsgPublicPlayerState.prop_state:type_name -> underlords.CMsgMapProp
	134, // 19: underlords.CMsgPublicPostMatchStats.players:type_name -> underlords.CMsgPublicPostMatchStats.PlayerInfo
	135, // 20: underlords.CMsgIndividualPostMatchStats.rounds:type_name -> underlords.CMsgIndividualPostMatchStats.Round
	138, // 21: underlords.CMsgIndividualPostMatchStats.events:type_name -> underlords.CMsgIndividualPostMatchStats.Event
	139, // 22: underlords.CMsgIndividualPostMatchStats.individual_rank_update:type_name -> underlords.CMsgIndividualPostMatchStats.RankUpdate
	139, // 23: underlords.CMsgIndividualPostMatchStats.duos_rank_update:type_name -> underlords.CMsgIndividualPostMatchStats.RankUpdate
	157, // 24: underlords.CMsgIndividualPostMatchStats.game_mode:type_name -> underlords.EDACGameMode
	158, // 25: underlords.CMsgIndividualPostMatchStats.match_mode:type_name -> underlords.EDACMatchMode
	159, // 26: underlords.CMsgIndividualPostMatchStats.bot_difficulty:type_name -> underlords.EDACBotDifficulty
	160, // 27: underlords.CMsgIndividualPostMatchStats.game_mode_settings:type_name -> underlords.CMsgGameModeSettings
	140, // 28: underlords.CMsgPrivatePlayerState.oldest_unclaimed_reward:type_name -> underlords.CMsgPrivatePlayerState.ItemChoiceReward
	44,  // 29: underlords.CMsgPrivatePlayerState.shop_units:type_name -> underlords.CMsgShopItem
	141, // 30: underlords.CMsgPrivatePlayerState.challenges:type_name -> underlords.CMsgPrivatePlayerState.Challenge
	25,  // 31: underlords.CMsgPrivatePlayerState.grants_rewards:type_name -> underlords.CMsgPrivatePlayerState.EGrantRewards
	45,  // 32: underlords.CMsgPrivatePlayerState.turbo_buckets:type_name -> underlords.CMsgTurboBucket
	46,  // 33: underlords.CMsgPrivatePlayerState.underlord_picker_offering:type_name -> underlords.CMsgUnderlordPickerOffering
	2,   // 34: underlords.CMsgMatchState.game_state:type_name -> underlords.EGameState
	3,   // 35: underlords.CMsgMatchState.round_state:type_name -> underlords.ERoundState
	161, // 36: underlords.CMsgMatchState.game_modifiers:type_name -> underlords.CMsgGameModifiers
	143, // 37: underlords.CMsgMatchState.team_info:type_name -> underlords.CMsgMatchState.TeamInfo
	57,  // 38: underlords.CMsgGameModeState_Turbo.base_normal:type_name -> underlords.CMsgGameModeState_Normal
	57,  // 39: underlords.CMsgGameModeState_Duos.base_normal:type_name -> underlords.CMsgGameModeState_Normal
	59,  // 40: underlords.CMsgGameModeState_Duos.combat_results:type_name -> underlords.CMsgDuos_TeamCombatResult
	144, // 41: underlords.CMsgGameModeState_Puzzle.active_rules:type_name -> underlords.CMsgGameModeState_Puzzle.ActiveRule
	15,  // 42: underlords.CMsgGameModeState_Dungeon.dungeon_phase:type_name -> underlords.EDACDungeonPhase
	14,  // 43: underlords.CMsgGameModeState_Dungeon.current_room_type:type_name -> underlords.EDACDungeonRoomType
	14,  // 44: underlords.CMsgGameModeState_Dungeon.next_room_types:type_name -> underlords.EDACDungeonRoomType
	66,  // 45: underlords.CMsgGameModeState_Dungeon.available_cards:type_name -> underlords.DungeonActionCard
	57,  // 46: underlords.CMsgGameModeState.details_normal:type_name -> underlords.CMsgGameModeState_Normal
	58,  // 47: underlords.CMsgGameModeState.details_turbo:type_name -> underlords.CMsgGameModeState_Turbo
	60,  // 48: underlords.CMsgGameModeState.details_duos:type_name -> underlords.CMsgGameModeState_Duos
	61,  // 49: underlords.CMsgGameModeState.details_tech_prototype_a:type_name -> underlords.CMsgGameModeState_TechPrototypeA
	62,  // 50: underlords.CMsgGameModeState.details_sandbox:type_name -> underlords.CMsgGameModeState_Sandbox
	63,  // 51: underlords.CMsgGameModeState.details_puzzle:type_name -> underlords.CMsgGameModeState_Puzzle
	64,  // 52: underlords.CMsgGameModeState.details_tutorial:type_name -> underlords.CMsgGameModeState_Tutorial
	65,  // 53: underlords.CMsgGameModeState.details_streetfight:type_name -> underlords.CMsgGameModeState_Streetfight
	67,  // 54: underlords.CMsgGameModeState.details_dungeon:type_name -> underlords.CMsgGameModeState_Dungeon
	70,  // 55: underlords.CMsgUnitSnapshot.position:type_name -> underlords.CMsgUnitPositionAndFacing
	16,  // 56: underlords.CMsgUnitSnapshot.ai_state:type_name -> underlords.EUnitAIState
	4,   // 57: underlords.CMsgUnitSnapshot.keywords:type_name -> underlords.EUnitKeyword
	70,  // 58: underlords.CMsgUnitSnapshot.starting_position:type_name -> underlords.CMsgUnitPositionAndFacing
	71,  // 59: underlords.CMsgUnitSnapshot.ability_cooldowns:type_name -> underlords.CMsgUnitAbilityCooldown
	73,  // 60: underlords.CMsgUnitMeterSnapshot.damage_dealt:type_name -> underlords.CMsgUnitMeterDamageDealt
	75,  // 61: underlords.CMsgUnitMeterSnapshot.damage_taken:type_name -> underlords.CMsgUnitMeterDamageTaken
	74,  // 62: underlords.CMsgUnitMeterSnapshot.damage_dealt_details:type_name -> underlords.CMsgUnitMeterDetail
	74,  // 63: underlords.CMsgUnitMeterSnapshot.healing_done_details:type_name -> underlords.CMsgUnitMeterDetail
	74,  // 64: underlords.CMsgUnitMeterSnapshot.damage_taken_details:type_name -> underlords.CMsgUnitMeterDetail
	74,  // 65: underlords.CMsgUnitMeterSnapshot.kills_details:type_name -> underlords.CMsgUnitMeterDetail
	74,  // 66: underlords.CMsgUnitMeterSnapshot.disable_done_details:type_name -> underlords.CMsgUnitMeterDetail
	76,  // 67: underlords.CMsgCombatMetersSnapshot.units:type_name -> underlords.CMsgUnitMeterSnapshot
	145, // 68: underlords.CMsgCombatDebugSnapshot.pathfinding_cells:type_name -> underlords.CMsgCombatDebugSnapshot.PathfindingCell
	146, // 69: underlords.CMsgCombatDebugSnapshot.active_paths:type_name -> underlords.CMsgCombatDebugSnapshot.ActivePath
	72,  // 70: underlords.CMsgCombatSnapshot.units:type_name -> underlords.CMsgUnitSnapshot
	78,  // 71: underlords.CMsgCombatSnapshot.debug_snapshot:type_name -> underlords.CMsgCombatDebugSnapshot
	69,  // 72: underlords.CMsgCombatEvent_SoundEvent.position:type_name -> underlords.CMsgUnitPosition
	80,  // 73: underlords.CMsgCombatEvent.details_attack:type_name -> underlords.CMsgCombatEvent_Attack
	81,  // 74: underlords.CMsgCombatEvent.details_damage:type_name -> underlords.CMsgCombatEvent_Damage
	85,  // 75: underlords.CMsgCombatEvent.details_death:type_name -> underlords.CMsgCombatEvent_Death
	86,  // 76: underlords.CMsgCombatEvent.details_start_attack:type_name -> underlords.CMsgCombatEvent_StartAttack
	87,  // 77: underlords.CMsgCombatEvent.details_sound_event:type_name -> underlords.CMsgCombatEvent_SoundEvent
	162, // 78: underlords.CMsgCombatEvent.details_particle_event:type_name -> underlords.CUserMsg_ParticleManager
	89,  // 79: underlords.CMsgCombatEvent.details_modifier_create:type_name -> underlords.CMsgCombatEvent_ModifierCreate
	90,  // 80: underlords.CMsgCombatEvent.details_modifier_destroy:type_name -> underlords.CMsgCombatEvent_ModifierDestroy
	91,  // 81: underlords.CMsgCombatEvent.details_start_gesture:type_name -> underlords.CMsgCombatEvent_StartGesture
	93,  // 82: underlords.CMsgCombatEvent.details_cancel_attack:type_name -> underlords.CMsgCombatEvent_CancelAttack
	94,  // 83: underlords.CMsgCombatEvent.details_combat_ended:type_name -> underlords.CMsgCombatEvent_CombatEnded
	82,  // 84: underlords.CMsgCombatEvent.details_attack_missed:type_name -> underlords.CMsgCombatEvent_AttackMissed
	83,  // 85: underlords.CMsgCombatEvent.details_attack_evaded:type_name -> underlords.CMsgCombatEvent_AttackEvaded
	84,  // 86: underlords.CMsgCombatEvent.details_attack_blocked:type_name -> underlords.CMsgCombatEvent_AttackBlocked
	95,  // 87: underlords.CMsgCombatEvent.details_resurrect:type_name -> underlords.CMsgCombatEvent_Resurrect
	88,  // 88: underlords.CMsgCombatEvent.details_speech_event:type_name -> underlords.CMsgCombatEvent_SpeechEvent
	96,  // 89: underlords.CMsgCombatEvent.details_cast_ability:type_name -> underlords.CMsgCombatEvent_CastAbility
	92,  // 90: underlords.CMsgCombatEvent.details_stop_gesture:type_name -> underlords.CMsgCombatEvent_StopGesture
	17,  // 91: underlords.CMsgCombatHighlight.highlight_type:type_name -> underlords.EDACIncidentType
	79,  // 92: underlords.CMsgRoundCombat.snapshots:type_name -> underlords.CMsgCombatSnapshot
	97,  // 93: underlords.CMsgRoundCombat.events:type_name -> underlords.CMsgCombatEvent
	10,  // 94: underlords.CMsgRoundCombat.result:type_name -> underlords.ERoundCombatResult
	77,  // 95: underlords.CMsgRoundCombat.meter_snapshots:type_name -> underlords.CMsgCombatMetersSnapshot
	98,  // 96: underlords.CMsgRoundCombat.combat_highlights:type_name -> underlords.CMsgCombatHighlight
	99,  // 97: underlords.CMsgBattle.combats:type_name -> underlords.CMsgRoundCombat
	101, // 98: underlords.CMsgBattle.global:type_name -> underlords.CMsgRoundCombatGlobal
	148, // 99: underlords.CMsgRoundCombatGlobal.combat_player_slot_to_events:type_name -> underlords.CMsgRoundCombatGlobal.CombatPlayerSlotToEventsEntry
	0,   // 100: underlords.CMsgClientServerHeader.msg_id:type_name -> underlords.EDACGameMessages
	18,  // 101: underlords.CMsgNetBufferContents.net_buffer_type:type_name -> underlords.EDACNetBuffer
	18,  // 102: underlords.CMsgNetBufferRemoved.net_buffer_type:type_name -> underlords.EDACNetBuffer
	158, // 103: underlords.CMsgClientConnectionStarted.match_mode:type_name -> underlords.EDACMatchMode
	157, // 104: underlords.CMsgClientConnectionStarted.game_mode:type_name -> underlords.EDACGameMode
	149, // 105: underlords.CMsgClientConnectionStarted.game_constants:type_name -> underlords.CMsgClientConnectionStarted.GameConstants
	150, // 106: underlords.CMsgClientConnectionStarted.game_manager:type_name -> underlords.CMsgClientConnectionStarted.GameManager
	26,  // 107: underlords.CMsgGameReplayActionMarker.action:type_name -> underlords.CMsgGameReplayActionMarker.EActionType
	152, // 108: underlords.CMsgModifierName.modifier_list:type_name -> underlords.CMsgModifierName.Modifier
	19,  // 109: underlords.CMsgClientToServerChatMsg.chat_type:type_name -> underlords.EInGameChatType
	19,  // 110: underlords.CMsgServerToClientChatMsg.chat_type:type_name -> underlords.EInGameChatType
	20,  // 111: underlords.CMsgClientToServerClickMsg.click_type:type_name -> underlords.EClickType
	20,  // 112: underlords.CMsgServerToClientClickMsg.click_type:type_name -> underlords.EClickType
	22,  // 113: underlords.CMsgClientToServerTeammateDuosMessage.message_type:type_name -> underlords.EDuosMessageType
	23,  // 114: underlords.CMsgClientToServerTeammateDuosMessage.target_type:type_name -> underlords.EDuosMessageTargetType
	22,  // 115: underlords.CMsgServerToClientTeammateDuosMessage.message_type:type_name -> underlords.EDuosMessageType
	23,  // 116: underlords.CMsgServerToClientTeammateDuosMessage.target_type:type_name -> underlords.EDuosMessageTargetType
	153, // 117: underlords.CMsgServerToClientNotificationChanged.subtypes:type_name -> underlords.CMsgServerToClientNotificationChanged.UpvoteSubtype
	154, // 118: underlords.CMsgClientToServerLocalPlayerInventory.player_loadout:type_name -> underlords.CMsgClientToServerLocalPlayerInventory.LoadoutItem
	51,  // 119: underlords.CMsgGameStateIntegrationData.public_player_state:type_name -> underlords.CMsgPublicPlayerState
	55,  // 120: underlords.CMsgGameStateIntegrationData.private_player_state:type_name -> underlords.CMsgPrivatePlayerState
	125, // 121: underlords.CMsgGameStateIntegrationBlock.data:type_name -> underlords.CMsgGameStateIntegrationData
	126, // 122: underlords.CMsgGameStateIntegrationUpdate.block:type_name -> underlords.CMsgGameStateIntegrationBlock
	161, // 123: underlords.CMsgClientToServerInitData.game_modifiers:type_name -> underlords.CMsgGameModifiers
	157, // 124: underlords.CMsgClientToServerInitData.game_mode:type_name -> underlords.EDACGameMode
	160, // 125: underlords.CMsgClientToServerInitData.game_mode_settings:type_name -> underlords.CMsgGameModeSettings
	11,  // 126: underlords.CMsgPlayerCombatResult.DamageSource.type:type_name -> underlords.EDamageSourceType
	43,  // 127: underlords.CMsgPublicPostMatchStats.PlayerPerRoundInfo.units:type_name -> underlords.CMsgUnit
	48,  // 128: underlords.CMsgPublicPostMatchStats.PlayerPerRoundInfo.item_slots:type_name -> underlords.CMsgItemSlot
	133, // 129: underlords.CMsgPublicPostMatchStats.PlayerInfo.rounds:type_name -> underlords.CMsgPublicPostMatchStats.PlayerPerRoundInfo
	156, // 130: underlords.CMsgPublicPostMatchStats.PlayerInfo.lobby_team:type_name -> underlords.EDACLobbyTeam
	43,  // 131: underlords.CMsgIndividualPostMatchStats.Round.units:type_name -> underlords.CMsgUnit
	48,  // 132: underlords.CMsgIndividualPostMatchStats.Round.items:type_name -> underlords.CMsgItemSlot
	136, // 133: underlords.CMsgIndividualPostMatchStats.Event.challenges:type_name -> underlords.CMsgIndividualPostMatchStats.Challenge
	137, // 134: underlords.CMsgIndividualPostMatchStats.Event.currencies:type_name -> underlords.CMsgIndividualPostMatchStats.Currency
	142, // 135: underlords.CMsgPrivatePlayerState.ItemChoiceReward.choices:type_name -> underlords.CMsgPrivatePlayerState.ItemChoiceReward.Choice
	156, // 136: underlords.CMsgMatchState.TeamInfo.lobby_team:type_name -> underlords.EDACLobbyTeam
	13,  // 137: underlords.CMsgGameModeState_Puzzle.ActiveRule.rule:type_name -> underlords.EDACPuzzleRule
	42,  // 138: underlords.CMsgCombatDebugSnapshot.ActivePath.path_waypoints:type_name -> underlords.CMsgPosition
	97,  // 139: underlords.CMsgRoundCombatGlobal.EventList.events:type_name -> underlords.CMsgCombatEvent
	147, // 140: underlords.CMsgRoundCombatGlobal.CombatPlayerSlotToEventsEntry.value:type_name -> underlords.CMsgRoundCombatGlobal.EventList
	160, // 141: underlords.CMsgClientConnectionStarted.GameConstants.game_mode_settings:type_name -> underlords.CMsgGameModeSettings
	151, // 142: underlords.CMsgClientConnectionStarted.GameConstants.unit_tier_chances:type_name -> underlords.CMsgClientConnectionStarted.GameConstants.UnitChances
	143, // [143:143] is the sub-list for method output_type
	143, // [143:143] is the sub-list for method input_type
	143, // [143:143] is the sub-list for extension type_name
	143, // [143:143] is the sub-list for extension extendee
	0,   // [0:143] is the sub-list for field type_name
}

func init() { file_underlords_dac_gamemessages_proto_init() }
func file_underlords_dac_gamemessages_proto_init() {
	if File_underlords_dac_gamemessages_proto != nil {
		return
	}
	file_underlords_steammessages_proto_init()
	file_underlords_dac_gcmessages_common_proto_init()
	file_underlords_usermessages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_underlords_dac_gamemessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientReconnectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerStateUpdatesComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUnderlordLoadout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientUnderlordLoadoutList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerOrderProcessed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerCombinedHero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerAcquiredItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerRecievedUnitFromDuosPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerSelectedTalent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerCombatResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerWinStreak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerLevelUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgItemChangedOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerEliminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgShopItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTurboBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgUnderlordPickerOffering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSynergy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgItemSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBoardBuddy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMapProp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPublicPlayerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPublicPostMatchStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgIndividualPostMatchStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPrivatePlayerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameModeState_Normal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameModeState_Turbo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgDuos_TeamCombatResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameModeState_Duos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameModeState_TechPrototypeA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameModeState_Sandbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameModeState_Puzzle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameModeState_Tutorial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameModeState_Streetfight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DungeonActionCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameModeState_Dungeon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameModeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgUnitPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgUnitPositionAndFacing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgUnitAbilityCooldown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgUnitSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgUnitMeterDamageDealt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgUnitMeterDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgUnitMeterDamageTaken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgUnitMeterSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatMetersSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatDebugSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_Attack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_Damage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_AttackMissed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_AttackEvaded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_AttackBlocked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_Death); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_StartAttack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_SoundEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_SpeechEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_ModifierCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_ModifierDestroy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_StartGesture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_StopGesture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_CancelAttack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_CombatEnded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_Resurrect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent_CastAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatHighlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRoundCombat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBattle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRoundCombatGlobal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientServerHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetBufferContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetBufferRemoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientConnectionStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientConnectionComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientSetDebugNetBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDACNetBuffer_Debug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameReplayActionMarker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgModifierName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToServerChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToClientChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToServerClickMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToClientClickMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerMapPropCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToServerTeammateDuosMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToClientTeammateDuosMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToServerLoadShareCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToServerBoardBuddyCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToServerPuzzleLeaderboardCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRecordLocalBotStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToServerUpvoteNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToClientNotificationChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToServerLocalPlayerInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameStateIntegrationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameStateIntegrationBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameStateIntegrationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToServerInitData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientAccountSyncStorageFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerChallengeCompletePrediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerCombatResult_DamageSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPublicPlayerState_LoadoutItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPublicPostMatchStats_PlayerPerRoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPublicPostMatchStats_PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgIndividualPostMatchStats_Round); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgIndividualPostMatchStats_Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgIndividualPostMatchStats_Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgIndividualPostMatchStats_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgIndividualPostMatchStats_RankUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPrivatePlayerState_ItemChoiceReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPrivatePlayerState_Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPrivatePlayerState_ItemChoiceReward_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchState_TeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameModeState_Puzzle_ActiveRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatDebugSnapshot_PathfindingCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCombatDebugSnapshot_ActivePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRoundCombatGlobal_EventList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRoundCombatGlobal_CombatPlayerSlotToEventsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientConnectionStarted_GameConstants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientConnectionStarted_GameManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientConnectionStarted_GameConstants_UnitChances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgModifierName_Modifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToClientNotificationChanged_UpvoteSubtype); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gamemessages_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientToServerLocalPlayerInventory_LoadoutItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_underlords_dac_gamemessages_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*CMsgPlayerCombatResult_OpponentPlayerSlot)(nil),
		(*CMsgPlayerCombatResult_OpponentNeutralWave)(nil),
	}
	file_underlords_dac_gamemessages_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*CMsgPublicPlayerState_OpponentPlayerSlot)(nil),
		(*CMsgPublicPlayerState_OpponentNeutralWave)(nil),
	}
	file_underlords_dac_gamemessages_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*CMsgGameModeState_DetailsNormal)(nil),
		(*CMsgGameModeState_DetailsTurbo)(nil),
		(*CMsgGameModeState_DetailsDuos)(nil),
		(*CMsgGameModeState_DetailsTechPrototypeA)(nil),
		(*CMsgGameModeState_DetailsSandbox)(nil),
		(*CMsgGameModeState_DetailsPuzzle)(nil),
		(*CMsgGameModeState_DetailsTutorial)(nil),
		(*CMsgGameModeState_DetailsStreetfight)(nil),
		(*CMsgGameModeState_DetailsDungeon)(nil),
	}
	file_underlords_dac_gamemessages_proto_msgTypes[70].OneofWrappers = []interface{}{
		(*CMsgCombatEvent_DetailsAttack)(nil),
		(*CMsgCombatEvent_DetailsDamage)(nil),
		(*CMsgCombatEvent_DetailsDeath)(nil),
		(*CMsgCombatEvent_DetailsStartAttack)(nil),
		(*CMsgCombatEvent_DetailsSoundEvent)(nil),
		(*CMsgCombatEvent_DetailsParticleEvent)(nil),
		(*CMsgCombatEvent_DetailsModifierCreate)(nil),
		(*CMsgCombatEvent_DetailsModifierDestroy)(nil),
		(*CMsgCombatEvent_DetailsStartGesture)(nil),
		(*CMsgCombatEvent_DetailsCancelAttack)(nil),
		(*CMsgCombatEvent_DetailsCombatEnded)(nil),
		(*CMsgCombatEvent_DetailsAttackMissed)(nil),
		(*CMsgCombatEvent_DetailsAttackEvaded)(nil),
		(*CMsgCombatEvent_DetailsAttackBlocked)(nil),
		(*CMsgCombatEvent_DetailsResurrect)(nil),
		(*CMsgCombatEvent_DetailsSpeechEvent)(nil),
		(*CMsgCombatEvent_DetailsCastAbility)(nil),
		(*CMsgCombatEvent_DetailsStopGesture)(nil),
	}
	file_underlords_dac_gamemessages_proto_msgTypes[72].OneofWrappers = []interface{}{
		(*CMsgRoundCombat_OpponentPlayerSlot)(nil),
		(*CMsgRoundCombat_OpponentNeutralWave)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_underlords_dac_gamemessages_proto_rawDesc,
			NumEnums:      27,
			NumMessages:   128,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_underlords_dac_gamemessages_proto_goTypes,
		DependencyIndexes: file_underlords_dac_gamemessages_proto_depIdxs,
		EnumInfos:         file_underlords_dac_gamemessages_proto_enumTypes,
		MessageInfos:      file_underlords_dac_gamemessages_proto_msgTypes,
	}.Build()
	File_underlords_dac_gamemessages_proto = out.File
	file_underlords_dac_gamemessages_proto_rawDesc = nil
	file_underlords_dac_gamemessages_proto_goTypes = nil
	file_underlords_dac_gamemessages_proto_depIdxs = nil
}
