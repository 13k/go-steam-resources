// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: underlords/dac_gcmessages_server.proto

package underlords

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EGCDACServerMessages int32

const (
	EGCDACServerMessages_k_EMsgServerToGCMatchSignoutPermission         EGCDACServerMessages = 10001
	EGCDACServerMessages_k_EMsgServerToGCMatchSignoutPermissionResponse EGCDACServerMessages = 10002
	EGCDACServerMessages_k_EMsgServerToGCMatchSignout                   EGCDACServerMessages = 10003
	EGCDACServerMessages_k_EMsgServerToGCMatchSignoutResponse           EGCDACServerMessages = 10004
	EGCDACServerMessages_k_EMsgServerToGCIdlePing                       EGCDACServerMessages = 10005
	EGCDACServerMessages_k_EMsgGCToServerRequestPing                    EGCDACServerMessages = 10006
	EGCDACServerMessages_k_EMsgGCToServerAllocateForMatch               EGCDACServerMessages = 10007
	EGCDACServerMessages_k_EMsgGCToServerAllocateForMatchResponse       EGCDACServerMessages = 10008
	EGCDACServerMessages_k_EMsgServerToGCEnterMatchmaking               EGCDACServerMessages = 10009
	EGCDACServerMessages_k_EMsgGCToServerCancelAllocateForMatch         EGCDACServerMessages = 10010
	EGCDACServerMessages_k_EMsgServerToGCUpdateLobbyServerState         EGCDACServerMessages = 10011
	EGCDACServerMessages_k_EMsgServerToGCAbandonMatch                   EGCDACServerMessages = 10012
	EGCDACServerMessages_k_EMsgServerToGCAbandonMatchResponse           EGCDACServerMessages = 10013
	EGCDACServerMessages_k_EMsgServerToGCTestConnection                 EGCDACServerMessages = 10014
	EGCDACServerMessages_k_EMsgServerToGCTestConnectionResponse         EGCDACServerMessages = 10015
	EGCDACServerMessages_k_EMsgGCToServerAddSpectator                   EGCDACServerMessages = 10016
	EGCDACServerMessages_k_EMsgGCToServerAddSpectatorResponse           EGCDACServerMessages = 10017
	EGCDACServerMessages_k_EMsgGCToServerUpdateConsoleCommands          EGCDACServerMessages = 10018
	EGCDACServerMessages_k_EMsgServertoGCPuzzleResults                  EGCDACServerMessages = 10019
	EGCDACServerMessages_k_EMsgServertoGCPuzzleResultsResponse          EGCDACServerMessages = 10020
	EGCDACServerMessages_k_EMsgServertoGCPuzzleBestRequest              EGCDACServerMessages = 10021
	EGCDACServerMessages_k_EMsgServertoGCPuzzleBestResponse             EGCDACServerMessages = 10022
)

// Enum value maps for EGCDACServerMessages.
var (
	EGCDACServerMessages_name = map[int32]string{
		10001: "k_EMsgServerToGCMatchSignoutPermission",
		10002: "k_EMsgServerToGCMatchSignoutPermissionResponse",
		10003: "k_EMsgServerToGCMatchSignout",
		10004: "k_EMsgServerToGCMatchSignoutResponse",
		10005: "k_EMsgServerToGCIdlePing",
		10006: "k_EMsgGCToServerRequestPing",
		10007: "k_EMsgGCToServerAllocateForMatch",
		10008: "k_EMsgGCToServerAllocateForMatchResponse",
		10009: "k_EMsgServerToGCEnterMatchmaking",
		10010: "k_EMsgGCToServerCancelAllocateForMatch",
		10011: "k_EMsgServerToGCUpdateLobbyServerState",
		10012: "k_EMsgServerToGCAbandonMatch",
		10013: "k_EMsgServerToGCAbandonMatchResponse",
		10014: "k_EMsgServerToGCTestConnection",
		10015: "k_EMsgServerToGCTestConnectionResponse",
		10016: "k_EMsgGCToServerAddSpectator",
		10017: "k_EMsgGCToServerAddSpectatorResponse",
		10018: "k_EMsgGCToServerUpdateConsoleCommands",
		10019: "k_EMsgServertoGCPuzzleResults",
		10020: "k_EMsgServertoGCPuzzleResultsResponse",
		10021: "k_EMsgServertoGCPuzzleBestRequest",
		10022: "k_EMsgServertoGCPuzzleBestResponse",
	}
	EGCDACServerMessages_value = map[string]int32{
		"k_EMsgServerToGCMatchSignoutPermission":         10001,
		"k_EMsgServerToGCMatchSignoutPermissionResponse": 10002,
		"k_EMsgServerToGCMatchSignout":                   10003,
		"k_EMsgServerToGCMatchSignoutResponse":           10004,
		"k_EMsgServerToGCIdlePing":                       10005,
		"k_EMsgGCToServerRequestPing":                    10006,
		"k_EMsgGCToServerAllocateForMatch":               10007,
		"k_EMsgGCToServerAllocateForMatchResponse":       10008,
		"k_EMsgServerToGCEnterMatchmaking":               10009,
		"k_EMsgGCToServerCancelAllocateForMatch":         10010,
		"k_EMsgServerToGCUpdateLobbyServerState":         10011,
		"k_EMsgServerToGCAbandonMatch":                   10012,
		"k_EMsgServerToGCAbandonMatchResponse":           10013,
		"k_EMsgServerToGCTestConnection":                 10014,
		"k_EMsgServerToGCTestConnectionResponse":         10015,
		"k_EMsgGCToServerAddSpectator":                   10016,
		"k_EMsgGCToServerAddSpectatorResponse":           10017,
		"k_EMsgGCToServerUpdateConsoleCommands":          10018,
		"k_EMsgServertoGCPuzzleResults":                  10019,
		"k_EMsgServertoGCPuzzleResultsResponse":          10020,
		"k_EMsgServertoGCPuzzleBestRequest":              10021,
		"k_EMsgServertoGCPuzzleBestResponse":             10022,
	}
)

func (x EGCDACServerMessages) Enum() *EGCDACServerMessages {
	p := new(EGCDACServerMessages)
	*p = x
	return p
}

func (x EGCDACServerMessages) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCDACServerMessages) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_server_proto_enumTypes[0].Descriptor()
}

func (EGCDACServerMessages) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_server_proto_enumTypes[0]
}

func (x EGCDACServerMessages) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCDACServerMessages) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCDACServerMessages(num)
	return nil
}

// Deprecated: Use EGCDACServerMessages.Descriptor instead.
func (EGCDACServerMessages) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{0}
}

type EGCServerLobbyData int32

const (
	EGCServerLobbyData_k_EServerLobbyData_PlayerInfo    EGCServerLobbyData = 1
	EGCServerLobbyData_k_EServerLobbyData_PlayerMMR     EGCServerLobbyData = 2
	EGCServerLobbyData_k_EServerLobbyData_GameModifiers EGCServerLobbyData = 3
)

// Enum value maps for EGCServerLobbyData.
var (
	EGCServerLobbyData_name = map[int32]string{
		1: "k_EServerLobbyData_PlayerInfo",
		2: "k_EServerLobbyData_PlayerMMR",
		3: "k_EServerLobbyData_GameModifiers",
	}
	EGCServerLobbyData_value = map[string]int32{
		"k_EServerLobbyData_PlayerInfo":    1,
		"k_EServerLobbyData_PlayerMMR":     2,
		"k_EServerLobbyData_GameModifiers": 3,
	}
)

func (x EGCServerLobbyData) Enum() *EGCServerLobbyData {
	p := new(EGCServerLobbyData)
	*p = x
	return p
}

func (x EGCServerLobbyData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCServerLobbyData) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_server_proto_enumTypes[1].Descriptor()
}

func (EGCServerLobbyData) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_server_proto_enumTypes[1]
}

func (x EGCServerLobbyData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCServerLobbyData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCServerLobbyData(num)
	return nil
}

// Deprecated: Use EGCServerLobbyData.Descriptor instead.
func (EGCServerLobbyData) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{1}
}

type EGCServerSignoutData int32

const (
	EGCServerSignoutData_k_EMatchSignoutData_Disconnections      EGCServerSignoutData = 1
	EGCServerSignoutData_k_EMatchSignoutData_PerformanceStats    EGCServerSignoutData = 2
	EGCServerSignoutData_k_EMatchSignoutData_CombatStats         EGCServerSignoutData = 3
	EGCServerSignoutData_k_EMatchSignoutData_PostMatchStats      EGCServerSignoutData = 4
	EGCServerSignoutData_k_EPlayerSignoutData_MMRUpdate          EGCServerSignoutData = 10
	EGCServerSignoutData_k_EPlayerSignoutData_EventGrantProgress EGCServerSignoutData = 11
	EGCServerSignoutData_k_EPlayerSignoutData_ChatStats          EGCServerSignoutData = 12
	EGCServerSignoutData_k_EPlayerSignoutData_TeamUpdate         EGCServerSignoutData = 13
	EGCServerSignoutData_k_EPlayerSignoutData_MatchStats         EGCServerSignoutData = 14
)

// Enum value maps for EGCServerSignoutData.
var (
	EGCServerSignoutData_name = map[int32]string{
		1:  "k_EMatchSignoutData_Disconnections",
		2:  "k_EMatchSignoutData_PerformanceStats",
		3:  "k_EMatchSignoutData_CombatStats",
		4:  "k_EMatchSignoutData_PostMatchStats",
		10: "k_EPlayerSignoutData_MMRUpdate",
		11: "k_EPlayerSignoutData_EventGrantProgress",
		12: "k_EPlayerSignoutData_ChatStats",
		13: "k_EPlayerSignoutData_TeamUpdate",
		14: "k_EPlayerSignoutData_MatchStats",
	}
	EGCServerSignoutData_value = map[string]int32{
		"k_EMatchSignoutData_Disconnections":      1,
		"k_EMatchSignoutData_PerformanceStats":    2,
		"k_EMatchSignoutData_CombatStats":         3,
		"k_EMatchSignoutData_PostMatchStats":      4,
		"k_EPlayerSignoutData_MMRUpdate":          10,
		"k_EPlayerSignoutData_EventGrantProgress": 11,
		"k_EPlayerSignoutData_ChatStats":          12,
		"k_EPlayerSignoutData_TeamUpdate":         13,
		"k_EPlayerSignoutData_MatchStats":         14,
	}
)

func (x EGCServerSignoutData) Enum() *EGCServerSignoutData {
	p := new(EGCServerSignoutData)
	*p = x
	return p
}

func (x EGCServerSignoutData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCServerSignoutData) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_server_proto_enumTypes[2].Descriptor()
}

func (EGCServerSignoutData) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_server_proto_enumTypes[2]
}

func (x EGCServerSignoutData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCServerSignoutData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCServerSignoutData(num)
	return nil
}

// Deprecated: Use EGCServerSignoutData.Descriptor instead.
func (EGCServerSignoutData) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{2}
}

type CMsgServerToGCMatchSignoutResponse_ESignoutResult int32

const (
	CMsgServerToGCMatchSignoutResponse_k_ESignout_Failed_Retry             CMsgServerToGCMatchSignoutResponse_ESignoutResult = 1
	CMsgServerToGCMatchSignoutResponse_k_ESignout_Failed_NoRetry           CMsgServerToGCMatchSignoutResponse_ESignoutResult = 2
	CMsgServerToGCMatchSignoutResponse_k_ESignout_Failed_InFlight          CMsgServerToGCMatchSignoutResponse_ESignoutResult = 3
	CMsgServerToGCMatchSignoutResponse_k_ESignout_Success                  CMsgServerToGCMatchSignoutResponse_ESignoutResult = 4
	CMsgServerToGCMatchSignoutResponse_k_ESignout_Success_AlreadySignedOut CMsgServerToGCMatchSignoutResponse_ESignoutResult = 5
)

// Enum value maps for CMsgServerToGCMatchSignoutResponse_ESignoutResult.
var (
	CMsgServerToGCMatchSignoutResponse_ESignoutResult_name = map[int32]string{
		1: "k_ESignout_Failed_Retry",
		2: "k_ESignout_Failed_NoRetry",
		3: "k_ESignout_Failed_InFlight",
		4: "k_ESignout_Success",
		5: "k_ESignout_Success_AlreadySignedOut",
	}
	CMsgServerToGCMatchSignoutResponse_ESignoutResult_value = map[string]int32{
		"k_ESignout_Failed_Retry":             1,
		"k_ESignout_Failed_NoRetry":           2,
		"k_ESignout_Failed_InFlight":          3,
		"k_ESignout_Success":                  4,
		"k_ESignout_Success_AlreadySignedOut": 5,
	}
)

func (x CMsgServerToGCMatchSignoutResponse_ESignoutResult) Enum() *CMsgServerToGCMatchSignoutResponse_ESignoutResult {
	p := new(CMsgServerToGCMatchSignoutResponse_ESignoutResult)
	*p = x
	return p
}

func (x CMsgServerToGCMatchSignoutResponse_ESignoutResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgServerToGCMatchSignoutResponse_ESignoutResult) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_server_proto_enumTypes[3].Descriptor()
}

func (CMsgServerToGCMatchSignoutResponse_ESignoutResult) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_server_proto_enumTypes[3]
}

func (x CMsgServerToGCMatchSignoutResponse_ESignoutResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgServerToGCMatchSignoutResponse_ESignoutResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgServerToGCMatchSignoutResponse_ESignoutResult(num)
	return nil
}

// Deprecated: Use CMsgServerToGCMatchSignoutResponse_ESignoutResult.Descriptor instead.
func (CMsgServerToGCMatchSignoutResponse_ESignoutResult) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{15, 0}
}

type CMsgServerToGCAbandonMatch_EReason int32

const (
	CMsgServerToGCAbandonMatch_eReason_ServerCrash            CMsgServerToGCAbandonMatch_EReason = 1
	CMsgServerToGCAbandonMatch_eReason_ClientsFailedToConnect CMsgServerToGCAbandonMatch_EReason = 2
)

// Enum value maps for CMsgServerToGCAbandonMatch_EReason.
var (
	CMsgServerToGCAbandonMatch_EReason_name = map[int32]string{
		1: "eReason_ServerCrash",
		2: "eReason_ClientsFailedToConnect",
	}
	CMsgServerToGCAbandonMatch_EReason_value = map[string]int32{
		"eReason_ServerCrash":            1,
		"eReason_ClientsFailedToConnect": 2,
	}
)

func (x CMsgServerToGCAbandonMatch_EReason) Enum() *CMsgServerToGCAbandonMatch_EReason {
	p := new(CMsgServerToGCAbandonMatch_EReason)
	*p = x
	return p
}

func (x CMsgServerToGCAbandonMatch_EReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgServerToGCAbandonMatch_EReason) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_server_proto_enumTypes[4].Descriptor()
}

func (CMsgServerToGCAbandonMatch_EReason) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_server_proto_enumTypes[4]
}

func (x CMsgServerToGCAbandonMatch_EReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgServerToGCAbandonMatch_EReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgServerToGCAbandonMatch_EReason(num)
	return nil
}

// Deprecated: Use CMsgServerToGCAbandonMatch_EReason.Descriptor instead.
func (CMsgServerToGCAbandonMatch_EReason) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{26, 0}
}

type CMsgGCToServerAddSpectatorResponse_EResponse int32

const (
	CMsgGCToServerAddSpectatorResponse_k_eInternalError CMsgGCToServerAddSpectatorResponse_EResponse = 0
	CMsgGCToServerAddSpectatorResponse_k_eSuccess       CMsgGCToServerAddSpectatorResponse_EResponse = 1
	CMsgGCToServerAddSpectatorResponse_k_eServerFull    CMsgGCToServerAddSpectatorResponse_EResponse = 2
)

// Enum value maps for CMsgGCToServerAddSpectatorResponse_EResponse.
var (
	CMsgGCToServerAddSpectatorResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eServerFull",
	}
	CMsgGCToServerAddSpectatorResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eServerFull":    2,
	}
)

func (x CMsgGCToServerAddSpectatorResponse_EResponse) Enum() *CMsgGCToServerAddSpectatorResponse_EResponse {
	p := new(CMsgGCToServerAddSpectatorResponse_EResponse)
	*p = x
	return p
}

func (x CMsgGCToServerAddSpectatorResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToServerAddSpectatorResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_underlords_dac_gcmessages_server_proto_enumTypes[5].Descriptor()
}

func (CMsgGCToServerAddSpectatorResponse_EResponse) Type() protoreflect.EnumType {
	return &file_underlords_dac_gcmessages_server_proto_enumTypes[5]
}

func (x CMsgGCToServerAddSpectatorResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToServerAddSpectatorResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToServerAddSpectatorResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgGCToServerAddSpectatorResponse_EResponse.Descriptor instead.
func (CMsgGCToServerAddSpectatorResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{31, 0}
}

type CMsgServerCrashSentinelFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version             *uint32                               `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ServerSteamId       *uint64                               `protobuf:"fixed64,2,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	ServerPublicIpAddr  *uint32                               `protobuf:"fixed32,3,opt,name=server_public_ip_addr,json=serverPublicIpAddr" json:"server_public_ip_addr,omitempty"`
	ServerPort          *uint32                               `protobuf:"varint,4,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	ServerCluster       *uint32                               `protobuf:"varint,5,opt,name=server_cluster,json=serverCluster" json:"server_cluster,omitempty"`
	Pid                 *uint32                               `protobuf:"varint,6,opt,name=pid" json:"pid,omitempty"`
	SavedTime           *uint32                               `protobuf:"varint,7,opt,name=saved_time,json=savedTime" json:"saved_time,omitempty"`
	ServerVersion       *uint32                               `protobuf:"varint,8,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	GameInfo            *CMsgServerCrashSentinelFile_GameInfo `protobuf:"bytes,9,opt,name=game_info,json=gameInfo" json:"game_info,omitempty"`
	ServerPrivateIpAddr *uint32                               `protobuf:"varint,10,opt,name=server_private_ip_addr,json=serverPrivateIpAddr" json:"server_private_ip_addr,omitempty"`
	InstanceId          *uint32                               `protobuf:"varint,11,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (x *CMsgServerCrashSentinelFile) Reset() {
	*x = CMsgServerCrashSentinelFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerCrashSentinelFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerCrashSentinelFile) ProtoMessage() {}

func (x *CMsgServerCrashSentinelFile) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerCrashSentinelFile.ProtoReflect.Descriptor instead.
func (*CMsgServerCrashSentinelFile) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgServerCrashSentinelFile) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetServerPublicIpAddr() uint32 {
	if x != nil && x.ServerPublicIpAddr != nil {
		return *x.ServerPublicIpAddr
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetServerCluster() uint32 {
	if x != nil && x.ServerCluster != nil {
		return *x.ServerCluster
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetSavedTime() uint32 {
	if x != nil && x.SavedTime != nil {
		return *x.SavedTime
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetGameInfo() *CMsgServerCrashSentinelFile_GameInfo {
	if x != nil {
		return x.GameInfo
	}
	return nil
}

func (x *CMsgServerCrashSentinelFile) GetServerPrivateIpAddr() uint32 {
	if x != nil && x.ServerPrivateIpAddr != nil {
		return *x.ServerPrivateIpAddr
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile) GetInstanceId() uint32 {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return 0
}

type CServerLobbyData_PlayerMMR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players                     []*CServerLobbyData_PlayerMMR_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	Teams                       []*CServerLobbyData_PlayerMMR_Team   `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
	LordsEloK                   *uint32                              `protobuf:"varint,8,opt,name=lords_elo_k,json=lordsEloK" json:"lords_elo_k,omitempty"`
	DuosMmrLevelScoreChangeMult *float32                             `protobuf:"fixed32,9,opt,name=duos_mmr_level_score_change_mult,json=duosMmrLevelScoreChangeMult" json:"duos_mmr_level_score_change_mult,omitempty"`
	LordsEloKDuos               *uint32                              `protobuf:"varint,10,opt,name=lords_elo_k_duos,json=lordsEloKDuos" json:"lords_elo_k_duos,omitempty"`
}

func (x *CServerLobbyData_PlayerMMR) Reset() {
	*x = CServerLobbyData_PlayerMMR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerMMR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerMMR) ProtoMessage() {}

func (x *CServerLobbyData_PlayerMMR) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerMMR.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerMMR) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{1}
}

func (x *CServerLobbyData_PlayerMMR) GetPlayers() []*CServerLobbyData_PlayerMMR_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CServerLobbyData_PlayerMMR) GetTeams() []*CServerLobbyData_PlayerMMR_Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CServerLobbyData_PlayerMMR) GetLordsEloK() uint32 {
	if x != nil && x.LordsEloK != nil {
		return *x.LordsEloK
	}
	return 0
}

func (x *CServerLobbyData_PlayerMMR) GetDuosMmrLevelScoreChangeMult() float32 {
	if x != nil && x.DuosMmrLevelScoreChangeMult != nil {
		return *x.DuosMmrLevelScoreChangeMult
	}
	return 0
}

func (x *CServerLobbyData_PlayerMMR) GetLordsEloKDuos() uint32 {
	if x != nil && x.LordsEloKDuos != nil {
		return *x.LordsEloKDuos
	}
	return 0
}

type CServerLobbyData_GameModifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameModifiers *CMsgGameModifiers `protobuf:"bytes,1,opt,name=game_modifiers,json=gameModifiers" json:"game_modifiers,omitempty"`
}

func (x *CServerLobbyData_GameModifiers) Reset() {
	*x = CServerLobbyData_GameModifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_GameModifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_GameModifiers) ProtoMessage() {}

func (x *CServerLobbyData_GameModifiers) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_GameModifiers.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_GameModifiers) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{2}
}

func (x *CServerLobbyData_GameModifiers) GetGameModifiers() *CMsgGameModifiers {
	if x != nil {
		return x.GameModifiers
	}
	return nil
}

type CSODACServerDynamicLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId        *uint64  `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	LeftAccountIds []uint32 `protobuf:"varint,2,rep,packed,name=left_account_ids,json=leftAccountIds" json:"left_account_ids,omitempty"`
}

func (x *CSODACServerDynamicLobby) Reset() {
	*x = CSODACServerDynamicLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODACServerDynamicLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODACServerDynamicLobby) ProtoMessage() {}

func (x *CSODACServerDynamicLobby) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODACServerDynamicLobby.ProtoReflect.Descriptor instead.
func (*CSODACServerDynamicLobby) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{3}
}

func (x *CSODACServerDynamicLobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CSODACServerDynamicLobby) GetLeftAccountIds() []uint32 {
	if x != nil {
		return x.LeftAccountIds
	}
	return nil
}

type CSODACServerStaticLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtraMessages    []*CExtraMsgBlock                 `protobuf:"bytes,1,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	ServerSteamId    *uint64                           `protobuf:"fixed64,2,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	LobbyId          *uint64                           `protobuf:"varint,3,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ReplaySalt       *uint32                           `protobuf:"fixed32,4,opt,name=replay_salt,json=replaySalt" json:"replay_salt,omitempty"`
	ActiveEventId    *uint32                           `protobuf:"varint,5,opt,name=active_event_id,json=activeEventId" json:"active_event_id,omitempty"`
	Members          []*CSODACServerStaticLobby_Member `protobuf:"bytes,6,rep,name=members" json:"members,omitempty"`
	TrustedServer    *bool                             `protobuf:"varint,7,opt,name=trusted_server,json=trustedServer" json:"trusted_server,omitempty"`
	BotDifficulty    *EDACBotDifficulty                `protobuf:"varint,8,opt,name=bot_difficulty,json=botDifficulty,enum=underlords.EDACBotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	TeamInfo         []*CMsgTeamInfo                   `protobuf:"bytes,9,rep,name=team_info,json=teamInfo" json:"team_info,omitempty"`
	GameModeSettings *CMsgGameModeSettings             `protobuf:"bytes,10,opt,name=game_mode_settings,json=gameModeSettings" json:"game_mode_settings,omitempty"`
	FeatureControls  *string                           `protobuf:"bytes,11,opt,name=feature_controls,json=featureControls" json:"feature_controls,omitempty"`
}

// Default values for CSODACServerStaticLobby fields.
const (
	Default_CSODACServerStaticLobby_BotDifficulty = EDACBotDifficulty_k_EDACBotDifficulty_None
)

func (x *CSODACServerStaticLobby) Reset() {
	*x = CSODACServerStaticLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODACServerStaticLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODACServerStaticLobby) ProtoMessage() {}

func (x *CSODACServerStaticLobby) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODACServerStaticLobby.ProtoReflect.Descriptor instead.
func (*CSODACServerStaticLobby) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{4}
}

func (x *CSODACServerStaticLobby) GetExtraMessages() []*CExtraMsgBlock {
	if x != nil {
		return x.ExtraMessages
	}
	return nil
}

func (x *CSODACServerStaticLobby) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CSODACServerStaticLobby) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CSODACServerStaticLobby) GetReplaySalt() uint32 {
	if x != nil && x.ReplaySalt != nil {
		return *x.ReplaySalt
	}
	return 0
}

func (x *CSODACServerStaticLobby) GetActiveEventId() uint32 {
	if x != nil && x.ActiveEventId != nil {
		return *x.ActiveEventId
	}
	return 0
}

func (x *CSODACServerStaticLobby) GetMembers() []*CSODACServerStaticLobby_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CSODACServerStaticLobby) GetTrustedServer() bool {
	if x != nil && x.TrustedServer != nil {
		return *x.TrustedServer
	}
	return false
}

func (x *CSODACServerStaticLobby) GetBotDifficulty() EDACBotDifficulty {
	if x != nil && x.BotDifficulty != nil {
		return *x.BotDifficulty
	}
	return Default_CSODACServerStaticLobby_BotDifficulty
}

func (x *CSODACServerStaticLobby) GetTeamInfo() []*CMsgTeamInfo {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

func (x *CSODACServerStaticLobby) GetGameModeSettings() *CMsgGameModeSettings {
	if x != nil {
		return x.GameModeSettings
	}
	return nil
}

func (x *CSODACServerStaticLobby) GetFeatureControls() string {
	if x != nil && x.FeatureControls != nil {
		return *x.FeatureControls
	}
	return ""
}

type CMsgMatchSignoutData_PerformanceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartMemoryBytes    *uint32 `protobuf:"varint,1,opt,name=start_memory_bytes,json=startMemoryBytes" json:"start_memory_bytes,omitempty"`
	PeakMemoryBytes     *uint32 `protobuf:"varint,2,opt,name=peak_memory_bytes,json=peakMemoryBytes" json:"peak_memory_bytes,omitempty"`
	EndMemoryBytes      *uint32 `protobuf:"varint,3,opt,name=end_memory_bytes,json=endMemoryBytes" json:"end_memory_bytes,omitempty"`
	TotalUpdateTimeMs   *uint32 `protobuf:"varint,4,opt,name=total_update_time_ms,json=totalUpdateTimeMs" json:"total_update_time_ms,omitempty"`
	TotalMatchTimeMs    *uint32 `protobuf:"varint,5,opt,name=total_match_time_ms,json=totalMatchTimeMs" json:"total_match_time_ms,omitempty"`
	SentMessages        *uint32 `protobuf:"varint,6,opt,name=sent_messages,json=sentMessages" json:"sent_messages,omitempty"`
	ReceivedMessages    *uint32 `protobuf:"varint,7,opt,name=received_messages,json=receivedMessages" json:"received_messages,omitempty"`
	SentBytes           *uint32 `protobuf:"varint,8,opt,name=sent_bytes,json=sentBytes" json:"sent_bytes,omitempty"`
	ReceivedBytes       *uint32 `protobuf:"varint,9,opt,name=received_bytes,json=receivedBytes" json:"received_bytes,omitempty"`
	MaxUpdateTimeMicros *uint32 `protobuf:"varint,10,opt,name=max_update_time_micros,json=maxUpdateTimeMicros" json:"max_update_time_micros,omitempty"`
	NumUpdates          *uint32 `protobuf:"varint,11,opt,name=num_updates,json=numUpdates" json:"num_updates,omitempty"`
	ReplaySizeBytes     *uint32 `protobuf:"varint,12,opt,name=replay_size_bytes,json=replaySizeBytes" json:"replay_size_bytes,omitempty"`
}

func (x *CMsgMatchSignoutData_PerformanceStats) Reset() {
	*x = CMsgMatchSignoutData_PerformanceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchSignoutData_PerformanceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchSignoutData_PerformanceStats) ProtoMessage() {}

func (x *CMsgMatchSignoutData_PerformanceStats) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchSignoutData_PerformanceStats.ProtoReflect.Descriptor instead.
func (*CMsgMatchSignoutData_PerformanceStats) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgMatchSignoutData_PerformanceStats) GetStartMemoryBytes() uint32 {
	if x != nil && x.StartMemoryBytes != nil {
		return *x.StartMemoryBytes
	}
	return 0
}

func (x *CMsgMatchSignoutData_PerformanceStats) GetPeakMemoryBytes() uint32 {
	if x != nil && x.PeakMemoryBytes != nil {
		return *x.PeakMemoryBytes
	}
	return 0
}

func (x *CMsgMatchSignoutData_PerformanceStats) GetEndMemoryBytes() uint32 {
	if x != nil && x.EndMemoryBytes != nil {
		return *x.EndMemoryBytes
	}
	return 0
}

func (x *CMsgMatchSignoutData_PerformanceStats) GetTotalUpdateTimeMs() uint32 {
	if x != nil && x.TotalUpdateTimeMs != nil {
		return *x.TotalUpdateTimeMs
	}
	return 0
}

func (x *CMsgMatchSignoutData_PerformanceStats) GetTotalMatchTimeMs() uint32 {
	if x != nil && x.TotalMatchTimeMs != nil {
		return *x.TotalMatchTimeMs
	}
	return 0
}

func (x *CMsgMatchSignoutData_PerformanceStats) GetSentMessages() uint32 {
	if x != nil && x.SentMessages != nil {
		return *x.SentMessages
	}
	return 0
}

func (x *CMsgMatchSignoutData_PerformanceStats) GetReceivedMessages() uint32 {
	if x != nil && x.ReceivedMessages != nil {
		return *x.ReceivedMessages
	}
	return 0
}

func (x *CMsgMatchSignoutData_PerformanceStats) GetSentBytes() uint32 {
	if x != nil && x.SentBytes != nil {
		return *x.SentBytes
	}
	return 0
}

func (x *CMsgMatchSignoutData_PerformanceStats) GetReceivedBytes() uint32 {
	if x != nil && x.ReceivedBytes != nil {
		return *x.ReceivedBytes
	}
	return 0
}

func (x *CMsgMatchSignoutData_PerformanceStats) GetMaxUpdateTimeMicros() uint32 {
	if x != nil && x.MaxUpdateTimeMicros != nil {
		return *x.MaxUpdateTimeMicros
	}
	return 0
}

func (x *CMsgMatchSignoutData_PerformanceStats) GetNumUpdates() uint32 {
	if x != nil && x.NumUpdates != nil {
		return *x.NumUpdates
	}
	return 0
}

func (x *CMsgMatchSignoutData_PerformanceStats) GetReplaySizeBytes() uint32 {
	if x != nil && x.ReplaySizeBytes != nil {
		return *x.ReplaySizeBytes
	}
	return 0
}

type CMsgMatchDisconnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	DisconnectTime  *uint32 `protobuf:"varint,2,opt,name=disconnect_time,json=disconnectTime" json:"disconnect_time,omitempty"`
	ConnectionState *uint32 `protobuf:"varint,3,opt,name=connection_state,json=connectionState" json:"connection_state,omitempty"`
	ReasonCode      *uint32 `protobuf:"varint,4,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
	ReconnectDelay  *uint32 `protobuf:"varint,5,opt,name=reconnect_delay,json=reconnectDelay" json:"reconnect_delay,omitempty"`
}

func (x *CMsgMatchDisconnection) Reset() {
	*x = CMsgMatchDisconnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchDisconnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchDisconnection) ProtoMessage() {}

func (x *CMsgMatchDisconnection) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchDisconnection.ProtoReflect.Descriptor instead.
func (*CMsgMatchDisconnection) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgMatchDisconnection) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgMatchDisconnection) GetDisconnectTime() uint32 {
	if x != nil && x.DisconnectTime != nil {
		return *x.DisconnectTime
	}
	return 0
}

func (x *CMsgMatchDisconnection) GetConnectionState() uint32 {
	if x != nil && x.ConnectionState != nil {
		return *x.ConnectionState
	}
	return 0
}

func (x *CMsgMatchDisconnection) GetReasonCode() uint32 {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return 0
}

func (x *CMsgMatchDisconnection) GetReconnectDelay() uint32 {
	if x != nil && x.ReconnectDelay != nil {
		return *x.ReconnectDelay
	}
	return 0
}

type CMsgMatchSignoutData_Disconnections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disconnections []*CMsgMatchDisconnection `protobuf:"bytes,1,rep,name=disconnections" json:"disconnections,omitempty"`
}

func (x *CMsgMatchSignoutData_Disconnections) Reset() {
	*x = CMsgMatchSignoutData_Disconnections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchSignoutData_Disconnections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchSignoutData_Disconnections) ProtoMessage() {}

func (x *CMsgMatchSignoutData_Disconnections) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchSignoutData_Disconnections.ProtoReflect.Descriptor instead.
func (*CMsgMatchSignoutData_Disconnections) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgMatchSignoutData_Disconnections) GetDisconnections() []*CMsgMatchDisconnection {
	if x != nil {
		return x.Disconnections
	}
	return nil
}

type CMsgMatchSignoutData_CombatStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CombatRounds []*CMsgMatchSignoutData_CombatStats_CombatRound `protobuf:"bytes,1,rep,name=combat_rounds,json=combatRounds" json:"combat_rounds,omitempty"`
	MatchMmr     *uint32                                         `protobuf:"varint,2,opt,name=match_mmr,json=matchMmr" json:"match_mmr,omitempty"`
	FinalPlaces  []*CMsgMatchSignoutData_CombatStats_FinalPlaces `protobuf:"bytes,3,rep,name=final_places,json=finalPlaces" json:"final_places,omitempty"`
}

func (x *CMsgMatchSignoutData_CombatStats) Reset() {
	*x = CMsgMatchSignoutData_CombatStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchSignoutData_CombatStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchSignoutData_CombatStats) ProtoMessage() {}

func (x *CMsgMatchSignoutData_CombatStats) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchSignoutData_CombatStats.ProtoReflect.Descriptor instead.
func (*CMsgMatchSignoutData_CombatStats) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgMatchSignoutData_CombatStats) GetCombatRounds() []*CMsgMatchSignoutData_CombatStats_CombatRound {
	if x != nil {
		return x.CombatRounds
	}
	return nil
}

func (x *CMsgMatchSignoutData_CombatStats) GetMatchMmr() uint32 {
	if x != nil && x.MatchMmr != nil {
		return *x.MatchMmr
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats) GetFinalPlaces() []*CMsgMatchSignoutData_CombatStats_FinalPlaces {
	if x != nil {
		return x.FinalPlaces
	}
	return nil
}

type CMsgPlayerSignoutData_MMRUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinalPlace *uint32                                     `protobuf:"varint,1,opt,name=final_place,json=finalPlace" json:"final_place,omitempty"`
	Opponents  []*CMsgPlayerSignoutData_MMRUpdate_Opponent `protobuf:"bytes,2,rep,name=opponents" json:"opponents,omitempty"`
}

func (x *CMsgPlayerSignoutData_MMRUpdate) Reset() {
	*x = CMsgPlayerSignoutData_MMRUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerSignoutData_MMRUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerSignoutData_MMRUpdate) ProtoMessage() {}

func (x *CMsgPlayerSignoutData_MMRUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerSignoutData_MMRUpdate.ProtoReflect.Descriptor instead.
func (*CMsgPlayerSignoutData_MMRUpdate) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgPlayerSignoutData_MMRUpdate) GetFinalPlace() uint32 {
	if x != nil && x.FinalPlace != nil {
		return *x.FinalPlace
	}
	return 0
}

func (x *CMsgPlayerSignoutData_MMRUpdate) GetOpponents() []*CMsgPlayerSignoutData_MMRUpdate_Opponent {
	if x != nil {
		return x.Opponents
	}
	return nil
}

type CMsgPlayerSignoutData_MatchStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchStats []*CMsgPlayerSignoutData_MatchStats_MatchStat `protobuf:"bytes,1,rep,name=match_stats,json=matchStats" json:"match_stats,omitempty"`
}

func (x *CMsgPlayerSignoutData_MatchStats) Reset() {
	*x = CMsgPlayerSignoutData_MatchStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerSignoutData_MatchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerSignoutData_MatchStats) ProtoMessage() {}

func (x *CMsgPlayerSignoutData_MatchStats) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerSignoutData_MatchStats.ProtoReflect.Descriptor instead.
func (*CMsgPlayerSignoutData_MatchStats) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgPlayerSignoutData_MatchStats) GetMatchStats() []*CMsgPlayerSignoutData_MatchStats_MatchStat {
	if x != nil {
		return x.MatchStats
	}
	return nil
}

type CMsgPlayerSignoutData_EventGrantProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    *uint32                                               `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Currencies []*CMsgPlayerSignoutData_EventGrantProgress_Currency  `protobuf:"bytes,2,rep,name=currencies" json:"currencies,omitempty"`
	Challenges []*CMsgPlayerSignoutData_EventGrantProgress_Challenge `protobuf:"bytes,4,rep,name=challenges" json:"challenges,omitempty"`
}

func (x *CMsgPlayerSignoutData_EventGrantProgress) Reset() {
	*x = CMsgPlayerSignoutData_EventGrantProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerSignoutData_EventGrantProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerSignoutData_EventGrantProgress) ProtoMessage() {}

func (x *CMsgPlayerSignoutData_EventGrantProgress) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerSignoutData_EventGrantProgress.ProtoReflect.Descriptor instead.
func (*CMsgPlayerSignoutData_EventGrantProgress) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgPlayerSignoutData_EventGrantProgress) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgPlayerSignoutData_EventGrantProgress) GetCurrencies() []*CMsgPlayerSignoutData_EventGrantProgress_Currency {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *CMsgPlayerSignoutData_EventGrantProgress) GetChallenges() []*CMsgPlayerSignoutData_EventGrantProgress_Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

type CMsgPlayerSignoutData_ChatStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YoCount         *uint32 `protobuf:"varint,3,opt,name=yo_count,json=yoCount" json:"yo_count,omitempty"`
	ChatLineCount   *uint32 `protobuf:"varint,4,opt,name=chat_line_count,json=chatLineCount" json:"chat_line_count,omitempty"`
	CombatLineCount *uint32 `protobuf:"varint,5,opt,name=combat_line_count,json=combatLineCount" json:"combat_line_count,omitempty"`
}

func (x *CMsgPlayerSignoutData_ChatStats) Reset() {
	*x = CMsgPlayerSignoutData_ChatStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerSignoutData_ChatStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerSignoutData_ChatStats) ProtoMessage() {}

func (x *CMsgPlayerSignoutData_ChatStats) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerSignoutData_ChatStats.ProtoReflect.Descriptor instead.
func (*CMsgPlayerSignoutData_ChatStats) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgPlayerSignoutData_ChatStats) GetYoCount() uint32 {
	if x != nil && x.YoCount != nil {
		return *x.YoCount
	}
	return 0
}

func (x *CMsgPlayerSignoutData_ChatStats) GetChatLineCount() uint32 {
	if x != nil && x.ChatLineCount != nil {
		return *x.ChatLineCount
	}
	return 0
}

func (x *CMsgPlayerSignoutData_ChatStats) GetCombatLineCount() uint32 {
	if x != nil && x.CombatLineCount != nil {
		return *x.CombatLineCount
	}
	return 0
}

type CMsgPlayerSignoutData_TeamUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherTeamMember *uint32 `protobuf:"varint,1,opt,name=other_team_member,json=otherTeamMember" json:"other_team_member,omitempty"`
	FinalPlace      *uint32 `protobuf:"varint,2,opt,name=final_place,json=finalPlace" json:"final_place,omitempty"`
}

func (x *CMsgPlayerSignoutData_TeamUpdate) Reset() {
	*x = CMsgPlayerSignoutData_TeamUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerSignoutData_TeamUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerSignoutData_TeamUpdate) ProtoMessage() {}

func (x *CMsgPlayerSignoutData_TeamUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerSignoutData_TeamUpdate.ProtoReflect.Descriptor instead.
func (*CMsgPlayerSignoutData_TeamUpdate) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgPlayerSignoutData_TeamUpdate) GetOtherTeamMember() uint32 {
	if x != nil && x.OtherTeamMember != nil {
		return *x.OtherTeamMember
	}
	return 0
}

func (x *CMsgPlayerSignoutData_TeamUpdate) GetFinalPlace() uint32 {
	if x != nil && x.FinalPlace != nil {
		return *x.FinalPlace
	}
	return 0
}

type CMsgServerToGCMatchSignout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId            *uint64                                     `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ShouldSignoutMatch *bool                                       `protobuf:"varint,2,opt,name=should_signout_match,json=shouldSignoutMatch" json:"should_signout_match,omitempty"`
	MatchSignout       *CMsgServerToGCMatchSignout_MatchSignout    `protobuf:"bytes,3,opt,name=match_signout,json=matchSignout" json:"match_signout,omitempty"`
	PlayerSignouts     []*CMsgServerToGCMatchSignout_PlayerSignout `protobuf:"bytes,4,rep,name=player_signouts,json=playerSignouts" json:"player_signouts,omitempty"`
	SignoutStartTime   *uint32                                     `protobuf:"varint,5,opt,name=signout_start_time,json=signoutStartTime" json:"signout_start_time,omitempty"`
}

func (x *CMsgServerToGCMatchSignout) Reset() {
	*x = CMsgServerToGCMatchSignout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchSignout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchSignout) ProtoMessage() {}

func (x *CMsgServerToGCMatchSignout) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchSignout.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchSignout) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgServerToGCMatchSignout) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgServerToGCMatchSignout) GetShouldSignoutMatch() bool {
	if x != nil && x.ShouldSignoutMatch != nil {
		return *x.ShouldSignoutMatch
	}
	return false
}

func (x *CMsgServerToGCMatchSignout) GetMatchSignout() *CMsgServerToGCMatchSignout_MatchSignout {
	if x != nil {
		return x.MatchSignout
	}
	return nil
}

func (x *CMsgServerToGCMatchSignout) GetPlayerSignouts() []*CMsgServerToGCMatchSignout_PlayerSignout {
	if x != nil {
		return x.PlayerSignouts
	}
	return nil
}

func (x *CMsgServerToGCMatchSignout) GetSignoutStartTime() uint32 {
	if x != nil && x.SignoutStartTime != nil {
		return *x.SignoutStartTime
	}
	return 0
}

type CMsgServerToGCMatchSignoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CMsgServerToGCMatchSignoutResponse_ESignoutResult `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgServerToGCMatchSignoutResponse_ESignoutResult,def=1" json:"result,omitempty"`
}

// Default values for CMsgServerToGCMatchSignoutResponse fields.
const (
	Default_CMsgServerToGCMatchSignoutResponse_Result = CMsgServerToGCMatchSignoutResponse_k_ESignout_Failed_Retry
)

func (x *CMsgServerToGCMatchSignoutResponse) Reset() {
	*x = CMsgServerToGCMatchSignoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchSignoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchSignoutResponse) ProtoMessage() {}

func (x *CMsgServerToGCMatchSignoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchSignoutResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchSignoutResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgServerToGCMatchSignoutResponse) GetResult() CMsgServerToGCMatchSignoutResponse_ESignoutResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgServerToGCMatchSignoutResponse_Result
}

type CMsgServerWelcomeDAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsoleCommands []string `protobuf:"bytes,1,rep,name=console_commands,json=consoleCommands" json:"console_commands,omitempty"`
}

func (x *CMsgServerWelcomeDAC) Reset() {
	*x = CMsgServerWelcomeDAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerWelcomeDAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerWelcomeDAC) ProtoMessage() {}

func (x *CMsgServerWelcomeDAC) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerWelcomeDAC.ProtoReflect.Descriptor instead.
func (*CMsgServerWelcomeDAC) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgServerWelcomeDAC) GetConsoleCommands() []string {
	if x != nil {
		return x.ConsoleCommands
	}
	return nil
}

type CMsgServerToGCIdlePing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerVersion *uint32 `protobuf:"varint,1,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
}

func (x *CMsgServerToGCIdlePing) Reset() {
	*x = CMsgServerToGCIdlePing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCIdlePing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCIdlePing) ProtoMessage() {}

func (x *CMsgServerToGCIdlePing) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCIdlePing.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCIdlePing) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgServerToGCIdlePing) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

type CMsgGCToServerRequestPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCToServerRequestPing) Reset() {
	*x = CMsgGCToServerRequestPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerRequestPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerRequestPing) ProtoMessage() {}

func (x *CMsgGCToServerRequestPing) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerRequestPing.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerRequestPing) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{18}
}

type CMsgGCToServerAllocateForMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgGCToServerAllocateForMatch) Reset() {
	*x = CMsgGCToServerAllocateForMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerAllocateForMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerAllocateForMatch) ProtoMessage() {}

func (x *CMsgGCToServerAllocateForMatch) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerAllocateForMatch.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerAllocateForMatch) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgGCToServerAllocateForMatch) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgGCToServerAllocateForMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (x *CMsgGCToServerAllocateForMatchResponse) Reset() {
	*x = CMsgGCToServerAllocateForMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerAllocateForMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerAllocateForMatchResponse) ProtoMessage() {}

func (x *CMsgGCToServerAllocateForMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerAllocateForMatchResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerAllocateForMatchResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgGCToServerAllocateForMatchResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CMsgServerToGCMatchSignoutPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId           *uint64        `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	MatchMode         *EDACMatchMode `protobuf:"varint,2,opt,name=match_mode,json=matchMode,enum=underlords.EDACMatchMode,def=0" json:"match_mode,omitempty"`
	FailedSignouts    *uint32        `protobuf:"varint,3,opt,name=failed_signouts,json=failedSignouts" json:"failed_signouts,omitempty"`
	PermissionRequest *uint32        `protobuf:"varint,4,opt,name=permission_request,json=permissionRequest" json:"permission_request,omitempty"`
	GameMode          *EDACGameMode  `protobuf:"varint,5,opt,name=game_mode,json=gameMode,enum=underlords.EDACGameMode,def=0" json:"game_mode,omitempty"`
}

// Default values for CMsgServerToGCMatchSignoutPermission fields.
const (
	Default_CMsgServerToGCMatchSignoutPermission_MatchMode = EDACMatchMode_k_EDACMatchMode_Invalid
	Default_CMsgServerToGCMatchSignoutPermission_GameMode  = EDACGameMode_k_EDACGameMode_Invalid
)

func (x *CMsgServerToGCMatchSignoutPermission) Reset() {
	*x = CMsgServerToGCMatchSignoutPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchSignoutPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchSignoutPermission) ProtoMessage() {}

func (x *CMsgServerToGCMatchSignoutPermission) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchSignoutPermission.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchSignoutPermission) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgServerToGCMatchSignoutPermission) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgServerToGCMatchSignoutPermission) GetMatchMode() EDACMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return Default_CMsgServerToGCMatchSignoutPermission_MatchMode
}

func (x *CMsgServerToGCMatchSignoutPermission) GetFailedSignouts() uint32 {
	if x != nil && x.FailedSignouts != nil {
		return *x.FailedSignouts
	}
	return 0
}

func (x *CMsgServerToGCMatchSignoutPermission) GetPermissionRequest() uint32 {
	if x != nil && x.PermissionRequest != nil {
		return *x.PermissionRequest
	}
	return 0
}

func (x *CMsgServerToGCMatchSignoutPermission) GetGameMode() EDACGameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgServerToGCMatchSignoutPermission_GameMode
}

type CMsgServerToGCMatchSignoutPermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanSignOut    *bool                  `protobuf:"varint,1,opt,name=can_sign_out,json=canSignOut" json:"can_sign_out,omitempty"`
	RetryTimeS    *uint32                `protobuf:"varint,2,opt,name=retry_time_s,json=retryTimeS" json:"retry_time_s,omitempty"`
	RequestedData []EGCServerSignoutData `protobuf:"varint,3,rep,name=requested_data,json=requestedData,enum=underlords.EGCServerSignoutData" json:"requested_data,omitempty"`
}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) Reset() {
	*x = CMsgServerToGCMatchSignoutPermissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchSignoutPermissionResponse) ProtoMessage() {}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchSignoutPermissionResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchSignoutPermissionResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) GetCanSignOut() bool {
	if x != nil && x.CanSignOut != nil {
		return *x.CanSignOut
	}
	return false
}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) GetRetryTimeS() uint32 {
	if x != nil && x.RetryTimeS != nil {
		return *x.RetryTimeS
	}
	return 0
}

func (x *CMsgServerToGCMatchSignoutPermissionResponse) GetRequestedData() []EGCServerSignoutData {
	if x != nil {
		return x.RequestedData
	}
	return nil
}

type CMsgServerToGCEnterMatchmaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerVersion   *uint32 `protobuf:"varint,1,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	SearchKey       *string `protobuf:"bytes,2,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	RegionId        *uint32 `protobuf:"varint,3,opt,name=region_id,json=regionId" json:"region_id,omitempty"`
	ClusterId       *uint32 `protobuf:"varint,4,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	ServerPublicIp  *uint32 `protobuf:"varint,5,opt,name=server_public_ip,json=serverPublicIp" json:"server_public_ip,omitempty"`
	ServerPrivateIp *uint32 `protobuf:"varint,6,opt,name=server_private_ip,json=serverPrivateIp" json:"server_private_ip,omitempty"`
	ServerPort      *uint32 `protobuf:"varint,7,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	SdrAddress      []byte  `protobuf:"bytes,9,opt,name=sdr_address,json=sdrAddress" json:"sdr_address,omitempty"`
}

func (x *CMsgServerToGCEnterMatchmaking) Reset() {
	*x = CMsgServerToGCEnterMatchmaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCEnterMatchmaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCEnterMatchmaking) ProtoMessage() {}

func (x *CMsgServerToGCEnterMatchmaking) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCEnterMatchmaking.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCEnterMatchmaking) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgServerToGCEnterMatchmaking) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetSearchKey() string {
	if x != nil && x.SearchKey != nil {
		return *x.SearchKey
	}
	return ""
}

func (x *CMsgServerToGCEnterMatchmaking) GetRegionId() uint32 {
	if x != nil && x.RegionId != nil {
		return *x.RegionId
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetServerPublicIp() uint32 {
	if x != nil && x.ServerPublicIp != nil {
		return *x.ServerPublicIp
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetServerPrivateIp() uint32 {
	if x != nil && x.ServerPrivateIp != nil {
		return *x.ServerPrivateIp
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CMsgServerToGCEnterMatchmaking) GetSdrAddress() []byte {
	if x != nil {
		return x.SdrAddress
	}
	return nil
}

type CMsgGCToServerCancelAllocateForMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (x *CMsgGCToServerCancelAllocateForMatch) Reset() {
	*x = CMsgGCToServerCancelAllocateForMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerCancelAllocateForMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerCancelAllocateForMatch) ProtoMessage() {}

func (x *CMsgGCToServerCancelAllocateForMatch) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerCancelAllocateForMatch.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerCancelAllocateForMatch) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgGCToServerCancelAllocateForMatch) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgServerToGCUpdateLobbyServerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId     *uint64            `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ServerState *ELobbyServerState `protobuf:"varint,2,opt,name=server_state,json=serverState,enum=underlords.ELobbyServerState,def=0" json:"server_state,omitempty"`
}

// Default values for CMsgServerToGCUpdateLobbyServerState fields.
const (
	Default_CMsgServerToGCUpdateLobbyServerState_ServerState = ELobbyServerState_k_eLobbyServerState_Assign
)

func (x *CMsgServerToGCUpdateLobbyServerState) Reset() {
	*x = CMsgServerToGCUpdateLobbyServerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCUpdateLobbyServerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCUpdateLobbyServerState) ProtoMessage() {}

func (x *CMsgServerToGCUpdateLobbyServerState) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCUpdateLobbyServerState.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCUpdateLobbyServerState) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgServerToGCUpdateLobbyServerState) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgServerToGCUpdateLobbyServerState) GetServerState() ELobbyServerState {
	if x != nil && x.ServerState != nil {
		return *x.ServerState
	}
	return Default_CMsgServerToGCUpdateLobbyServerState_ServerState
}

type CMsgServerToGCAbandonMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSteamId    *uint64                              `protobuf:"fixed64,1,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	LobbyId          *uint64                              `protobuf:"fixed64,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ClusterId        *uint32                              `protobuf:"varint,3,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	ReasonCode       *CMsgServerToGCAbandonMatch_EReason  `protobuf:"varint,4,opt,name=reason_code,json=reasonCode,enum=underlords.CMsgServerToGCAbandonMatch_EReason,def=1" json:"reason_code,omitempty"`
	AdditionalData   *uint64                              `protobuf:"varint,5,opt,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
	MatchId          *uint64                              `protobuf:"varint,6,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Players          []*CMsgServerToGCAbandonMatch_Player `protobuf:"bytes,8,rep,name=players" json:"players,omitempty"`
	PublicIpAddress  *uint32                              `protobuf:"fixed32,9,opt,name=public_ip_address,json=publicIpAddress" json:"public_ip_address,omitempty"`
	Port             *uint32                              `protobuf:"varint,10,opt,name=port" json:"port,omitempty"`
	ServerVersion    *uint32                              `protobuf:"varint,11,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	Pid              *uint32                              `protobuf:"varint,12,opt,name=pid" json:"pid,omitempty"`
	InstanceId       *uint32                              `protobuf:"varint,13,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	PrivateIpAddress *uint32                              `protobuf:"varint,14,opt,name=private_ip_address,json=privateIpAddress" json:"private_ip_address,omitempty"`
}

// Default values for CMsgServerToGCAbandonMatch fields.
const (
	Default_CMsgServerToGCAbandonMatch_ReasonCode = CMsgServerToGCAbandonMatch_eReason_ServerCrash
)

func (x *CMsgServerToGCAbandonMatch) Reset() {
	*x = CMsgServerToGCAbandonMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCAbandonMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCAbandonMatch) ProtoMessage() {}

func (x *CMsgServerToGCAbandonMatch) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCAbandonMatch.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCAbandonMatch) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgServerToGCAbandonMatch) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetReasonCode() CMsgServerToGCAbandonMatch_EReason {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return Default_CMsgServerToGCAbandonMatch_ReasonCode
}

func (x *CMsgServerToGCAbandonMatch) GetAdditionalData() uint64 {
	if x != nil && x.AdditionalData != nil {
		return *x.AdditionalData
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetPlayers() []*CMsgServerToGCAbandonMatch_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgServerToGCAbandonMatch) GetPublicIpAddress() uint32 {
	if x != nil && x.PublicIpAddress != nil {
		return *x.PublicIpAddress
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetServerVersion() uint32 {
	if x != nil && x.ServerVersion != nil {
		return *x.ServerVersion
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetInstanceId() uint32 {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch) GetPrivateIpAddress() uint32 {
	if x != nil && x.PrivateIpAddress != nil {
		return *x.PrivateIpAddress
	}
	return 0
}

type CMsgServerToGCAbandonMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgServerToGCAbandonMatchResponse) Reset() {
	*x = CMsgServerToGCAbandonMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCAbandonMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCAbandonMatchResponse) ProtoMessage() {}

func (x *CMsgServerToGCAbandonMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCAbandonMatchResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCAbandonMatchResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{27}
}

type CMsgServerToGCTestConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestPayload []byte `protobuf:"bytes,1,opt,name=test_payload,json=testPayload" json:"test_payload,omitempty"`
}

func (x *CMsgServerToGCTestConnection) Reset() {
	*x = CMsgServerToGCTestConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCTestConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCTestConnection) ProtoMessage() {}

func (x *CMsgServerToGCTestConnection) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCTestConnection.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCTestConnection) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgServerToGCTestConnection) GetTestPayload() []byte {
	if x != nil {
		return x.TestPayload
	}
	return nil
}

type CMsgServerToGCTestConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   *uint32 `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
	LobbyId *uint64 `protobuf:"varint,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
}

func (x *CMsgServerToGCTestConnectionResponse) Reset() {
	*x = CMsgServerToGCTestConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCTestConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCTestConnectionResponse) ProtoMessage() {}

func (x *CMsgServerToGCTestConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCTestConnectionResponse.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCTestConnectionResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgServerToGCTestConnectionResponse) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CMsgServerToGCTestConnectionResponse) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

type CMsgGCToServerAddSpectator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LobbyId           *uint64 `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	AccountId         *uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AccountToSpectate *uint32 `protobuf:"varint,3,opt,name=account_to_spectate,json=accountToSpectate" json:"account_to_spectate,omitempty"`
}

func (x *CMsgGCToServerAddSpectator) Reset() {
	*x = CMsgGCToServerAddSpectator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerAddSpectator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerAddSpectator) ProtoMessage() {}

func (x *CMsgGCToServerAddSpectator) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerAddSpectator.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerAddSpectator) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgGCToServerAddSpectator) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgGCToServerAddSpectator) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCToServerAddSpectator) GetAccountToSpectate() uint32 {
	if x != nil && x.AccountToSpectate != nil {
		return *x.AccountToSpectate
	}
	return 0
}

type CMsgGCToServerAddSpectatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result            *CMsgGCToServerAddSpectatorResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=underlords.CMsgGCToServerAddSpectatorResponse_EResponse,def=0" json:"result,omitempty"`
	AccountToSpectate *uint32                                       `protobuf:"varint,2,opt,name=account_to_spectate,json=accountToSpectate" json:"account_to_spectate,omitempty"`
}

// Default values for CMsgGCToServerAddSpectatorResponse fields.
const (
	Default_CMsgGCToServerAddSpectatorResponse_Result = CMsgGCToServerAddSpectatorResponse_k_eInternalError
)

func (x *CMsgGCToServerAddSpectatorResponse) Reset() {
	*x = CMsgGCToServerAddSpectatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerAddSpectatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerAddSpectatorResponse) ProtoMessage() {}

func (x *CMsgGCToServerAddSpectatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerAddSpectatorResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerAddSpectatorResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgGCToServerAddSpectatorResponse) GetResult() CMsgGCToServerAddSpectatorResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgGCToServerAddSpectatorResponse_Result
}

func (x *CMsgGCToServerAddSpectatorResponse) GetAccountToSpectate() uint32 {
	if x != nil && x.AccountToSpectate != nil {
		return *x.AccountToSpectate
	}
	return 0
}

type CMsgGCToServerUpdateConsoleCommands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsoleCommands []string `protobuf:"bytes,1,rep,name=console_commands,json=consoleCommands" json:"console_commands,omitempty"`
}

func (x *CMsgGCToServerUpdateConsoleCommands) Reset() {
	*x = CMsgGCToServerUpdateConsoleCommands{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToServerUpdateConsoleCommands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToServerUpdateConsoleCommands) ProtoMessage() {}

func (x *CMsgGCToServerUpdateConsoleCommands) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToServerUpdateConsoleCommands.ProtoReflect.Descriptor instead.
func (*CMsgGCToServerUpdateConsoleCommands) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgGCToServerUpdateConsoleCommands) GetConsoleCommands() []string {
	if x != nil {
		return x.ConsoleCommands
	}
	return nil
}

type CMsgServertoGCPuzzleResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PuzzleId  *uint32 `protobuf:"varint,2,opt,name=puzzle_id,json=puzzleId" json:"puzzle_id,omitempty"`
	BoardCode *string `protobuf:"bytes,3,opt,name=board_code,json=boardCode" json:"board_code,omitempty"`
	Gold      *uint32 `protobuf:"varint,4,opt,name=gold" json:"gold,omitempty"`
	Time      *uint32 `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
	HealthPct *uint32 `protobuf:"varint,6,opt,name=health_pct,json=healthPct" json:"health_pct,omitempty"`
	Units     *uint32 `protobuf:"varint,7,opt,name=units" json:"units,omitempty"`
}

func (x *CMsgServertoGCPuzzleResults) Reset() {
	*x = CMsgServertoGCPuzzleResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServertoGCPuzzleResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServertoGCPuzzleResults) ProtoMessage() {}

func (x *CMsgServertoGCPuzzleResults) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServertoGCPuzzleResults.ProtoReflect.Descriptor instead.
func (*CMsgServertoGCPuzzleResults) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgServertoGCPuzzleResults) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServertoGCPuzzleResults) GetPuzzleId() uint32 {
	if x != nil && x.PuzzleId != nil {
		return *x.PuzzleId
	}
	return 0
}

func (x *CMsgServertoGCPuzzleResults) GetBoardCode() string {
	if x != nil && x.BoardCode != nil {
		return *x.BoardCode
	}
	return ""
}

func (x *CMsgServertoGCPuzzleResults) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *CMsgServertoGCPuzzleResults) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CMsgServertoGCPuzzleResults) GetHealthPct() uint32 {
	if x != nil && x.HealthPct != nil {
		return *x.HealthPct
	}
	return 0
}

func (x *CMsgServertoGCPuzzleResults) GetUnits() uint32 {
	if x != nil && x.Units != nil {
		return *x.Units
	}
	return 0
}

type CMsgServertoGCPuzzleResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistogramList *CMsgPuzzleLeaderboardHistogramList `protobuf:"bytes,1,opt,name=histogram_list,json=histogramList" json:"histogram_list,omitempty"`
}

func (x *CMsgServertoGCPuzzleResultsResponse) Reset() {
	*x = CMsgServertoGCPuzzleResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServertoGCPuzzleResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServertoGCPuzzleResultsResponse) ProtoMessage() {}

func (x *CMsgServertoGCPuzzleResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServertoGCPuzzleResultsResponse.ProtoReflect.Descriptor instead.
func (*CMsgServertoGCPuzzleResultsResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgServertoGCPuzzleResultsResponse) GetHistogramList() *CMsgPuzzleLeaderboardHistogramList {
	if x != nil {
		return x.HistogramList
	}
	return nil
}

type CMsgServertoGCPuzzleBestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PuzzleId  *uint32 `protobuf:"varint,2,opt,name=puzzle_id,json=puzzleId" json:"puzzle_id,omitempty"`
}

func (x *CMsgServertoGCPuzzleBestRequest) Reset() {
	*x = CMsgServertoGCPuzzleBestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServertoGCPuzzleBestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServertoGCPuzzleBestRequest) ProtoMessage() {}

func (x *CMsgServertoGCPuzzleBestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServertoGCPuzzleBestRequest.ProtoReflect.Descriptor instead.
func (*CMsgServertoGCPuzzleBestRequest) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgServertoGCPuzzleBestRequest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServertoGCPuzzleBestRequest) GetPuzzleId() uint32 {
	if x != nil && x.PuzzleId != nil {
		return *x.PuzzleId
	}
	return 0
}

type CMsgServertoGCPuzzleBestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leaderboards []*CMsgServertoGCPuzzleBestResponse_Leaderboard `protobuf:"bytes,1,rep,name=leaderboards" json:"leaderboards,omitempty"`
}

func (x *CMsgServertoGCPuzzleBestResponse) Reset() {
	*x = CMsgServertoGCPuzzleBestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServertoGCPuzzleBestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServertoGCPuzzleBestResponse) ProtoMessage() {}

func (x *CMsgServertoGCPuzzleBestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServertoGCPuzzleBestResponse.ProtoReflect.Descriptor instead.
func (*CMsgServertoGCPuzzleBestResponse) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgServertoGCPuzzleBestResponse) GetLeaderboards() []*CMsgServertoGCPuzzleBestResponse_Leaderboard {
	if x != nil {
		return x.Leaderboards
	}
	return nil
}

type CMsgServerCrashSentinelFile_GameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId          *uint64  `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	LobbyId          *uint64  `protobuf:"fixed64,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ServerState      *uint32  `protobuf:"varint,4,opt,name=server_state,json=serverState" json:"server_state,omitempty"`
	ClientAccountIds []uint32 `protobuf:"varint,5,rep,name=client_account_ids,json=clientAccountIds" json:"client_account_ids,omitempty"`
}

func (x *CMsgServerCrashSentinelFile_GameInfo) Reset() {
	*x = CMsgServerCrashSentinelFile_GameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerCrashSentinelFile_GameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerCrashSentinelFile_GameInfo) ProtoMessage() {}

func (x *CMsgServerCrashSentinelFile_GameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerCrashSentinelFile_GameInfo.ProtoReflect.Descriptor instead.
func (*CMsgServerCrashSentinelFile_GameInfo) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgServerCrashSentinelFile_GameInfo) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile_GameInfo) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile_GameInfo) GetServerState() uint32 {
	if x != nil && x.ServerState != nil {
		return *x.ServerState
	}
	return 0
}

func (x *CMsgServerCrashSentinelFile_GameInfo) GetClientAccountIds() []uint32 {
	if x != nil {
		return x.ClientAccountIds
	}
	return nil
}

type CServerLobbyData_PlayerMMR_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Mmr                  *uint32  `protobuf:"varint,2,opt,name=mmr" json:"mmr,omitempty"`
	Uncertainty          *uint32  `protobuf:"varint,3,opt,name=uncertainty" json:"uncertainty,omitempty"`
	MmrLevelScore        *uint32  `protobuf:"varint,4,opt,name=mmr_level_score,json=mmrLevelScore" json:"mmr_level_score,omitempty"`
	PartyIndex           *uint32  `protobuf:"varint,7,opt,name=party_index,json=partyIndex" json:"party_index,omitempty"`
	LordsEloAnte         *uint32  `protobuf:"varint,8,opt,name=lords_elo_ante,json=lordsEloAnte" json:"lords_elo_ante,omitempty"`
	LordsEloIgnore       *bool    `protobuf:"varint,9,opt,name=lords_elo_ignore,json=lordsEloIgnore" json:"lords_elo_ignore,omitempty"`
	LevelScoreChangeMult *float32 `protobuf:"fixed32,10,opt,name=level_score_change_mult,json=levelScoreChangeMult,def=1" json:"level_score_change_mult,omitempty"`
}

// Default values for CServerLobbyData_PlayerMMR_Player fields.
const (
	Default_CServerLobbyData_PlayerMMR_Player_LevelScoreChangeMult = float32(1)
)

func (x *CServerLobbyData_PlayerMMR_Player) Reset() {
	*x = CServerLobbyData_PlayerMMR_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerMMR_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerMMR_Player) ProtoMessage() {}

func (x *CServerLobbyData_PlayerMMR_Player) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerMMR_Player.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerMMR_Player) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CServerLobbyData_PlayerMMR_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CServerLobbyData_PlayerMMR_Player) GetMmr() uint32 {
	if x != nil && x.Mmr != nil {
		return *x.Mmr
	}
	return 0
}

func (x *CServerLobbyData_PlayerMMR_Player) GetUncertainty() uint32 {
	if x != nil && x.Uncertainty != nil {
		return *x.Uncertainty
	}
	return 0
}

func (x *CServerLobbyData_PlayerMMR_Player) GetMmrLevelScore() uint32 {
	if x != nil && x.MmrLevelScore != nil {
		return *x.MmrLevelScore
	}
	return 0
}

func (x *CServerLobbyData_PlayerMMR_Player) GetPartyIndex() uint32 {
	if x != nil && x.PartyIndex != nil {
		return *x.PartyIndex
	}
	return 0
}

func (x *CServerLobbyData_PlayerMMR_Player) GetLordsEloAnte() uint32 {
	if x != nil && x.LordsEloAnte != nil {
		return *x.LordsEloAnte
	}
	return 0
}

func (x *CServerLobbyData_PlayerMMR_Player) GetLordsEloIgnore() bool {
	if x != nil && x.LordsEloIgnore != nil {
		return *x.LordsEloIgnore
	}
	return false
}

func (x *CServerLobbyData_PlayerMMR_Player) GetLevelScoreChangeMult() float32 {
	if x != nil && x.LevelScoreChangeMult != nil {
		return *x.LevelScoreChangeMult
	}
	return Default_CServerLobbyData_PlayerMMR_Player_LevelScoreChangeMult
}

type CServerLobbyData_PlayerMMR_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LordsEloAnte   *uint32 `protobuf:"varint,3,opt,name=lords_elo_ante,json=lordsEloAnte" json:"lords_elo_ante,omitempty"`
	LordsEloIgnore *bool   `protobuf:"varint,4,opt,name=lords_elo_ignore,json=lordsEloIgnore" json:"lords_elo_ignore,omitempty"`
}

func (x *CServerLobbyData_PlayerMMR_Team) Reset() {
	*x = CServerLobbyData_PlayerMMR_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CServerLobbyData_PlayerMMR_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CServerLobbyData_PlayerMMR_Team) ProtoMessage() {}

func (x *CServerLobbyData_PlayerMMR_Team) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CServerLobbyData_PlayerMMR_Team.ProtoReflect.Descriptor instead.
func (*CServerLobbyData_PlayerMMR_Team) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{1, 1}
}

func (x *CServerLobbyData_PlayerMMR_Team) GetLordsEloAnte() uint32 {
	if x != nil && x.LordsEloAnte != nil {
		return *x.LordsEloAnte
	}
	return 0
}

func (x *CServerLobbyData_PlayerMMR_Team) GetLordsEloIgnore() bool {
	if x != nil && x.LordsEloIgnore != nil {
		return *x.LordsEloIgnore
	}
	return false
}

type CSODACServerStaticLobby_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId             *uint32        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PersonaName           *string        `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	Team                  *EDACLobbyTeam `protobuf:"varint,3,opt,name=team,enum=underlords.EDACLobbyTeam,def=0" json:"team,omitempty"`
	PlayerSlot            *uint32        `protobuf:"varint,4,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	AiType                *EDACAIType    `protobuf:"varint,5,opt,name=ai_type,json=aiType,enum=underlords.EDACAIType,def=0" json:"ai_type,omitempty"`
	PartyIndex            *uint32        `protobuf:"varint,6,opt,name=party_index,json=partyIndex" json:"party_index,omitempty"`
	Platform              *EDACPlatform  `protobuf:"varint,7,opt,name=platform,enum=underlords.EDACPlatform,def=0" json:"platform,omitempty"`
	ChatMuted             *bool          `protobuf:"varint,8,opt,name=chat_muted,json=chatMuted" json:"chat_muted,omitempty"`
	ActiveChallengeSlotId *uint32        `protobuf:"varint,9,opt,name=active_challenge_slot_id,json=activeChallengeSlotId" json:"active_challenge_slot_id,omitempty"`
}

// Default values for CSODACServerStaticLobby_Member fields.
const (
	Default_CSODACServerStaticLobby_Member_Team     = EDACLobbyTeam_k_EDACLobbyTeam_Team0
	Default_CSODACServerStaticLobby_Member_AiType   = EDACAIType_k_EDACAIType_Invalid
	Default_CSODACServerStaticLobby_Member_Platform = EDACPlatform_k_eDACPlatform_None
)

func (x *CSODACServerStaticLobby_Member) Reset() {
	*x = CSODACServerStaticLobby_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSODACServerStaticLobby_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODACServerStaticLobby_Member) ProtoMessage() {}

func (x *CSODACServerStaticLobby_Member) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODACServerStaticLobby_Member.ProtoReflect.Descriptor instead.
func (*CSODACServerStaticLobby_Member) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CSODACServerStaticLobby_Member) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSODACServerStaticLobby_Member) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CSODACServerStaticLobby_Member) GetTeam() EDACLobbyTeam {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return Default_CSODACServerStaticLobby_Member_Team
}

func (x *CSODACServerStaticLobby_Member) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CSODACServerStaticLobby_Member) GetAiType() EDACAIType {
	if x != nil && x.AiType != nil {
		return *x.AiType
	}
	return Default_CSODACServerStaticLobby_Member_AiType
}

func (x *CSODACServerStaticLobby_Member) GetPartyIndex() uint32 {
	if x != nil && x.PartyIndex != nil {
		return *x.PartyIndex
	}
	return 0
}

func (x *CSODACServerStaticLobby_Member) GetPlatform() EDACPlatform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Default_CSODACServerStaticLobby_Member_Platform
}

func (x *CSODACServerStaticLobby_Member) GetChatMuted() bool {
	if x != nil && x.ChatMuted != nil {
		return *x.ChatMuted
	}
	return false
}

func (x *CSODACServerStaticLobby_Member) GetActiveChallengeSlotId() uint32 {
	if x != nil && x.ActiveChallengeSlotId != nil {
		return *x.ActiveChallengeSlotId
	}
	return 0
}

type CMsgMatchSignoutData_CombatStats_CombatRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber        *uint32  `protobuf:"varint,1,opt,name=round_number,json=roundNumber" json:"round_number,omitempty"`
	PlayerElements     []uint32 `protobuf:"varint,2,rep,packed,name=player_elements,json=playerElements" json:"player_elements,omitempty"`
	OpponentElements   []uint32 `protobuf:"varint,3,rep,packed,name=opponent_elements,json=opponentElements" json:"opponent_elements,omitempty"`
	PlayerDamage       *uint32  `protobuf:"varint,4,opt,name=player_damage,json=playerDamage" json:"player_damage,omitempty"`
	CombatDurationS    *uint32  `protobuf:"varint,5,opt,name=combat_duration_s,json=combatDurationS" json:"combat_duration_s,omitempty"`
	PlayerWon          *bool    `protobuf:"varint,6,opt,name=player_won,json=playerWon" json:"player_won,omitempty"`
	PlayerSlot         *uint32  `protobuf:"varint,7,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	OpponentSlot       *uint32  `protobuf:"varint,8,opt,name=opponent_slot,json=opponentSlot" json:"opponent_slot,omitempty"`
	PlayerStartingLife *uint32  `protobuf:"varint,9,opt,name=player_starting_life,json=playerStartingLife" json:"player_starting_life,omitempty"`
	PlayerLevel        *uint32  `protobuf:"varint,10,opt,name=player_level,json=playerLevel" json:"player_level,omitempty"`
	PlayerRerolls      *uint32  `protobuf:"varint,11,opt,name=player_rerolls,json=playerRerolls" json:"player_rerolls,omitempty"`
	PlayerGold         *uint32  `protobuf:"varint,12,opt,name=player_gold,json=playerGold" json:"player_gold,omitempty"`
	PlayerInterestGold *uint32  `protobuf:"varint,14,opt,name=player_interest_gold,json=playerInterestGold" json:"player_interest_gold,omitempty"`
	PlayerStreakGold   *uint32  `protobuf:"varint,15,opt,name=player_streak_gold,json=playerStreakGold" json:"player_streak_gold,omitempty"`
	PlayerBonusGold    *uint32  `protobuf:"varint,16,opt,name=player_bonus_gold,json=playerBonusGold" json:"player_bonus_gold,omitempty"`
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) Reset() {
	*x = CMsgMatchSignoutData_CombatStats_CombatRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchSignoutData_CombatStats_CombatRound) ProtoMessage() {}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchSignoutData_CombatStats_CombatRound.ProtoReflect.Descriptor instead.
func (*CMsgMatchSignoutData_CombatStats_CombatRound) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) GetRoundNumber() uint32 {
	if x != nil && x.RoundNumber != nil {
		return *x.RoundNumber
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) GetPlayerElements() []uint32 {
	if x != nil {
		return x.PlayerElements
	}
	return nil
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) GetOpponentElements() []uint32 {
	if x != nil {
		return x.OpponentElements
	}
	return nil
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) GetPlayerDamage() uint32 {
	if x != nil && x.PlayerDamage != nil {
		return *x.PlayerDamage
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) GetCombatDurationS() uint32 {
	if x != nil && x.CombatDurationS != nil {
		return *x.CombatDurationS
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) GetPlayerWon() bool {
	if x != nil && x.PlayerWon != nil {
		return *x.PlayerWon
	}
	return false
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) GetOpponentSlot() uint32 {
	if x != nil && x.OpponentSlot != nil {
		return *x.OpponentSlot
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) GetPlayerStartingLife() uint32 {
	if x != nil && x.PlayerStartingLife != nil {
		return *x.PlayerStartingLife
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) GetPlayerLevel() uint32 {
	if x != nil && x.PlayerLevel != nil {
		return *x.PlayerLevel
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) GetPlayerRerolls() uint32 {
	if x != nil && x.PlayerRerolls != nil {
		return *x.PlayerRerolls
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) GetPlayerGold() uint32 {
	if x != nil && x.PlayerGold != nil {
		return *x.PlayerGold
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) GetPlayerInterestGold() uint32 {
	if x != nil && x.PlayerInterestGold != nil {
		return *x.PlayerInterestGold
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) GetPlayerStreakGold() uint32 {
	if x != nil && x.PlayerStreakGold != nil {
		return *x.PlayerStreakGold
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats_CombatRound) GetPlayerBonusGold() uint32 {
	if x != nil && x.PlayerBonusGold != nil {
		return *x.PlayerBonusGold
	}
	return 0
}

type CMsgMatchSignoutData_CombatStats_FinalPlaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot       *uint32 `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	FinalPlace       *uint32 `protobuf:"varint,2,opt,name=final_place,json=finalPlace" json:"final_place,omitempty"`
	EliminationTimeS *uint32 `protobuf:"varint,3,opt,name=elimination_time_s,json=eliminationTimeS" json:"elimination_time_s,omitempty"`
	EliminationRound *uint32 `protobuf:"varint,4,opt,name=elimination_round,json=eliminationRound" json:"elimination_round,omitempty"`
	UnderlordId      *uint32 `protobuf:"varint,5,opt,name=underlord_id,json=underlordId" json:"underlord_id,omitempty"`
}

func (x *CMsgMatchSignoutData_CombatStats_FinalPlaces) Reset() {
	*x = CMsgMatchSignoutData_CombatStats_FinalPlaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMatchSignoutData_CombatStats_FinalPlaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchSignoutData_CombatStats_FinalPlaces) ProtoMessage() {}

func (x *CMsgMatchSignoutData_CombatStats_FinalPlaces) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchSignoutData_CombatStats_FinalPlaces.ProtoReflect.Descriptor instead.
func (*CMsgMatchSignoutData_CombatStats_FinalPlaces) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{8, 1}
}

func (x *CMsgMatchSignoutData_CombatStats_FinalPlaces) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats_FinalPlaces) GetFinalPlace() uint32 {
	if x != nil && x.FinalPlace != nil {
		return *x.FinalPlace
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats_FinalPlaces) GetEliminationTimeS() uint32 {
	if x != nil && x.EliminationTimeS != nil {
		return *x.EliminationTimeS
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats_FinalPlaces) GetEliminationRound() uint32 {
	if x != nil && x.EliminationRound != nil {
		return *x.EliminationRound
	}
	return 0
}

func (x *CMsgMatchSignoutData_CombatStats_FinalPlaces) GetUnderlordId() uint32 {
	if x != nil && x.UnderlordId != nil {
		return *x.UnderlordId
	}
	return 0
}

type CMsgPlayerSignoutData_MMRUpdate_Opponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Place         *uint32 `protobuf:"varint,1,opt,name=place" json:"place,omitempty"`
	Mmr           *uint32 `protobuf:"varint,2,opt,name=mmr" json:"mmr,omitempty"`
	Uncertainty   *uint32 `protobuf:"varint,3,opt,name=uncertainty" json:"uncertainty,omitempty"`
	AccountId     *uint32 `protobuf:"varint,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MmrLevelScore *uint32 `protobuf:"varint,5,opt,name=mmr_level_score,json=mmrLevelScore" json:"mmr_level_score,omitempty"`
}

func (x *CMsgPlayerSignoutData_MMRUpdate_Opponent) Reset() {
	*x = CMsgPlayerSignoutData_MMRUpdate_Opponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerSignoutData_MMRUpdate_Opponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerSignoutData_MMRUpdate_Opponent) ProtoMessage() {}

func (x *CMsgPlayerSignoutData_MMRUpdate_Opponent) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerSignoutData_MMRUpdate_Opponent.ProtoReflect.Descriptor instead.
func (*CMsgPlayerSignoutData_MMRUpdate_Opponent) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CMsgPlayerSignoutData_MMRUpdate_Opponent) GetPlace() uint32 {
	if x != nil && x.Place != nil {
		return *x.Place
	}
	return 0
}

func (x *CMsgPlayerSignoutData_MMRUpdate_Opponent) GetMmr() uint32 {
	if x != nil && x.Mmr != nil {
		return *x.Mmr
	}
	return 0
}

func (x *CMsgPlayerSignoutData_MMRUpdate_Opponent) GetUncertainty() uint32 {
	if x != nil && x.Uncertainty != nil {
		return *x.Uncertainty
	}
	return 0
}

func (x *CMsgPlayerSignoutData_MMRUpdate_Opponent) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgPlayerSignoutData_MMRUpdate_Opponent) GetMmrLevelScore() uint32 {
	if x != nil && x.MmrLevelScore != nil {
		return *x.MmrLevelScore
	}
	return 0
}

type CMsgPlayerSignoutData_MatchStats_MatchStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatId *uint32 `protobuf:"varint,1,opt,name=stat_id,json=statId" json:"stat_id,omitempty"`
	Value  *uint32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgPlayerSignoutData_MatchStats_MatchStat) Reset() {
	*x = CMsgPlayerSignoutData_MatchStats_MatchStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerSignoutData_MatchStats_MatchStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerSignoutData_MatchStats_MatchStat) ProtoMessage() {}

func (x *CMsgPlayerSignoutData_MatchStats_MatchStat) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerSignoutData_MatchStats_MatchStat.ProtoReflect.Descriptor instead.
func (*CMsgPlayerSignoutData_MatchStats_MatchStat) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CMsgPlayerSignoutData_MatchStats_MatchStat) GetStatId() uint32 {
	if x != nil && x.StatId != nil {
		return *x.StatId
	}
	return 0
}

func (x *CMsgPlayerSignoutData_MatchStats_MatchStat) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CMsgPlayerSignoutData_EventGrantProgress_Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId     *uint32 `protobuf:"varint,1,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	SequenceId *uint32 `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId" json:"sequence_id,omitempty"`
	Progress   *uint32 `protobuf:"varint,3,opt,name=progress" json:"progress,omitempty"`
}

func (x *CMsgPlayerSignoutData_EventGrantProgress_Challenge) Reset() {
	*x = CMsgPlayerSignoutData_EventGrantProgress_Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerSignoutData_EventGrantProgress_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerSignoutData_EventGrantProgress_Challenge) ProtoMessage() {}

func (x *CMsgPlayerSignoutData_EventGrantProgress_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerSignoutData_EventGrantProgress_Challenge.ProtoReflect.Descriptor instead.
func (*CMsgPlayerSignoutData_EventGrantProgress_Challenge) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CMsgPlayerSignoutData_EventGrantProgress_Challenge) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgPlayerSignoutData_EventGrantProgress_Challenge) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

func (x *CMsgPlayerSignoutData_EventGrantProgress_Challenge) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

type CMsgPlayerSignoutData_EventGrantProgress_Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyId *uint32 `protobuf:"varint,1,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	Grant      *uint32 `protobuf:"varint,2,opt,name=grant" json:"grant,omitempty"`
}

func (x *CMsgPlayerSignoutData_EventGrantProgress_Currency) Reset() {
	*x = CMsgPlayerSignoutData_EventGrantProgress_Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgPlayerSignoutData_EventGrantProgress_Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerSignoutData_EventGrantProgress_Currency) ProtoMessage() {}

func (x *CMsgPlayerSignoutData_EventGrantProgress_Currency) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerSignoutData_EventGrantProgress_Currency.ProtoReflect.Descriptor instead.
func (*CMsgPlayerSignoutData_EventGrantProgress_Currency) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{11, 1}
}

func (x *CMsgPlayerSignoutData_EventGrantProgress_Currency) GetCurrencyId() uint32 {
	if x != nil && x.CurrencyId != nil {
		return *x.CurrencyId
	}
	return 0
}

func (x *CMsgPlayerSignoutData_EventGrantProgress_Currency) GetGrant() uint32 {
	if x != nil && x.Grant != nil {
		return *x.Grant
	}
	return 0
}

type CMsgServerToGCMatchSignout_MatchSignout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchState     *EDACMatchState   `protobuf:"varint,1,opt,name=match_state,json=matchState,enum=underlords.EDACMatchState,def=0" json:"match_state,omitempty"`
	AdditionalData []*CExtraMsgBlock `protobuf:"bytes,2,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
	MatchDurationS *uint32           `protobuf:"varint,3,opt,name=match_duration_s,json=matchDurationS" json:"match_duration_s,omitempty"`
	MatchRounds    *uint32           `protobuf:"varint,4,opt,name=match_rounds,json=matchRounds" json:"match_rounds,omitempty"`
}

// Default values for CMsgServerToGCMatchSignout_MatchSignout fields.
const (
	Default_CMsgServerToGCMatchSignout_MatchSignout_MatchState = EDACMatchState_k_EMatchState_InProgress
)

func (x *CMsgServerToGCMatchSignout_MatchSignout) Reset() {
	*x = CMsgServerToGCMatchSignout_MatchSignout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchSignout_MatchSignout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchSignout_MatchSignout) ProtoMessage() {}

func (x *CMsgServerToGCMatchSignout_MatchSignout) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchSignout_MatchSignout.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchSignout_MatchSignout) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CMsgServerToGCMatchSignout_MatchSignout) GetMatchState() EDACMatchState {
	if x != nil && x.MatchState != nil {
		return *x.MatchState
	}
	return Default_CMsgServerToGCMatchSignout_MatchSignout_MatchState
}

func (x *CMsgServerToGCMatchSignout_MatchSignout) GetAdditionalData() []*CExtraMsgBlock {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *CMsgServerToGCMatchSignout_MatchSignout) GetMatchDurationS() uint32 {
	if x != nil && x.MatchDurationS != nil {
		return *x.MatchDurationS
	}
	return 0
}

func (x *CMsgServerToGCMatchSignout_MatchSignout) GetMatchRounds() uint32 {
	if x != nil && x.MatchRounds != nil {
		return *x.MatchRounds
	}
	return 0
}

type CMsgServerToGCMatchSignout_PlayerSignout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerSlot     *uint32           `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	AccountId      *uint32           `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerState    *EDACPlayerState  `protobuf:"varint,3,opt,name=player_state,json=playerState,enum=underlords.EDACPlayerState,def=0" json:"player_state,omitempty"`
	AdditionalData []*CExtraMsgBlock `protobuf:"bytes,4,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
	FinalPlacement *uint32           `protobuf:"varint,6,opt,name=final_placement,json=finalPlacement" json:"final_placement,omitempty"`
	SurvivalTimeS  *uint32           `protobuf:"varint,7,opt,name=survival_time_s,json=survivalTimeS" json:"survival_time_s,omitempty"`
	SurvivalRound  *uint32           `protobuf:"varint,8,opt,name=survival_round,json=survivalRound" json:"survival_round,omitempty"`
	UnderlordId    *uint32           `protobuf:"varint,9,opt,name=underlord_id,json=underlordId" json:"underlord_id,omitempty"`
}

// Default values for CMsgServerToGCMatchSignout_PlayerSignout fields.
const (
	Default_CMsgServerToGCMatchSignout_PlayerSignout_PlayerState = EDACPlayerState_k_EPlayerState_Playing
)

func (x *CMsgServerToGCMatchSignout_PlayerSignout) Reset() {
	*x = CMsgServerToGCMatchSignout_PlayerSignout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCMatchSignout_PlayerSignout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCMatchSignout_PlayerSignout) ProtoMessage() {}

func (x *CMsgServerToGCMatchSignout_PlayerSignout) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCMatchSignout_PlayerSignout.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCMatchSignout_PlayerSignout) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{14, 1}
}

func (x *CMsgServerToGCMatchSignout_PlayerSignout) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgServerToGCMatchSignout_PlayerSignout) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCMatchSignout_PlayerSignout) GetPlayerState() EDACPlayerState {
	if x != nil && x.PlayerState != nil {
		return *x.PlayerState
	}
	return Default_CMsgServerToGCMatchSignout_PlayerSignout_PlayerState
}

func (x *CMsgServerToGCMatchSignout_PlayerSignout) GetAdditionalData() []*CExtraMsgBlock {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *CMsgServerToGCMatchSignout_PlayerSignout) GetFinalPlacement() uint32 {
	if x != nil && x.FinalPlacement != nil {
		return *x.FinalPlacement
	}
	return 0
}

func (x *CMsgServerToGCMatchSignout_PlayerSignout) GetSurvivalTimeS() uint32 {
	if x != nil && x.SurvivalTimeS != nil {
		return *x.SurvivalTimeS
	}
	return 0
}

func (x *CMsgServerToGCMatchSignout_PlayerSignout) GetSurvivalRound() uint32 {
	if x != nil && x.SurvivalRound != nil {
		return *x.SurvivalRound
	}
	return 0
}

func (x *CMsgServerToGCMatchSignout_PlayerSignout) GetUnderlordId() uint32 {
	if x != nil && x.UnderlordId != nil {
		return *x.UnderlordId
	}
	return 0
}

type CMsgServerToGCAbandonMatch_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AdditionalData *uint64 `protobuf:"varint,2,opt,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (x *CMsgServerToGCAbandonMatch_Player) Reset() {
	*x = CMsgServerToGCAbandonMatch_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServerToGCAbandonMatch_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServerToGCAbandonMatch_Player) ProtoMessage() {}

func (x *CMsgServerToGCAbandonMatch_Player) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServerToGCAbandonMatch_Player.ProtoReflect.Descriptor instead.
func (*CMsgServerToGCAbandonMatch_Player) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{26, 0}
}

func (x *CMsgServerToGCAbandonMatch_Player) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgServerToGCAbandonMatch_Player) GetAdditionalData() uint64 {
	if x != nil && x.AdditionalData != nil {
		return *x.AdditionalData
	}
	return 0
}

type CMsgServertoGCPuzzleBestResponse_Leaderboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderboardType *uint32 `protobuf:"varint,1,opt,name=leaderboard_type,json=leaderboardType" json:"leaderboard_type,omitempty"`
	Value           *uint32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	BoardCode       *string `protobuf:"bytes,3,opt,name=board_code,json=boardCode" json:"board_code,omitempty"`
}

func (x *CMsgServertoGCPuzzleBestResponse_Leaderboard) Reset() {
	*x = CMsgServertoGCPuzzleBestResponse_Leaderboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgServertoGCPuzzleBestResponse_Leaderboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgServertoGCPuzzleBestResponse_Leaderboard) ProtoMessage() {}

func (x *CMsgServertoGCPuzzleBestResponse_Leaderboard) ProtoReflect() protoreflect.Message {
	mi := &file_underlords_dac_gcmessages_server_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgServertoGCPuzzleBestResponse_Leaderboard.ProtoReflect.Descriptor instead.
func (*CMsgServertoGCPuzzleBestResponse_Leaderboard) Descriptor() ([]byte, []int) {
	return file_underlords_dac_gcmessages_server_proto_rawDescGZIP(), []int{36, 0}
}

func (x *CMsgServertoGCPuzzleBestResponse_Leaderboard) GetLeaderboardType() uint32 {
	if x != nil && x.LeaderboardType != nil {
		return *x.LeaderboardType
	}
	return 0
}

func (x *CMsgServertoGCPuzzleBestResponse_Leaderboard) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CMsgServertoGCPuzzleBestResponse_Leaderboard) GetBoardCode() string {
	if x != nil && x.BoardCode != nil {
		return *x.BoardCode
	}
	return ""
}

var File_underlords_dac_gcmessages_server_proto protoreflect.FileDescriptor

var file_underlords_dac_gcmessages_server_proto_rawDesc = []byte{
	0x0a, 0x26, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x64, 0x61, 0x63,
	0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x1a, 0x1e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2f, 0x64, 0x61, 0x63, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x65, 0x63, 0x6f, 0x6e, 0x5f, 0x67, 0x63,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb,
	0x04, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x72, 0x61,
	0x73, 0x68, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x61, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x72,
	0x61, 0x73, 0x68, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x91, 0x01, 0x0a, 0x08, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xc1, 0x05, 0x0a,
	0x1a, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x4d, 0x52, 0x12, 0x47, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x4d, 0x52, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x4d, 0x52, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x5f, 0x65, 0x6c, 0x6f, 0x5f, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f,
	0x72, 0x64, 0x73, 0x45, 0x6c, 0x6f, 0x4b, 0x12, 0x45, 0x0a, 0x20, 0x64, 0x75, 0x6f, 0x73, 0x5f,
	0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x1b, 0x64, 0x75, 0x6f, 0x73, 0x4d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x12, 0x27,
	0x0a, 0x10, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x6c, 0x6f, 0x5f, 0x6b, 0x5f, 0x64, 0x75,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x45,
	0x6c, 0x6f, 0x4b, 0x44, 0x75, 0x6f, 0x73, 0x1a, 0xae, 0x02, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6d, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6d, 0x6d, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x6c, 0x6f, 0x5f, 0x61, 0x6e, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6c, 0x6f,
	0x41, 0x6e, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x6c,
	0x6f, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6c, 0x6f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x38,
	0x0a, 0x17, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x3a,
	0x01, 0x31, 0x52, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x1a, 0x56, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x6c, 0x6f, 0x5f, 0x61, 0x6e,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x45,
	0x6c, 0x6f, 0x41, 0x6e, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x5f,
	0x65, 0x6c, 0x6f, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6c, 0x6f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x22, 0x66, 0x0a, 0x1e, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x63, 0x0a, 0x18, 0x43, 0x53, 0x4f, 0x44,
	0x41, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6c,
	0x65, 0x66, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xa6, 0x08,
	0x0a, 0x17, 0x43, 0x53, 0x4f, 0x44, 0x41, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x61, 0x6c, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x41, 0x43, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x42,
	0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x3a, 0x18, 0x6b, 0x5f,
	0x45, 0x44, 0x41, 0x43, 0x42, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x12,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x1a, 0xbc, 0x03, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x45, 0x44, 0x41, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x3a, 0x15, 0x6b,
	0x5f, 0x45, 0x44, 0x41, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x54,
	0x65, 0x61, 0x6d, 0x30, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x61,
	0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x41, 0x49, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x06, 0x61, 0x69, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3a,
	0x13, 0x6b, 0x5f, 0x65, 0x44, 0x41, 0x43, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a,
	0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x22, 0xa5, 0x04, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x65, 0x61, 0x6b, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e,
	0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16,
	0x6d, 0x61, 0x78, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61,
	0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xd5,
	0x01, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x71, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a,
	0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbb, 0x08, 0x0a, 0x20, 0x43, 0x4d,
	0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x5d,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e,
	0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6d, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6d, 0x72, 0x12, 0x5b, 0x0a, 0x0c, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x1a, 0xed, 0x04, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x6f, 0x70, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x10, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x66, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x67,
	0x6f, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x67,
	0x6f, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x47, 0x6f, 0x6c, 0x64, 0x1a, 0xcd, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0xb4, 0x02, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x5f, 0x4d, 0x4d, 0x52, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x09,
	0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x4d, 0x4d, 0x52, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x1a, 0x9b, 0x01, 0x0a, 0x08, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6d, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6d, 0x6d, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61,
	0x69, 0x6e, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x63, 0x65,
	0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x6d, 0x72, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6d, 0x6d, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xb7,
	0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x09,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaa, 0x03, 0x0a, 0x28, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x5d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x5e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f,
	0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x1a,
	0x61, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0x41, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x79, 0x6f, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x79, 0x6f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x22, 0xd4, 0x07, 0x0a, 0x1a, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x58, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67,
	0x6e, 0x6f, 0x75, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75,
	0x74, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x12,
	0x5d, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x75,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e,
	0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xf7, 0x01, 0x0a,
	0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x12, 0x55, 0x0a,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x18,
	0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0x87, 0x03, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x16, 0x6b, 0x5f, 0x45,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x43, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76,
	0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x22, 0xc4, 0x02, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x69, 0x67, 0x6e, 0x6f,
	0x75, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x0e, 0x45, 0x53, 0x69, 0x67,
	0x6e, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f,
	0x45, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x53, 0x69,
	0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x53, 0x69, 0x67,
	0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x49, 0x6e, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x53, 0x69, 0x67,
	0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x27,
	0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x4f, 0x75, 0x74, 0x10, 0x05, 0x22, 0x41, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x41, 0x43, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x3f, 0x0a, 0x16, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x49, 0x64, 0x6c, 0x65,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x3b, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x24, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x51, 0x0a,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45,
	0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x17, 0x6b, 0x5f,
	0x45, 0x44, 0x41, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x6f,
	0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x16, 0x6b, 0x5f, 0x45, 0x44, 0x41, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x63, 0x61, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x47, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x45, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f,
	0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xba, 0x02, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x64, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x64, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x41, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x45, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x1a,
	0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd3, 0x05, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x45, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x13, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x72, 0x61,
	0x73, 0x68, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x41,
	0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0x50, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x13, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x72, 0x61, 0x73, 0x68, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x02, 0x22, 0x24, 0x0a,
	0x22, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x41,
	0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x41, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x57, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22,
	0x86, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x62, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x44, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x02, 0x22, 0x50, 0x0a, 0x23, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x1b,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x47, 0x43, 0x50, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x63, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x22, 0x7c, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x74, 0x6f, 0x47, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x5d, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x74,
	0x6f, 0x47, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x42, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0xef, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x74,
	0x6f, 0x47, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x42, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x74, 0x6f, 0x47, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x42, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x1a, 0x6d, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x2a, 0x99, 0x07, 0x0a, 0x14, 0x45, 0x47, 0x43, 0x44, 0x41, 0x43, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x26, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x91, 0x4e, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x92, 0x4e, 0x12, 0x21, 0x0a,
	0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47,
	0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x10, 0x93, 0x4e,
	0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x94, 0x4e, 0x12, 0x1d, 0x0a, 0x18, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x49,
	0x64, 0x6c, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x10, 0x95, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x10, 0x96, 0x4e, 0x12, 0x25, 0x0a, 0x20,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x10, 0x97, 0x4e, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0x98, 0x4e, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x99, 0x4e, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x10, 0x9a, 0x4e, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x10, 0x9b, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x10, 0x9c, 0x4e, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9d,
	0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x9e, 0x4e, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0x9f, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x6f, 0x72, 0x10, 0xa0, 0x4e, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa1,
	0x4e, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x10, 0xa2, 0x4e, 0x12, 0x22, 0x0a,
	0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x47,
	0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x10, 0xa3,
	0x4e, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x74, 0x6f, 0x47, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa4, 0x4e, 0x12, 0x26, 0x0a,
	0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x47,
	0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x42, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x10, 0xa5, 0x4e, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x74, 0x6f, 0x47, 0x43, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x42,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa6, 0x4e, 0x2a, 0x7f,
	0x0a, 0x12, 0x45, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4d, 0x4d, 0x52, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x10, 0x03, 0x2a,
	0xf4, 0x02, 0x0a, 0x14, 0x45, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x01,
	0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e,
	0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f,
	0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x5f, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0x03, 0x12,
	0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x6f,
	0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x4d, 0x4d, 0x52, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27, 0x6b,
	0x5f, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x0b, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x5f, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f,
	0x6b, 0x5f, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x75, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10,
	0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x10, 0x0e, 0x42, 0x3b, 0x48, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x73,
	0x80, 0x01, 0x00,
}

var (
	file_underlords_dac_gcmessages_server_proto_rawDescOnce sync.Once
	file_underlords_dac_gcmessages_server_proto_rawDescData = file_underlords_dac_gcmessages_server_proto_rawDesc
)

func file_underlords_dac_gcmessages_server_proto_rawDescGZIP() []byte {
	file_underlords_dac_gcmessages_server_proto_rawDescOnce.Do(func() {
		file_underlords_dac_gcmessages_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_underlords_dac_gcmessages_server_proto_rawDescData)
	})
	return file_underlords_dac_gcmessages_server_proto_rawDescData
}

var file_underlords_dac_gcmessages_server_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_underlords_dac_gcmessages_server_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_underlords_dac_gcmessages_server_proto_goTypes = []interface{}{
	(EGCDACServerMessages)(0),                                  // 0: underlords.EGCDACServerMessages
	(EGCServerLobbyData)(0),                                    // 1: underlords.EGCServerLobbyData
	(EGCServerSignoutData)(0),                                  // 2: underlords.EGCServerSignoutData
	(CMsgServerToGCMatchSignoutResponse_ESignoutResult)(0),     // 3: underlords.CMsgServerToGCMatchSignoutResponse.ESignoutResult
	(CMsgServerToGCAbandonMatch_EReason)(0),                    // 4: underlords.CMsgServerToGCAbandonMatch.EReason
	(CMsgGCToServerAddSpectatorResponse_EResponse)(0),          // 5: underlords.CMsgGCToServerAddSpectatorResponse.EResponse
	(*CMsgServerCrashSentinelFile)(nil),                        // 6: underlords.CMsgServerCrashSentinelFile
	(*CServerLobbyData_PlayerMMR)(nil),                         // 7: underlords.CServerLobbyData_PlayerMMR
	(*CServerLobbyData_GameModifiers)(nil),                     // 8: underlords.CServerLobbyData_GameModifiers
	(*CSODACServerDynamicLobby)(nil),                           // 9: underlords.CSODACServerDynamicLobby
	(*CSODACServerStaticLobby)(nil),                            // 10: underlords.CSODACServerStaticLobby
	(*CMsgMatchSignoutData_PerformanceStats)(nil),              // 11: underlords.CMsgMatchSignoutData_PerformanceStats
	(*CMsgMatchDisconnection)(nil),                             // 12: underlords.CMsgMatchDisconnection
	(*CMsgMatchSignoutData_Disconnections)(nil),                // 13: underlords.CMsgMatchSignoutData_Disconnections
	(*CMsgMatchSignoutData_CombatStats)(nil),                   // 14: underlords.CMsgMatchSignoutData_CombatStats
	(*CMsgPlayerSignoutData_MMRUpdate)(nil),                    // 15: underlords.CMsgPlayerSignoutData_MMRUpdate
	(*CMsgPlayerSignoutData_MatchStats)(nil),                   // 16: underlords.CMsgPlayerSignoutData_MatchStats
	(*CMsgPlayerSignoutData_EventGrantProgress)(nil),           // 17: underlords.CMsgPlayerSignoutData_EventGrantProgress
	(*CMsgPlayerSignoutData_ChatStats)(nil),                    // 18: underlords.CMsgPlayerSignoutData_ChatStats
	(*CMsgPlayerSignoutData_TeamUpdate)(nil),                   // 19: underlords.CMsgPlayerSignoutData_TeamUpdate
	(*CMsgServerToGCMatchSignout)(nil),                         // 20: underlords.CMsgServerToGCMatchSignout
	(*CMsgServerToGCMatchSignoutResponse)(nil),                 // 21: underlords.CMsgServerToGCMatchSignoutResponse
	(*CMsgServerWelcomeDAC)(nil),                               // 22: underlords.CMsgServerWelcomeDAC
	(*CMsgServerToGCIdlePing)(nil),                             // 23: underlords.CMsgServerToGCIdlePing
	(*CMsgGCToServerRequestPing)(nil),                          // 24: underlords.CMsgGCToServerRequestPing
	(*CMsgGCToServerAllocateForMatch)(nil),                     // 25: underlords.CMsgGCToServerAllocateForMatch
	(*CMsgGCToServerAllocateForMatchResponse)(nil),             // 26: underlords.CMsgGCToServerAllocateForMatchResponse
	(*CMsgServerToGCMatchSignoutPermission)(nil),               // 27: underlords.CMsgServerToGCMatchSignoutPermission
	(*CMsgServerToGCMatchSignoutPermissionResponse)(nil),       // 28: underlords.CMsgServerToGCMatchSignoutPermissionResponse
	(*CMsgServerToGCEnterMatchmaking)(nil),                     // 29: underlords.CMsgServerToGCEnterMatchmaking
	(*CMsgGCToServerCancelAllocateForMatch)(nil),               // 30: underlords.CMsgGCToServerCancelAllocateForMatch
	(*CMsgServerToGCUpdateLobbyServerState)(nil),               // 31: underlords.CMsgServerToGCUpdateLobbyServerState
	(*CMsgServerToGCAbandonMatch)(nil),                         // 32: underlords.CMsgServerToGCAbandonMatch
	(*CMsgServerToGCAbandonMatchResponse)(nil),                 // 33: underlords.CMsgServerToGCAbandonMatchResponse
	(*CMsgServerToGCTestConnection)(nil),                       // 34: underlords.CMsgServerToGCTestConnection
	(*CMsgServerToGCTestConnectionResponse)(nil),               // 35: underlords.CMsgServerToGCTestConnectionResponse
	(*CMsgGCToServerAddSpectator)(nil),                         // 36: underlords.CMsgGCToServerAddSpectator
	(*CMsgGCToServerAddSpectatorResponse)(nil),                 // 37: underlords.CMsgGCToServerAddSpectatorResponse
	(*CMsgGCToServerUpdateConsoleCommands)(nil),                // 38: underlords.CMsgGCToServerUpdateConsoleCommands
	(*CMsgServertoGCPuzzleResults)(nil),                        // 39: underlords.CMsgServertoGCPuzzleResults
	(*CMsgServertoGCPuzzleResultsResponse)(nil),                // 40: underlords.CMsgServertoGCPuzzleResultsResponse
	(*CMsgServertoGCPuzzleBestRequest)(nil),                    // 41: underlords.CMsgServertoGCPuzzleBestRequest
	(*CMsgServertoGCPuzzleBestResponse)(nil),                   // 42: underlords.CMsgServertoGCPuzzleBestResponse
	(*CMsgServerCrashSentinelFile_GameInfo)(nil),               // 43: underlords.CMsgServerCrashSentinelFile.GameInfo
	(*CServerLobbyData_PlayerMMR_Player)(nil),                  // 44: underlords.CServerLobbyData_PlayerMMR.Player
	(*CServerLobbyData_PlayerMMR_Team)(nil),                    // 45: underlords.CServerLobbyData_PlayerMMR.Team
	(*CSODACServerStaticLobby_Member)(nil),                     // 46: underlords.CSODACServerStaticLobby.Member
	(*CMsgMatchSignoutData_CombatStats_CombatRound)(nil),       // 47: underlords.CMsgMatchSignoutData_CombatStats.CombatRound
	(*CMsgMatchSignoutData_CombatStats_FinalPlaces)(nil),       // 48: underlords.CMsgMatchSignoutData_CombatStats.FinalPlaces
	(*CMsgPlayerSignoutData_MMRUpdate_Opponent)(nil),           // 49: underlords.CMsgPlayerSignoutData_MMRUpdate.Opponent
	(*CMsgPlayerSignoutData_MatchStats_MatchStat)(nil),         // 50: underlords.CMsgPlayerSignoutData_MatchStats.MatchStat
	(*CMsgPlayerSignoutData_EventGrantProgress_Challenge)(nil), // 51: underlords.CMsgPlayerSignoutData_EventGrantProgress.Challenge
	(*CMsgPlayerSignoutData_EventGrantProgress_Currency)(nil),  // 52: underlords.CMsgPlayerSignoutData_EventGrantProgress.Currency
	(*CMsgServerToGCMatchSignout_MatchSignout)(nil),            // 53: underlords.CMsgServerToGCMatchSignout.MatchSignout
	(*CMsgServerToGCMatchSignout_PlayerSignout)(nil),           // 54: underlords.CMsgServerToGCMatchSignout.PlayerSignout
	(*CMsgServerToGCAbandonMatch_Player)(nil),                  // 55: underlords.CMsgServerToGCAbandonMatch.Player
	(*CMsgServertoGCPuzzleBestResponse_Leaderboard)(nil),       // 56: underlords.CMsgServertoGCPuzzleBestResponse.Leaderboard
	(*CMsgGameModifiers)(nil),                                  // 57: underlords.CMsgGameModifiers
	(*CExtraMsgBlock)(nil),                                     // 58: underlords.CExtraMsgBlock
	(EDACBotDifficulty)(0),                                     // 59: underlords.EDACBotDifficulty
	(*CMsgTeamInfo)(nil),                                       // 60: underlords.CMsgTeamInfo
	(*CMsgGameModeSettings)(nil),                               // 61: underlords.CMsgGameModeSettings
	(EDACMatchMode)(0),                                         // 62: underlords.EDACMatchMode
	(EDACGameMode)(0),                                          // 63: underlords.EDACGameMode
	(ELobbyServerState)(0),                                     // 64: underlords.ELobbyServerState
	(*CMsgPuzzleLeaderboardHistogramList)(nil),                 // 65: underlords.CMsgPuzzleLeaderboardHistogramList
	(EDACLobbyTeam)(0),                                         // 66: underlords.EDACLobbyTeam
	(EDACAIType)(0),                                            // 67: underlords.EDACAIType
	(EDACPlatform)(0),                                          // 68: underlords.EDACPlatform
	(EDACMatchState)(0),                                        // 69: underlords.EDACMatchState
	(EDACPlayerState)(0),                                       // 70: underlords.EDACPlayerState
}
var file_underlords_dac_gcmessages_server_proto_depIdxs = []int32{
	43, // 0: underlords.CMsgServerCrashSentinelFile.game_info:type_name -> underlords.CMsgServerCrashSentinelFile.GameInfo
	44, // 1: underlords.CServerLobbyData_PlayerMMR.players:type_name -> underlords.CServerLobbyData_PlayerMMR.Player
	45, // 2: underlords.CServerLobbyData_PlayerMMR.teams:type_name -> underlords.CServerLobbyData_PlayerMMR.Team
	57, // 3: underlords.CServerLobbyData_GameModifiers.game_modifiers:type_name -> underlords.CMsgGameModifiers
	58, // 4: underlords.CSODACServerStaticLobby.extra_messages:type_name -> underlords.CExtraMsgBlock
	46, // 5: underlords.CSODACServerStaticLobby.members:type_name -> underlords.CSODACServerStaticLobby.Member
	59, // 6: underlords.CSODACServerStaticLobby.bot_difficulty:type_name -> underlords.EDACBotDifficulty
	60, // 7: underlords.CSODACServerStaticLobby.team_info:type_name -> underlords.CMsgTeamInfo
	61, // 8: underlords.CSODACServerStaticLobby.game_mode_settings:type_name -> underlords.CMsgGameModeSettings
	12, // 9: underlords.CMsgMatchSignoutData_Disconnections.disconnections:type_name -> underlords.CMsgMatchDisconnection
	47, // 10: underlords.CMsgMatchSignoutData_CombatStats.combat_rounds:type_name -> underlords.CMsgMatchSignoutData_CombatStats.CombatRound
	48, // 11: underlords.CMsgMatchSignoutData_CombatStats.final_places:type_name -> underlords.CMsgMatchSignoutData_CombatStats.FinalPlaces
	49, // 12: underlords.CMsgPlayerSignoutData_MMRUpdate.opponents:type_name -> underlords.CMsgPlayerSignoutData_MMRUpdate.Opponent
	50, // 13: underlords.CMsgPlayerSignoutData_MatchStats.match_stats:type_name -> underlords.CMsgPlayerSignoutData_MatchStats.MatchStat
	52, // 14: underlords.CMsgPlayerSignoutData_EventGrantProgress.currencies:type_name -> underlords.CMsgPlayerSignoutData_EventGrantProgress.Currency
	51, // 15: underlords.CMsgPlayerSignoutData_EventGrantProgress.challenges:type_name -> underlords.CMsgPlayerSignoutData_EventGrantProgress.Challenge
	53, // 16: underlords.CMsgServerToGCMatchSignout.match_signout:type_name -> underlords.CMsgServerToGCMatchSignout.MatchSignout
	54, // 17: underlords.CMsgServerToGCMatchSignout.player_signouts:type_name -> underlords.CMsgServerToGCMatchSignout.PlayerSignout
	3,  // 18: underlords.CMsgServerToGCMatchSignoutResponse.result:type_name -> underlords.CMsgServerToGCMatchSignoutResponse.ESignoutResult
	62, // 19: underlords.CMsgServerToGCMatchSignoutPermission.match_mode:type_name -> underlords.EDACMatchMode
	63, // 20: underlords.CMsgServerToGCMatchSignoutPermission.game_mode:type_name -> underlords.EDACGameMode
	2,  // 21: underlords.CMsgServerToGCMatchSignoutPermissionResponse.requested_data:type_name -> underlords.EGCServerSignoutData
	64, // 22: underlords.CMsgServerToGCUpdateLobbyServerState.server_state:type_name -> underlords.ELobbyServerState
	4,  // 23: underlords.CMsgServerToGCAbandonMatch.reason_code:type_name -> underlords.CMsgServerToGCAbandonMatch.EReason
	55, // 24: underlords.CMsgServerToGCAbandonMatch.players:type_name -> underlords.CMsgServerToGCAbandonMatch.Player
	5,  // 25: underlords.CMsgGCToServerAddSpectatorResponse.result:type_name -> underlords.CMsgGCToServerAddSpectatorResponse.EResponse
	65, // 26: underlords.CMsgServertoGCPuzzleResultsResponse.histogram_list:type_name -> underlords.CMsgPuzzleLeaderboardHistogramList
	56, // 27: underlords.CMsgServertoGCPuzzleBestResponse.leaderboards:type_name -> underlords.CMsgServertoGCPuzzleBestResponse.Leaderboard
	66, // 28: underlords.CSODACServerStaticLobby.Member.team:type_name -> underlords.EDACLobbyTeam
	67, // 29: underlords.CSODACServerStaticLobby.Member.ai_type:type_name -> underlords.EDACAIType
	68, // 30: underlords.CSODACServerStaticLobby.Member.platform:type_name -> underlords.EDACPlatform
	69, // 31: underlords.CMsgServerToGCMatchSignout.MatchSignout.match_state:type_name -> underlords.EDACMatchState
	58, // 32: underlords.CMsgServerToGCMatchSignout.MatchSignout.additional_data:type_name -> underlords.CExtraMsgBlock
	70, // 33: underlords.CMsgServerToGCMatchSignout.PlayerSignout.player_state:type_name -> underlords.EDACPlayerState
	58, // 34: underlords.CMsgServerToGCMatchSignout.PlayerSignout.additional_data:type_name -> underlords.CExtraMsgBlock
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_underlords_dac_gcmessages_server_proto_init() }
func file_underlords_dac_gcmessages_server_proto_init() {
	if File_underlords_dac_gcmessages_server_proto != nil {
		return
	}
	file_underlords_steammessages_proto_init()
	file_underlords_dac_gcmessages_common_proto_init()
	file_underlords_econ_gcmessages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_underlords_dac_gcmessages_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerCrashSentinelFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_PlayerMMR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_GameModifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODACServerDynamicLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODACServerStaticLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchSignoutData_PerformanceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchDisconnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchSignoutData_Disconnections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchSignoutData_CombatStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerSignoutData_MMRUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerSignoutData_MatchStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerSignoutData_EventGrantProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerSignoutData_ChatStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerSignoutData_TeamUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchSignout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchSignoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerWelcomeDAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCIdlePing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerRequestPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerAllocateForMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerAllocateForMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchSignoutPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchSignoutPermissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCEnterMatchmaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerCancelAllocateForMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCUpdateLobbyServerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCAbandonMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCAbandonMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCTestConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCTestConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerAddSpectator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerAddSpectatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToServerUpdateConsoleCommands); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServertoGCPuzzleResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServertoGCPuzzleResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServertoGCPuzzleBestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServertoGCPuzzleBestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerCrashSentinelFile_GameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_PlayerMMR_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CServerLobbyData_PlayerMMR_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSODACServerStaticLobby_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchSignoutData_CombatStats_CombatRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMatchSignoutData_CombatStats_FinalPlaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerSignoutData_MMRUpdate_Opponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerSignoutData_MatchStats_MatchStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerSignoutData_EventGrantProgress_Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgPlayerSignoutData_EventGrantProgress_Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchSignout_MatchSignout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCMatchSignout_PlayerSignout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServerToGCAbandonMatch_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_underlords_dac_gcmessages_server_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgServertoGCPuzzleBestResponse_Leaderboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_underlords_dac_gcmessages_server_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_underlords_dac_gcmessages_server_proto_goTypes,
		DependencyIndexes: file_underlords_dac_gcmessages_server_proto_depIdxs,
		EnumInfos:         file_underlords_dac_gcmessages_server_proto_enumTypes,
		MessageInfos:      file_underlords_dac_gcmessages_server_proto_msgTypes,
	}.Build()
	File_underlords_dac_gcmessages_server_proto = out.File
	file_underlords_dac_gcmessages_server_proto_rawDesc = nil
	file_underlords_dac_gcmessages_server_proto_goTypes = nil
	file_underlords_dac_gcmessages_server_proto_depIdxs = nil
}
