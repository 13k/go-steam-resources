// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.2
// source: tf2/econ_gcmessages.proto

package tf2

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EGCItemMsg int32

const (
	EGCItemMsg_k_EMsgGCBase                                   EGCItemMsg = 1000
	EGCItemMsg_k_EMsgGCSetSingleItemPosition                  EGCItemMsg = 1001
	EGCItemMsg_k_EMsgGCCraft                                  EGCItemMsg = 1002
	EGCItemMsg_k_EMsgGCCraftResponse                          EGCItemMsg = 1003
	EGCItemMsg_k_EMsgGCDelete                                 EGCItemMsg = 1004
	EGCItemMsg_k_EMsgGCVerifyCacheSubscription                EGCItemMsg = 1005
	EGCItemMsg_k_EMsgGCNameItem                               EGCItemMsg = 1006
	EGCItemMsg_k_EMsgGCUnlockCrate                            EGCItemMsg = 1007
	EGCItemMsg_k_EMsgGCUnlockCrateResponse                    EGCItemMsg = 1008
	EGCItemMsg_k_EMsgGCPaintItem                              EGCItemMsg = 1009
	EGCItemMsg_k_EMsgGCPaintItemResponse                      EGCItemMsg = 1010
	EGCItemMsg_k_EMsgGCGoldenWrenchBroadcast                  EGCItemMsg = 1011
	EGCItemMsg_k_EMsgGCMOTDRequest                            EGCItemMsg = 1012
	EGCItemMsg_k_EMsgGCMOTDRequestResponse                    EGCItemMsg = 1013
	EGCItemMsg_k_EMsgGCNameBaseItem                           EGCItemMsg = 1019
	EGCItemMsg_k_EMsgGCNameBaseItemResponse                   EGCItemMsg = 1020
	EGCItemMsg_k_EMsgGCRemoveSocketItem_DEPRECATED            EGCItemMsg = 1021
	EGCItemMsg_k_EMsgGCRemoveSocketItemResponse_DEPRECATED    EGCItemMsg = 1022
	EGCItemMsg_k_EMsgGCCustomizeItemTexture                   EGCItemMsg = 1023
	EGCItemMsg_k_EMsgGCCustomizeItemTextureResponse           EGCItemMsg = 1024
	EGCItemMsg_k_EMsgGCUseItemRequest                         EGCItemMsg = 1025
	EGCItemMsg_k_EMsgGCUseItemResponse                        EGCItemMsg = 1026
	EGCItemMsg_k_EMsgGCRespawnPostLoadoutChange               EGCItemMsg = 1029
	EGCItemMsg_k_EMsgGCRemoveItemName                         EGCItemMsg = 1030
	EGCItemMsg_k_EMsgGCRemoveItemPaint                        EGCItemMsg = 1031
	EGCItemMsg_k_EMsgGCGiftWrapItem                           EGCItemMsg = 1032
	EGCItemMsg_k_EMsgGCGiftWrapItemResponse                   EGCItemMsg = 1033
	EGCItemMsg_k_EMsgGCDeliverGift                            EGCItemMsg = 1034
	EGCItemMsg_k_EMsgGCDeliverGiftResponseReceiver            EGCItemMsg = 1036
	EGCItemMsg_k_EMsgGCUnwrapGiftRequest                      EGCItemMsg = 1037
	EGCItemMsg_k_EMsgGCUnwrapGiftResponse                     EGCItemMsg = 1038
	EGCItemMsg_k_EMsgGCSetItemStyle                           EGCItemMsg = 1039
	EGCItemMsg_k_EMsgGCUsedClaimCodeItem                      EGCItemMsg = 1040
	EGCItemMsg_k_EMsgGCSortItems                              EGCItemMsg = 1041
	EGCItemMsg_k_EMsgGC_RevolvingLootList_DEPRECATED          EGCItemMsg = 1042
	EGCItemMsg_k_EMsgGCLookupAccount                          EGCItemMsg = 1043
	EGCItemMsg_k_EMsgGCLookupAccountResponse                  EGCItemMsg = 1044
	EGCItemMsg_k_EMsgGCLookupAccountName                      EGCItemMsg = 1045
	EGCItemMsg_k_EMsgGCLookupAccountNameResponse              EGCItemMsg = 1046
	EGCItemMsg_k_EMsgGCUpdateItemSchema                       EGCItemMsg = 1049
	EGCItemMsg_k_EMsgGCRequestInventoryRefresh                EGCItemMsg = 1050
	EGCItemMsg_k_EMsgGCRemoveCustomTexture                    EGCItemMsg = 1051
	EGCItemMsg_k_EMsgGCRemoveCustomTextureResponse            EGCItemMsg = 1052
	EGCItemMsg_k_EMsgGCRemoveMakersMark                       EGCItemMsg = 1053
	EGCItemMsg_k_EMsgGCRemoveMakersMarkResponse               EGCItemMsg = 1054
	EGCItemMsg_k_EMsgGCRemoveUniqueCraftIndex                 EGCItemMsg = 1055
	EGCItemMsg_k_EMsgGCRemoveUniqueCraftIndexResponse         EGCItemMsg = 1056
	EGCItemMsg_k_EMsgGCSaxxyBroadcast                         EGCItemMsg = 1057
	EGCItemMsg_k_EMsgGCBackpackSortFinished                   EGCItemMsg = 1058
	EGCItemMsg_k_EMsgGCAdjustItemEquippedState                EGCItemMsg = 1059
	EGCItemMsg_k_EMsgGCCollectItem                            EGCItemMsg = 1061
	EGCItemMsg_k_EMsgGCItemAcknowledged                       EGCItemMsg = 1062
	EGCItemMsg_k_EMsgGCPresets_SelectPresetForClass           EGCItemMsg = 1063
	EGCItemMsg_k_EMsgGCPresets_SetItemPosition                EGCItemMsg = 1064
	EGCItemMsg_k_EMsgGC_ReportAbuse                           EGCItemMsg = 1065
	EGCItemMsg_k_EMsgGC_ReportAbuseResponse                   EGCItemMsg = 1066
	EGCItemMsg_k_EMsgGCPresets_SelectPresetForClassReply      EGCItemMsg = 1067
	EGCItemMsg_k_EMsgGCNameItemNotification                   EGCItemMsg = 1068
	EGCItemMsg_k_EMsgGCClientDisplayNotification              EGCItemMsg = 1069
	EGCItemMsg_k_EMsgGCApplyStrangePart                       EGCItemMsg = 1070
	EGCItemMsg_k_EMsgGC_IncrementKillCountAttribute           EGCItemMsg = 1071
	EGCItemMsg_k_EMsgGC_IncrementKillCountResponse            EGCItemMsg = 1072
	EGCItemMsg_k_EMsgGCRemoveStrangePart                      EGCItemMsg = 1073
	EGCItemMsg_k_EMsgGCResetStrangeScores                     EGCItemMsg = 1074
	EGCItemMsg_k_EMsgGCGiftedItems                            EGCItemMsg = 1075
	EGCItemMsg_k_EMsgGCApplyUpgradeCard                       EGCItemMsg = 1077
	EGCItemMsg_k_EMsgGCRemoveUpgradeCard                      EGCItemMsg = 1078
	EGCItemMsg_k_EMsgGCApplyStrangeRestriction                EGCItemMsg = 1079
	EGCItemMsg_k_EMsgGCClientRequestMarketData                EGCItemMsg = 1080
	EGCItemMsg_k_EMsgGCClientRequestMarketDataResponse        EGCItemMsg = 1081
	EGCItemMsg_k_EMsgGCApplyXifier                            EGCItemMsg = 1082
	EGCItemMsg_k_EMsgGCApplyXifierResponse                    EGCItemMsg = 1083
	EGCItemMsg_k_EMsgGC_TrackUniquePlayerPairEvent            EGCItemMsg = 1084
	EGCItemMsg_k_EMsgGCFulfillDynamicRecipeComponent          EGCItemMsg = 1085
	EGCItemMsg_k_EMsgGCFulfillDynamicRecipeComponentResponse  EGCItemMsg = 1086
	EGCItemMsg_k_EMsgGCSetItemEffectVerticalOffset            EGCItemMsg = 1087
	EGCItemMsg_k_EMsgGCSetHatEffectUseHeadOrigin              EGCItemMsg = 1088
	EGCItemMsg_k_EMsgGCItemEaterRecharger                     EGCItemMsg = 1089
	EGCItemMsg_k_EMsgGCItemEaterRechargerResponse             EGCItemMsg = 1090
	EGCItemMsg_k_EMsgGCApplyBaseItemXifier                    EGCItemMsg = 1091
	EGCItemMsg_k_EMsgGCApplyClassTransmogrifier               EGCItemMsg = 1092
	EGCItemMsg_k_EMsgGCApplyHalloweenSpellbookPage            EGCItemMsg = 1093
	EGCItemMsg_k_EMsgGCRemoveKillStreak                       EGCItemMsg = 1094
	EGCItemMsg_k_EMsgGCRemoveKillStreakResponse               EGCItemMsg = 1095
	EGCItemMsg_k_EMsgGCTFSpecificItemBroadcast                EGCItemMsg = 1096
	EGCItemMsg_k_EMsgGC_IncrementKillCountAttribute_Multiple  EGCItemMsg = 1097
	EGCItemMsg_k_EMsgGCDeliverGiftResponseGiver               EGCItemMsg = 1098
	EGCItemMsg_k_EMsgGCSetItemPositions                       EGCItemMsg = 1100
	EGCItemMsg_k_EMsgGCLookupMultipleAccountNames             EGCItemMsg = 1101
	EGCItemMsg_k_EMsgGCLookupMultipleAccountNamesResponse     EGCItemMsg = 1102
	EGCItemMsg_k_EMsgGCTradingBase                            EGCItemMsg = 1500
	EGCItemMsg_k_EMsgGCTrading_InitiateTradeRequest           EGCItemMsg = 1501
	EGCItemMsg_k_EMsgGCTrading_InitiateTradeResponse          EGCItemMsg = 1502
	EGCItemMsg_k_EMsgGCTrading_StartSession                   EGCItemMsg = 1503
	EGCItemMsg_k_EMsgGCTrading_SessionClosed                  EGCItemMsg = 1509
	EGCItemMsg_k_EMsgGCTrading_CancelSession                  EGCItemMsg = 1510
	EGCItemMsg_k_EMsgGCTrading_InitiateTradeRequestResponse   EGCItemMsg = 1514
	EGCItemMsg_k_EMsgGCServerBrowser_FavoriteServer           EGCItemMsg = 1601
	EGCItemMsg_k_EMsgGCServerBrowser_BlacklistServer          EGCItemMsg = 1602
	EGCItemMsg_k_EMsgGCServerRentalsBase                      EGCItemMsg = 1700
	EGCItemMsg_k_EMsgGCItemPreviewCheckStatus                 EGCItemMsg = 1701
	EGCItemMsg_k_EMsgGCItemPreviewStatusResponse              EGCItemMsg = 1702
	EGCItemMsg_k_EMsgGCItemPreviewRequest                     EGCItemMsg = 1703
	EGCItemMsg_k_EMsgGCItemPreviewRequestResponse             EGCItemMsg = 1704
	EGCItemMsg_k_EMsgGCItemPreviewExpire                      EGCItemMsg = 1705
	EGCItemMsg_k_EMsgGCItemPreviewExpireNotification          EGCItemMsg = 1706
	EGCItemMsg_k_EMsgGCItemPreviewItemBoughtNotification      EGCItemMsg = 1708
	EGCItemMsg_k_EMsgGCDev_NewItemRequest                     EGCItemMsg = 2001
	EGCItemMsg_k_EMsgGCDev_NewItemRequestResponse             EGCItemMsg = 2002
	EGCItemMsg_k_EMsgGCDev_DebugRollLootRequest               EGCItemMsg = 2003
	EGCItemMsg_k_EMsgGCStoreGetUserData                       EGCItemMsg = 2500
	EGCItemMsg_k_EMsgGCStoreGetUserDataResponse               EGCItemMsg = 2501
	EGCItemMsg_k_EMsgGCStorePurchaseInit_DEPRECATED           EGCItemMsg = 2502
	EGCItemMsg_k_EMsgGCStorePurchaseInitResponse_DEPRECATED   EGCItemMsg = 2503
	EGCItemMsg_k_EMsgGCStorePurchaseFinalize                  EGCItemMsg = 2512
	EGCItemMsg_k_EMsgGCStorePurchaseFinalizeResponse          EGCItemMsg = 2513
	EGCItemMsg_k_EMsgGCStorePurchaseCancel                    EGCItemMsg = 2514
	EGCItemMsg_k_EMsgGCStorePurchaseCancelResponse            EGCItemMsg = 2515
	EGCItemMsg_k_EMsgGCStorePurchaseQueryTxn                  EGCItemMsg = 2508
	EGCItemMsg_k_EMsgGCStorePurchaseQueryTxnResponse          EGCItemMsg = 2509
	EGCItemMsg_k_EMsgGCStorePurchaseInit                      EGCItemMsg = 2510
	EGCItemMsg_k_EMsgGCStorePurchaseInitResponse              EGCItemMsg = 2511
	EGCItemMsg_k_EMsgGCToGCDirtySDOCache                      EGCItemMsg = 2516
	EGCItemMsg_k_EMsgGCToGCDirtyMultipleSDOCache              EGCItemMsg = 2517
	EGCItemMsg_k_EMsgGCToGCUpdateSQLKeyValue                  EGCItemMsg = 2518
	EGCItemMsg_k_EMsgGCToGCBroadcastConsoleCommand            EGCItemMsg = 2521
	EGCItemMsg_k_EMsgGCServerVersionUpdated                   EGCItemMsg = 2522
	EGCItemMsg_k_EMsgGCApplyAutograph                         EGCItemMsg = 2523
	EGCItemMsg_k_EMsgGCToGCWebAPIAccountChanged               EGCItemMsg = 2524
	EGCItemMsg_k_EMsgGCRequestAnnouncements                   EGCItemMsg = 2525
	EGCItemMsg_k_EMsgGCRequestAnnouncementsResponse           EGCItemMsg = 2526
	EGCItemMsg_k_EMsgGCRequestPassportItemGrant               EGCItemMsg = 2527
	EGCItemMsg_k_EMsgGCClientVersionUpdated                   EGCItemMsg = 2528
	EGCItemMsg_k_EMsgGCItemPurgatory_FinalizePurchase         EGCItemMsg = 2531
	EGCItemMsg_k_EMsgGCItemPurgatory_FinalizePurchaseResponse EGCItemMsg = 2532
	EGCItemMsg_k_EMsgGCItemPurgatory_RefundPurchase           EGCItemMsg = 2533
	EGCItemMsg_k_EMsgGCItemPurgatory_RefundPurchaseResponse   EGCItemMsg = 2534
	EGCItemMsg_k_EMsgGCToGCPlayerStrangeCountAdjustments      EGCItemMsg = 2535
	EGCItemMsg_k_EMsgGCRequestStoreSalesData                  EGCItemMsg = 2536
	EGCItemMsg_k_EMsgGCRequestStoreSalesDataResponse          EGCItemMsg = 2537
	EGCItemMsg_k_EMsgGCRequestStoreSalesDataUpToDateResponse  EGCItemMsg = 2538
	EGCItemMsg_k_EMsgGCToGCPingRequest                        EGCItemMsg = 2539
	EGCItemMsg_k_EMsgGCToGCPingResponse                       EGCItemMsg = 2540
	EGCItemMsg_k_EMsgGCToGCGetUserSessionServer               EGCItemMsg = 2541
	EGCItemMsg_k_EMsgGCToGCGetUserSessionServerResponse       EGCItemMsg = 2542
	EGCItemMsg_k_EMsgGCToGCGetUserServerMembers               EGCItemMsg = 2543
	EGCItemMsg_k_EMsgGCToGCGetUserServerMembersResponse       EGCItemMsg = 2544
	EGCItemMsg_k_EMsgGCToGCGrantSelfMadeItemToAccount         EGCItemMsg = 2555
	EGCItemMsg_k_EMsgGCToGCThankedByNewUser                   EGCItemMsg = 2556
	EGCItemMsg_k_EMsgGCShuffleCrateContents                   EGCItemMsg = 2557
	EGCItemMsg_k_EMsgGCQuestObjective_Progress                EGCItemMsg = 2558
	EGCItemMsg_k_EMsgGCQuestCompleted                         EGCItemMsg = 2559
	EGCItemMsg_k_EMsgGCApplyDuckToken                         EGCItemMsg = 2560
	EGCItemMsg_k_EMsgGCQuestObjective_PointsChange            EGCItemMsg = 2562
	EGCItemMsg_k_EMsgGCQuestObjective_RequestLoanerItems      EGCItemMsg = 2564
	EGCItemMsg_k_EMsgGCQuestObjective_RequestLoanerResponse   EGCItemMsg = 2565
	EGCItemMsg_k_EMsgGCApplyStrangeCountTransfer              EGCItemMsg = 2566
	EGCItemMsg_k_EMsgGCCraftCollectionUpgrade                 EGCItemMsg = 2567
	EGCItemMsg_k_EMsgGCCraftHalloweenOffering                 EGCItemMsg = 2568
	EGCItemMsg_k_EMsgGCQuestDiscard_Request                   EGCItemMsg = 2569
	EGCItemMsg_k_EMsgGCRemoveGiftedBy                         EGCItemMsg = 2570
	EGCItemMsg_k_EMsgGCRemoveGiftedByResponse                 EGCItemMsg = 2571
	EGCItemMsg_k_EMsgGCRemoveFestivizer                       EGCItemMsg = 2572
	EGCItemMsg_k_EMsgGCRemoveFestivizerResponse               EGCItemMsg = 2573
	EGCItemMsg_k_EMsgGCCraftCommonStatClock                   EGCItemMsg = 2574
)

// Enum value maps for EGCItemMsg.
var (
	EGCItemMsg_name = map[int32]string{
		1000: "k_EMsgGCBase",
		1001: "k_EMsgGCSetSingleItemPosition",
		1002: "k_EMsgGCCraft",
		1003: "k_EMsgGCCraftResponse",
		1004: "k_EMsgGCDelete",
		1005: "k_EMsgGCVerifyCacheSubscription",
		1006: "k_EMsgGCNameItem",
		1007: "k_EMsgGCUnlockCrate",
		1008: "k_EMsgGCUnlockCrateResponse",
		1009: "k_EMsgGCPaintItem",
		1010: "k_EMsgGCPaintItemResponse",
		1011: "k_EMsgGCGoldenWrenchBroadcast",
		1012: "k_EMsgGCMOTDRequest",
		1013: "k_EMsgGCMOTDRequestResponse",
		1019: "k_EMsgGCNameBaseItem",
		1020: "k_EMsgGCNameBaseItemResponse",
		1021: "k_EMsgGCRemoveSocketItem_DEPRECATED",
		1022: "k_EMsgGCRemoveSocketItemResponse_DEPRECATED",
		1023: "k_EMsgGCCustomizeItemTexture",
		1024: "k_EMsgGCCustomizeItemTextureResponse",
		1025: "k_EMsgGCUseItemRequest",
		1026: "k_EMsgGCUseItemResponse",
		1029: "k_EMsgGCRespawnPostLoadoutChange",
		1030: "k_EMsgGCRemoveItemName",
		1031: "k_EMsgGCRemoveItemPaint",
		1032: "k_EMsgGCGiftWrapItem",
		1033: "k_EMsgGCGiftWrapItemResponse",
		1034: "k_EMsgGCDeliverGift",
		1036: "k_EMsgGCDeliverGiftResponseReceiver",
		1037: "k_EMsgGCUnwrapGiftRequest",
		1038: "k_EMsgGCUnwrapGiftResponse",
		1039: "k_EMsgGCSetItemStyle",
		1040: "k_EMsgGCUsedClaimCodeItem",
		1041: "k_EMsgGCSortItems",
		1042: "k_EMsgGC_RevolvingLootList_DEPRECATED",
		1043: "k_EMsgGCLookupAccount",
		1044: "k_EMsgGCLookupAccountResponse",
		1045: "k_EMsgGCLookupAccountName",
		1046: "k_EMsgGCLookupAccountNameResponse",
		1049: "k_EMsgGCUpdateItemSchema",
		1050: "k_EMsgGCRequestInventoryRefresh",
		1051: "k_EMsgGCRemoveCustomTexture",
		1052: "k_EMsgGCRemoveCustomTextureResponse",
		1053: "k_EMsgGCRemoveMakersMark",
		1054: "k_EMsgGCRemoveMakersMarkResponse",
		1055: "k_EMsgGCRemoveUniqueCraftIndex",
		1056: "k_EMsgGCRemoveUniqueCraftIndexResponse",
		1057: "k_EMsgGCSaxxyBroadcast",
		1058: "k_EMsgGCBackpackSortFinished",
		1059: "k_EMsgGCAdjustItemEquippedState",
		1061: "k_EMsgGCCollectItem",
		1062: "k_EMsgGCItemAcknowledged",
		1063: "k_EMsgGCPresets_SelectPresetForClass",
		1064: "k_EMsgGCPresets_SetItemPosition",
		1065: "k_EMsgGC_ReportAbuse",
		1066: "k_EMsgGC_ReportAbuseResponse",
		1067: "k_EMsgGCPresets_SelectPresetForClassReply",
		1068: "k_EMsgGCNameItemNotification",
		1069: "k_EMsgGCClientDisplayNotification",
		1070: "k_EMsgGCApplyStrangePart",
		1071: "k_EMsgGC_IncrementKillCountAttribute",
		1072: "k_EMsgGC_IncrementKillCountResponse",
		1073: "k_EMsgGCRemoveStrangePart",
		1074: "k_EMsgGCResetStrangeScores",
		1075: "k_EMsgGCGiftedItems",
		1077: "k_EMsgGCApplyUpgradeCard",
		1078: "k_EMsgGCRemoveUpgradeCard",
		1079: "k_EMsgGCApplyStrangeRestriction",
		1080: "k_EMsgGCClientRequestMarketData",
		1081: "k_EMsgGCClientRequestMarketDataResponse",
		1082: "k_EMsgGCApplyXifier",
		1083: "k_EMsgGCApplyXifierResponse",
		1084: "k_EMsgGC_TrackUniquePlayerPairEvent",
		1085: "k_EMsgGCFulfillDynamicRecipeComponent",
		1086: "k_EMsgGCFulfillDynamicRecipeComponentResponse",
		1087: "k_EMsgGCSetItemEffectVerticalOffset",
		1088: "k_EMsgGCSetHatEffectUseHeadOrigin",
		1089: "k_EMsgGCItemEaterRecharger",
		1090: "k_EMsgGCItemEaterRechargerResponse",
		1091: "k_EMsgGCApplyBaseItemXifier",
		1092: "k_EMsgGCApplyClassTransmogrifier",
		1093: "k_EMsgGCApplyHalloweenSpellbookPage",
		1094: "k_EMsgGCRemoveKillStreak",
		1095: "k_EMsgGCRemoveKillStreakResponse",
		1096: "k_EMsgGCTFSpecificItemBroadcast",
		1097: "k_EMsgGC_IncrementKillCountAttribute_Multiple",
		1098: "k_EMsgGCDeliverGiftResponseGiver",
		1100: "k_EMsgGCSetItemPositions",
		1101: "k_EMsgGCLookupMultipleAccountNames",
		1102: "k_EMsgGCLookupMultipleAccountNamesResponse",
		1500: "k_EMsgGCTradingBase",
		1501: "k_EMsgGCTrading_InitiateTradeRequest",
		1502: "k_EMsgGCTrading_InitiateTradeResponse",
		1503: "k_EMsgGCTrading_StartSession",
		1509: "k_EMsgGCTrading_SessionClosed",
		1510: "k_EMsgGCTrading_CancelSession",
		1514: "k_EMsgGCTrading_InitiateTradeRequestResponse",
		1601: "k_EMsgGCServerBrowser_FavoriteServer",
		1602: "k_EMsgGCServerBrowser_BlacklistServer",
		1700: "k_EMsgGCServerRentalsBase",
		1701: "k_EMsgGCItemPreviewCheckStatus",
		1702: "k_EMsgGCItemPreviewStatusResponse",
		1703: "k_EMsgGCItemPreviewRequest",
		1704: "k_EMsgGCItemPreviewRequestResponse",
		1705: "k_EMsgGCItemPreviewExpire",
		1706: "k_EMsgGCItemPreviewExpireNotification",
		1708: "k_EMsgGCItemPreviewItemBoughtNotification",
		2001: "k_EMsgGCDev_NewItemRequest",
		2002: "k_EMsgGCDev_NewItemRequestResponse",
		2003: "k_EMsgGCDev_DebugRollLootRequest",
		2500: "k_EMsgGCStoreGetUserData",
		2501: "k_EMsgGCStoreGetUserDataResponse",
		2502: "k_EMsgGCStorePurchaseInit_DEPRECATED",
		2503: "k_EMsgGCStorePurchaseInitResponse_DEPRECATED",
		2512: "k_EMsgGCStorePurchaseFinalize",
		2513: "k_EMsgGCStorePurchaseFinalizeResponse",
		2514: "k_EMsgGCStorePurchaseCancel",
		2515: "k_EMsgGCStorePurchaseCancelResponse",
		2508: "k_EMsgGCStorePurchaseQueryTxn",
		2509: "k_EMsgGCStorePurchaseQueryTxnResponse",
		2510: "k_EMsgGCStorePurchaseInit",
		2511: "k_EMsgGCStorePurchaseInitResponse",
		2516: "k_EMsgGCToGCDirtySDOCache",
		2517: "k_EMsgGCToGCDirtyMultipleSDOCache",
		2518: "k_EMsgGCToGCUpdateSQLKeyValue",
		2521: "k_EMsgGCToGCBroadcastConsoleCommand",
		2522: "k_EMsgGCServerVersionUpdated",
		2523: "k_EMsgGCApplyAutograph",
		2524: "k_EMsgGCToGCWebAPIAccountChanged",
		2525: "k_EMsgGCRequestAnnouncements",
		2526: "k_EMsgGCRequestAnnouncementsResponse",
		2527: "k_EMsgGCRequestPassportItemGrant",
		2528: "k_EMsgGCClientVersionUpdated",
		2531: "k_EMsgGCItemPurgatory_FinalizePurchase",
		2532: "k_EMsgGCItemPurgatory_FinalizePurchaseResponse",
		2533: "k_EMsgGCItemPurgatory_RefundPurchase",
		2534: "k_EMsgGCItemPurgatory_RefundPurchaseResponse",
		2535: "k_EMsgGCToGCPlayerStrangeCountAdjustments",
		2536: "k_EMsgGCRequestStoreSalesData",
		2537: "k_EMsgGCRequestStoreSalesDataResponse",
		2538: "k_EMsgGCRequestStoreSalesDataUpToDateResponse",
		2539: "k_EMsgGCToGCPingRequest",
		2540: "k_EMsgGCToGCPingResponse",
		2541: "k_EMsgGCToGCGetUserSessionServer",
		2542: "k_EMsgGCToGCGetUserSessionServerResponse",
		2543: "k_EMsgGCToGCGetUserServerMembers",
		2544: "k_EMsgGCToGCGetUserServerMembersResponse",
		2555: "k_EMsgGCToGCGrantSelfMadeItemToAccount",
		2556: "k_EMsgGCToGCThankedByNewUser",
		2557: "k_EMsgGCShuffleCrateContents",
		2558: "k_EMsgGCQuestObjective_Progress",
		2559: "k_EMsgGCQuestCompleted",
		2560: "k_EMsgGCApplyDuckToken",
		2562: "k_EMsgGCQuestObjective_PointsChange",
		2564: "k_EMsgGCQuestObjective_RequestLoanerItems",
		2565: "k_EMsgGCQuestObjective_RequestLoanerResponse",
		2566: "k_EMsgGCApplyStrangeCountTransfer",
		2567: "k_EMsgGCCraftCollectionUpgrade",
		2568: "k_EMsgGCCraftHalloweenOffering",
		2569: "k_EMsgGCQuestDiscard_Request",
		2570: "k_EMsgGCRemoveGiftedBy",
		2571: "k_EMsgGCRemoveGiftedByResponse",
		2572: "k_EMsgGCRemoveFestivizer",
		2573: "k_EMsgGCRemoveFestivizerResponse",
		2574: "k_EMsgGCCraftCommonStatClock",
	}
	EGCItemMsg_value = map[string]int32{
		"k_EMsgGCBase":                                   1000,
		"k_EMsgGCSetSingleItemPosition":                  1001,
		"k_EMsgGCCraft":                                  1002,
		"k_EMsgGCCraftResponse":                          1003,
		"k_EMsgGCDelete":                                 1004,
		"k_EMsgGCVerifyCacheSubscription":                1005,
		"k_EMsgGCNameItem":                               1006,
		"k_EMsgGCUnlockCrate":                            1007,
		"k_EMsgGCUnlockCrateResponse":                    1008,
		"k_EMsgGCPaintItem":                              1009,
		"k_EMsgGCPaintItemResponse":                      1010,
		"k_EMsgGCGoldenWrenchBroadcast":                  1011,
		"k_EMsgGCMOTDRequest":                            1012,
		"k_EMsgGCMOTDRequestResponse":                    1013,
		"k_EMsgGCNameBaseItem":                           1019,
		"k_EMsgGCNameBaseItemResponse":                   1020,
		"k_EMsgGCRemoveSocketItem_DEPRECATED":            1021,
		"k_EMsgGCRemoveSocketItemResponse_DEPRECATED":    1022,
		"k_EMsgGCCustomizeItemTexture":                   1023,
		"k_EMsgGCCustomizeItemTextureResponse":           1024,
		"k_EMsgGCUseItemRequest":                         1025,
		"k_EMsgGCUseItemResponse":                        1026,
		"k_EMsgGCRespawnPostLoadoutChange":               1029,
		"k_EMsgGCRemoveItemName":                         1030,
		"k_EMsgGCRemoveItemPaint":                        1031,
		"k_EMsgGCGiftWrapItem":                           1032,
		"k_EMsgGCGiftWrapItemResponse":                   1033,
		"k_EMsgGCDeliverGift":                            1034,
		"k_EMsgGCDeliverGiftResponseReceiver":            1036,
		"k_EMsgGCUnwrapGiftRequest":                      1037,
		"k_EMsgGCUnwrapGiftResponse":                     1038,
		"k_EMsgGCSetItemStyle":                           1039,
		"k_EMsgGCUsedClaimCodeItem":                      1040,
		"k_EMsgGCSortItems":                              1041,
		"k_EMsgGC_RevolvingLootList_DEPRECATED":          1042,
		"k_EMsgGCLookupAccount":                          1043,
		"k_EMsgGCLookupAccountResponse":                  1044,
		"k_EMsgGCLookupAccountName":                      1045,
		"k_EMsgGCLookupAccountNameResponse":              1046,
		"k_EMsgGCUpdateItemSchema":                       1049,
		"k_EMsgGCRequestInventoryRefresh":                1050,
		"k_EMsgGCRemoveCustomTexture":                    1051,
		"k_EMsgGCRemoveCustomTextureResponse":            1052,
		"k_EMsgGCRemoveMakersMark":                       1053,
		"k_EMsgGCRemoveMakersMarkResponse":               1054,
		"k_EMsgGCRemoveUniqueCraftIndex":                 1055,
		"k_EMsgGCRemoveUniqueCraftIndexResponse":         1056,
		"k_EMsgGCSaxxyBroadcast":                         1057,
		"k_EMsgGCBackpackSortFinished":                   1058,
		"k_EMsgGCAdjustItemEquippedState":                1059,
		"k_EMsgGCCollectItem":                            1061,
		"k_EMsgGCItemAcknowledged":                       1062,
		"k_EMsgGCPresets_SelectPresetForClass":           1063,
		"k_EMsgGCPresets_SetItemPosition":                1064,
		"k_EMsgGC_ReportAbuse":                           1065,
		"k_EMsgGC_ReportAbuseResponse":                   1066,
		"k_EMsgGCPresets_SelectPresetForClassReply":      1067,
		"k_EMsgGCNameItemNotification":                   1068,
		"k_EMsgGCClientDisplayNotification":              1069,
		"k_EMsgGCApplyStrangePart":                       1070,
		"k_EMsgGC_IncrementKillCountAttribute":           1071,
		"k_EMsgGC_IncrementKillCountResponse":            1072,
		"k_EMsgGCRemoveStrangePart":                      1073,
		"k_EMsgGCResetStrangeScores":                     1074,
		"k_EMsgGCGiftedItems":                            1075,
		"k_EMsgGCApplyUpgradeCard":                       1077,
		"k_EMsgGCRemoveUpgradeCard":                      1078,
		"k_EMsgGCApplyStrangeRestriction":                1079,
		"k_EMsgGCClientRequestMarketData":                1080,
		"k_EMsgGCClientRequestMarketDataResponse":        1081,
		"k_EMsgGCApplyXifier":                            1082,
		"k_EMsgGCApplyXifierResponse":                    1083,
		"k_EMsgGC_TrackUniquePlayerPairEvent":            1084,
		"k_EMsgGCFulfillDynamicRecipeComponent":          1085,
		"k_EMsgGCFulfillDynamicRecipeComponentResponse":  1086,
		"k_EMsgGCSetItemEffectVerticalOffset":            1087,
		"k_EMsgGCSetHatEffectUseHeadOrigin":              1088,
		"k_EMsgGCItemEaterRecharger":                     1089,
		"k_EMsgGCItemEaterRechargerResponse":             1090,
		"k_EMsgGCApplyBaseItemXifier":                    1091,
		"k_EMsgGCApplyClassTransmogrifier":               1092,
		"k_EMsgGCApplyHalloweenSpellbookPage":            1093,
		"k_EMsgGCRemoveKillStreak":                       1094,
		"k_EMsgGCRemoveKillStreakResponse":               1095,
		"k_EMsgGCTFSpecificItemBroadcast":                1096,
		"k_EMsgGC_IncrementKillCountAttribute_Multiple":  1097,
		"k_EMsgGCDeliverGiftResponseGiver":               1098,
		"k_EMsgGCSetItemPositions":                       1100,
		"k_EMsgGCLookupMultipleAccountNames":             1101,
		"k_EMsgGCLookupMultipleAccountNamesResponse":     1102,
		"k_EMsgGCTradingBase":                            1500,
		"k_EMsgGCTrading_InitiateTradeRequest":           1501,
		"k_EMsgGCTrading_InitiateTradeResponse":          1502,
		"k_EMsgGCTrading_StartSession":                   1503,
		"k_EMsgGCTrading_SessionClosed":                  1509,
		"k_EMsgGCTrading_CancelSession":                  1510,
		"k_EMsgGCTrading_InitiateTradeRequestResponse":   1514,
		"k_EMsgGCServerBrowser_FavoriteServer":           1601,
		"k_EMsgGCServerBrowser_BlacklistServer":          1602,
		"k_EMsgGCServerRentalsBase":                      1700,
		"k_EMsgGCItemPreviewCheckStatus":                 1701,
		"k_EMsgGCItemPreviewStatusResponse":              1702,
		"k_EMsgGCItemPreviewRequest":                     1703,
		"k_EMsgGCItemPreviewRequestResponse":             1704,
		"k_EMsgGCItemPreviewExpire":                      1705,
		"k_EMsgGCItemPreviewExpireNotification":          1706,
		"k_EMsgGCItemPreviewItemBoughtNotification":      1708,
		"k_EMsgGCDev_NewItemRequest":                     2001,
		"k_EMsgGCDev_NewItemRequestResponse":             2002,
		"k_EMsgGCDev_DebugRollLootRequest":               2003,
		"k_EMsgGCStoreGetUserData":                       2500,
		"k_EMsgGCStoreGetUserDataResponse":               2501,
		"k_EMsgGCStorePurchaseInit_DEPRECATED":           2502,
		"k_EMsgGCStorePurchaseInitResponse_DEPRECATED":   2503,
		"k_EMsgGCStorePurchaseFinalize":                  2512,
		"k_EMsgGCStorePurchaseFinalizeResponse":          2513,
		"k_EMsgGCStorePurchaseCancel":                    2514,
		"k_EMsgGCStorePurchaseCancelResponse":            2515,
		"k_EMsgGCStorePurchaseQueryTxn":                  2508,
		"k_EMsgGCStorePurchaseQueryTxnResponse":          2509,
		"k_EMsgGCStorePurchaseInit":                      2510,
		"k_EMsgGCStorePurchaseInitResponse":              2511,
		"k_EMsgGCToGCDirtySDOCache":                      2516,
		"k_EMsgGCToGCDirtyMultipleSDOCache":              2517,
		"k_EMsgGCToGCUpdateSQLKeyValue":                  2518,
		"k_EMsgGCToGCBroadcastConsoleCommand":            2521,
		"k_EMsgGCServerVersionUpdated":                   2522,
		"k_EMsgGCApplyAutograph":                         2523,
		"k_EMsgGCToGCWebAPIAccountChanged":               2524,
		"k_EMsgGCRequestAnnouncements":                   2525,
		"k_EMsgGCRequestAnnouncementsResponse":           2526,
		"k_EMsgGCRequestPassportItemGrant":               2527,
		"k_EMsgGCClientVersionUpdated":                   2528,
		"k_EMsgGCItemPurgatory_FinalizePurchase":         2531,
		"k_EMsgGCItemPurgatory_FinalizePurchaseResponse": 2532,
		"k_EMsgGCItemPurgatory_RefundPurchase":           2533,
		"k_EMsgGCItemPurgatory_RefundPurchaseResponse":   2534,
		"k_EMsgGCToGCPlayerStrangeCountAdjustments":      2535,
		"k_EMsgGCRequestStoreSalesData":                  2536,
		"k_EMsgGCRequestStoreSalesDataResponse":          2537,
		"k_EMsgGCRequestStoreSalesDataUpToDateResponse":  2538,
		"k_EMsgGCToGCPingRequest":                        2539,
		"k_EMsgGCToGCPingResponse":                       2540,
		"k_EMsgGCToGCGetUserSessionServer":               2541,
		"k_EMsgGCToGCGetUserSessionServerResponse":       2542,
		"k_EMsgGCToGCGetUserServerMembers":               2543,
		"k_EMsgGCToGCGetUserServerMembersResponse":       2544,
		"k_EMsgGCToGCGrantSelfMadeItemToAccount":         2555,
		"k_EMsgGCToGCThankedByNewUser":                   2556,
		"k_EMsgGCShuffleCrateContents":                   2557,
		"k_EMsgGCQuestObjective_Progress":                2558,
		"k_EMsgGCQuestCompleted":                         2559,
		"k_EMsgGCApplyDuckToken":                         2560,
		"k_EMsgGCQuestObjective_PointsChange":            2562,
		"k_EMsgGCQuestObjective_RequestLoanerItems":      2564,
		"k_EMsgGCQuestObjective_RequestLoanerResponse":   2565,
		"k_EMsgGCApplyStrangeCountTransfer":              2566,
		"k_EMsgGCCraftCollectionUpgrade":                 2567,
		"k_EMsgGCCraftHalloweenOffering":                 2568,
		"k_EMsgGCQuestDiscard_Request":                   2569,
		"k_EMsgGCRemoveGiftedBy":                         2570,
		"k_EMsgGCRemoveGiftedByResponse":                 2571,
		"k_EMsgGCRemoveFestivizer":                       2572,
		"k_EMsgGCRemoveFestivizerResponse":               2573,
		"k_EMsgGCCraftCommonStatClock":                   2574,
	}
)

func (x EGCItemMsg) Enum() *EGCItemMsg {
	p := new(EGCItemMsg)
	*p = x
	return p
}

func (x EGCItemMsg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCItemMsg) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_econ_gcmessages_proto_enumTypes[0].Descriptor()
}

func (EGCItemMsg) Type() protoreflect.EnumType {
	return &file_tf2_econ_gcmessages_proto_enumTypes[0]
}

func (x EGCItemMsg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCItemMsg) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCItemMsg(num)
	return nil
}

// Deprecated: Use EGCItemMsg.Descriptor instead.
func (EGCItemMsg) EnumDescriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{0}
}

type EGCMsgResponse int32

const (
	EGCMsgResponse_k_EGCMsgResponseOK           EGCMsgResponse = 0
	EGCMsgResponse_k_EGCMsgResponseDenied       EGCMsgResponse = 1
	EGCMsgResponse_k_EGCMsgResponseServerError  EGCMsgResponse = 2
	EGCMsgResponse_k_EGCMsgResponseTimeout      EGCMsgResponse = 3
	EGCMsgResponse_k_EGCMsgResponseInvalid      EGCMsgResponse = 4
	EGCMsgResponse_k_EGCMsgResponseNoMatch      EGCMsgResponse = 5
	EGCMsgResponse_k_EGCMsgResponseUnknownError EGCMsgResponse = 6
	EGCMsgResponse_k_EGCMsgResponseNotLoggedOn  EGCMsgResponse = 7
	EGCMsgResponse_k_EGCMsgFailedToCreate       EGCMsgResponse = 8
)

// Enum value maps for EGCMsgResponse.
var (
	EGCMsgResponse_name = map[int32]string{
		0: "k_EGCMsgResponseOK",
		1: "k_EGCMsgResponseDenied",
		2: "k_EGCMsgResponseServerError",
		3: "k_EGCMsgResponseTimeout",
		4: "k_EGCMsgResponseInvalid",
		5: "k_EGCMsgResponseNoMatch",
		6: "k_EGCMsgResponseUnknownError",
		7: "k_EGCMsgResponseNotLoggedOn",
		8: "k_EGCMsgFailedToCreate",
	}
	EGCMsgResponse_value = map[string]int32{
		"k_EGCMsgResponseOK":           0,
		"k_EGCMsgResponseDenied":       1,
		"k_EGCMsgResponseServerError":  2,
		"k_EGCMsgResponseTimeout":      3,
		"k_EGCMsgResponseInvalid":      4,
		"k_EGCMsgResponseNoMatch":      5,
		"k_EGCMsgResponseUnknownError": 6,
		"k_EGCMsgResponseNotLoggedOn":  7,
		"k_EGCMsgFailedToCreate":       8,
	}
)

func (x EGCMsgResponse) Enum() *EGCMsgResponse {
	p := new(EGCMsgResponse)
	*p = x
	return p
}

func (x EGCMsgResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCMsgResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_econ_gcmessages_proto_enumTypes[1].Descriptor()
}

func (EGCMsgResponse) Type() protoreflect.EnumType {
	return &file_tf2_econ_gcmessages_proto_enumTypes[1]
}

func (x EGCMsgResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCMsgResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCMsgResponse(num)
	return nil
}

// Deprecated: Use EGCMsgResponse.Descriptor instead.
func (EGCMsgResponse) EnumDescriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{1}
}

type EUnlockStyle int32

const (
	EUnlockStyle_k_UnlockStyle_Succeeded               EUnlockStyle = 0
	EUnlockStyle_k_UnlockStyle_Failed_PreReq           EUnlockStyle = 1
	EUnlockStyle_k_UnlockStyle_Failed_CantAfford       EUnlockStyle = 2
	EUnlockStyle_k_UnlockStyle_Failed_CantCommit       EUnlockStyle = 3
	EUnlockStyle_k_UnlockStyle_Failed_CantLockCache    EUnlockStyle = 4
	EUnlockStyle_k_UnlockStyle_Failed_CantAffordAttrib EUnlockStyle = 5
	EUnlockStyle_k_UnlockStyle_Failed_CantAffordGem    EUnlockStyle = 6
)

// Enum value maps for EUnlockStyle.
var (
	EUnlockStyle_name = map[int32]string{
		0: "k_UnlockStyle_Succeeded",
		1: "k_UnlockStyle_Failed_PreReq",
		2: "k_UnlockStyle_Failed_CantAfford",
		3: "k_UnlockStyle_Failed_CantCommit",
		4: "k_UnlockStyle_Failed_CantLockCache",
		5: "k_UnlockStyle_Failed_CantAffordAttrib",
		6: "k_UnlockStyle_Failed_CantAffordGem",
	}
	EUnlockStyle_value = map[string]int32{
		"k_UnlockStyle_Succeeded":               0,
		"k_UnlockStyle_Failed_PreReq":           1,
		"k_UnlockStyle_Failed_CantAfford":       2,
		"k_UnlockStyle_Failed_CantCommit":       3,
		"k_UnlockStyle_Failed_CantLockCache":    4,
		"k_UnlockStyle_Failed_CantAffordAttrib": 5,
		"k_UnlockStyle_Failed_CantAffordGem":    6,
	}
)

func (x EUnlockStyle) Enum() *EUnlockStyle {
	p := new(EUnlockStyle)
	*p = x
	return p
}

func (x EUnlockStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUnlockStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_econ_gcmessages_proto_enumTypes[2].Descriptor()
}

func (EUnlockStyle) Type() protoreflect.EnumType {
	return &file_tf2_econ_gcmessages_proto_enumTypes[2]
}

func (x EUnlockStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUnlockStyle) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUnlockStyle(num)
	return nil
}

// Deprecated: Use EUnlockStyle.Descriptor instead.
func (EUnlockStyle) EnumDescriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{2}
}

type EItemPurgatoryResponse_Finalize int32

const (
	EItemPurgatoryResponse_Finalize_k_ItemPurgatoryResponse_Finalize_Succeeded                  EItemPurgatoryResponse_Finalize = 0
	EItemPurgatoryResponse_Finalize_k_ItemPurgatoryResponse_Finalize_Failed_Incomplete          EItemPurgatoryResponse_Finalize = 1
	EItemPurgatoryResponse_Finalize_k_ItemPurgatoryResponse_Finalize_Failed_ItemsNotInPurgatory EItemPurgatoryResponse_Finalize = 2
	EItemPurgatoryResponse_Finalize_k_ItemPurgatoryResponse_Finalize_Failed_CouldNotFindItems   EItemPurgatoryResponse_Finalize = 3
	EItemPurgatoryResponse_Finalize_k_ItemPurgatoryResponse_Finalize_Failed_NoSOCache           EItemPurgatoryResponse_Finalize = 4
	EItemPurgatoryResponse_Finalize_k_ItemPurgatoryResponse_Finalize_BackpackFull               EItemPurgatoryResponse_Finalize = 5
)

// Enum value maps for EItemPurgatoryResponse_Finalize.
var (
	EItemPurgatoryResponse_Finalize_name = map[int32]string{
		0: "k_ItemPurgatoryResponse_Finalize_Succeeded",
		1: "k_ItemPurgatoryResponse_Finalize_Failed_Incomplete",
		2: "k_ItemPurgatoryResponse_Finalize_Failed_ItemsNotInPurgatory",
		3: "k_ItemPurgatoryResponse_Finalize_Failed_CouldNotFindItems",
		4: "k_ItemPurgatoryResponse_Finalize_Failed_NoSOCache",
		5: "k_ItemPurgatoryResponse_Finalize_BackpackFull",
	}
	EItemPurgatoryResponse_Finalize_value = map[string]int32{
		"k_ItemPurgatoryResponse_Finalize_Succeeded":                  0,
		"k_ItemPurgatoryResponse_Finalize_Failed_Incomplete":          1,
		"k_ItemPurgatoryResponse_Finalize_Failed_ItemsNotInPurgatory": 2,
		"k_ItemPurgatoryResponse_Finalize_Failed_CouldNotFindItems":   3,
		"k_ItemPurgatoryResponse_Finalize_Failed_NoSOCache":           4,
		"k_ItemPurgatoryResponse_Finalize_BackpackFull":               5,
	}
)

func (x EItemPurgatoryResponse_Finalize) Enum() *EItemPurgatoryResponse_Finalize {
	p := new(EItemPurgatoryResponse_Finalize)
	*p = x
	return p
}

func (x EItemPurgatoryResponse_Finalize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EItemPurgatoryResponse_Finalize) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_econ_gcmessages_proto_enumTypes[3].Descriptor()
}

func (EItemPurgatoryResponse_Finalize) Type() protoreflect.EnumType {
	return &file_tf2_econ_gcmessages_proto_enumTypes[3]
}

func (x EItemPurgatoryResponse_Finalize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EItemPurgatoryResponse_Finalize) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EItemPurgatoryResponse_Finalize(num)
	return nil
}

// Deprecated: Use EItemPurgatoryResponse_Finalize.Descriptor instead.
func (EItemPurgatoryResponse_Finalize) EnumDescriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{3}
}

type EItemPurgatoryResponse_Refund int32

const (
	EItemPurgatoryResponse_Refund_k_ItemPurgatoryResponse_Refund_Succeeded                 EItemPurgatoryResponse_Refund = 0
	EItemPurgatoryResponse_Refund_k_ItemPurgatoryResponse_Refund_Failed_ItemNotInPurgatory EItemPurgatoryResponse_Refund = 1
	EItemPurgatoryResponse_Refund_k_ItemPurgatoryResponse_Refund_Failed_CouldNotFindItem   EItemPurgatoryResponse_Refund = 2
	EItemPurgatoryResponse_Refund_k_ItemPurgatoryResponse_Refund_Failed_NoSOCache          EItemPurgatoryResponse_Refund = 3
	EItemPurgatoryResponse_Refund_k_ItemPurgatoryResponse_Refund_Failed_NoDetail           EItemPurgatoryResponse_Refund = 4
	EItemPurgatoryResponse_Refund_k_ItemPurgatoryResponse_Refund_Failed_NexonWebAPI        EItemPurgatoryResponse_Refund = 5
)

// Enum value maps for EItemPurgatoryResponse_Refund.
var (
	EItemPurgatoryResponse_Refund_name = map[int32]string{
		0: "k_ItemPurgatoryResponse_Refund_Succeeded",
		1: "k_ItemPurgatoryResponse_Refund_Failed_ItemNotInPurgatory",
		2: "k_ItemPurgatoryResponse_Refund_Failed_CouldNotFindItem",
		3: "k_ItemPurgatoryResponse_Refund_Failed_NoSOCache",
		4: "k_ItemPurgatoryResponse_Refund_Failed_NoDetail",
		5: "k_ItemPurgatoryResponse_Refund_Failed_NexonWebAPI",
	}
	EItemPurgatoryResponse_Refund_value = map[string]int32{
		"k_ItemPurgatoryResponse_Refund_Succeeded":                 0,
		"k_ItemPurgatoryResponse_Refund_Failed_ItemNotInPurgatory": 1,
		"k_ItemPurgatoryResponse_Refund_Failed_CouldNotFindItem":   2,
		"k_ItemPurgatoryResponse_Refund_Failed_NoSOCache":          3,
		"k_ItemPurgatoryResponse_Refund_Failed_NoDetail":           4,
		"k_ItemPurgatoryResponse_Refund_Failed_NexonWebAPI":        5,
	}
)

func (x EItemPurgatoryResponse_Refund) Enum() *EItemPurgatoryResponse_Refund {
	p := new(EItemPurgatoryResponse_Refund)
	*p = x
	return p
}

func (x EItemPurgatoryResponse_Refund) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EItemPurgatoryResponse_Refund) Descriptor() protoreflect.EnumDescriptor {
	return file_tf2_econ_gcmessages_proto_enumTypes[4].Descriptor()
}

func (EItemPurgatoryResponse_Refund) Type() protoreflect.EnumType {
	return &file_tf2_econ_gcmessages_proto_enumTypes[4]
}

func (x EItemPurgatoryResponse_Refund) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EItemPurgatoryResponse_Refund) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EItemPurgatoryResponse_Refund(num)
	return nil
}

// Deprecated: Use EItemPurgatoryResponse_Refund.Descriptor instead.
func (EItemPurgatoryResponse_Refund) EnumDescriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{4}
}

type CMsgApplyAutograph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutographItemId *uint64 `protobuf:"varint,1,opt,name=autograph_item_id,json=autographItemId" json:"autograph_item_id,omitempty"`
	ItemItemId      *uint64 `protobuf:"varint,2,opt,name=item_item_id,json=itemItemId" json:"item_item_id,omitempty"`
}

func (x *CMsgApplyAutograph) Reset() {
	*x = CMsgApplyAutograph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgApplyAutograph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgApplyAutograph) ProtoMessage() {}

func (x *CMsgApplyAutograph) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgApplyAutograph.ProtoReflect.Descriptor instead.
func (*CMsgApplyAutograph) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgApplyAutograph) GetAutographItemId() uint64 {
	if x != nil && x.AutographItemId != nil {
		return *x.AutographItemId
	}
	return 0
}

func (x *CMsgApplyAutograph) GetItemItemId() uint64 {
	if x != nil && x.ItemItemId != nil {
		return *x.ItemItemId
	}
	return 0
}

type CMsgEconPlayerStrangeCountAdjustment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId               *uint32                                                         `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	StrangeCountAdjustments []*CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment `protobuf:"bytes,2,rep,name=strange_count_adjustments,json=strangeCountAdjustments" json:"strange_count_adjustments,omitempty"`
}

func (x *CMsgEconPlayerStrangeCountAdjustment) Reset() {
	*x = CMsgEconPlayerStrangeCountAdjustment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgEconPlayerStrangeCountAdjustment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgEconPlayerStrangeCountAdjustment) ProtoMessage() {}

func (x *CMsgEconPlayerStrangeCountAdjustment) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgEconPlayerStrangeCountAdjustment.ProtoReflect.Descriptor instead.
func (*CMsgEconPlayerStrangeCountAdjustment) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgEconPlayerStrangeCountAdjustment) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgEconPlayerStrangeCountAdjustment) GetStrangeCountAdjustments() []*CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment {
	if x != nil {
		return x.StrangeCountAdjustments
	}
	return nil
}

type CMsgRequestItemPurgatory_FinalizePurchase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemIds []uint64 `protobuf:"varint,1,rep,name=item_ids,json=itemIds" json:"item_ids,omitempty"`
}

func (x *CMsgRequestItemPurgatory_FinalizePurchase) Reset() {
	*x = CMsgRequestItemPurgatory_FinalizePurchase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRequestItemPurgatory_FinalizePurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRequestItemPurgatory_FinalizePurchase) ProtoMessage() {}

func (x *CMsgRequestItemPurgatory_FinalizePurchase) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRequestItemPurgatory_FinalizePurchase.ProtoReflect.Descriptor instead.
func (*CMsgRequestItemPurgatory_FinalizePurchase) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgRequestItemPurgatory_FinalizePurchase) GetItemIds() []uint64 {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

type CMsgRequestItemPurgatory_FinalizePurchaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *uint32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (x *CMsgRequestItemPurgatory_FinalizePurchaseResponse) Reset() {
	*x = CMsgRequestItemPurgatory_FinalizePurchaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRequestItemPurgatory_FinalizePurchaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRequestItemPurgatory_FinalizePurchaseResponse) ProtoMessage() {}

func (x *CMsgRequestItemPurgatory_FinalizePurchaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRequestItemPurgatory_FinalizePurchaseResponse.ProtoReflect.Descriptor instead.
func (*CMsgRequestItemPurgatory_FinalizePurchaseResponse) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgRequestItemPurgatory_FinalizePurchaseResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CMsgRequestItemPurgatory_RefundPurchase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId *uint64 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *CMsgRequestItemPurgatory_RefundPurchase) Reset() {
	*x = CMsgRequestItemPurgatory_RefundPurchase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRequestItemPurgatory_RefundPurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRequestItemPurgatory_RefundPurchase) ProtoMessage() {}

func (x *CMsgRequestItemPurgatory_RefundPurchase) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRequestItemPurgatory_RefundPurchase.ProtoReflect.Descriptor instead.
func (*CMsgRequestItemPurgatory_RefundPurchase) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgRequestItemPurgatory_RefundPurchase) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type CMsgRequestItemPurgatory_RefundPurchaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *uint32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (x *CMsgRequestItemPurgatory_RefundPurchaseResponse) Reset() {
	*x = CMsgRequestItemPurgatory_RefundPurchaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgRequestItemPurgatory_RefundPurchaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRequestItemPurgatory_RefundPurchaseResponse) ProtoMessage() {}

func (x *CMsgRequestItemPurgatory_RefundPurchaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRequestItemPurgatory_RefundPurchaseResponse.ProtoReflect.Descriptor instead.
func (*CMsgRequestItemPurgatory_RefundPurchaseResponse) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgRequestItemPurgatory_RefundPurchaseResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CMsgCraftingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemIds []uint64 `protobuf:"varint,1,rep,name=item_ids,json=itemIds" json:"item_ids,omitempty"`
}

func (x *CMsgCraftingResponse) Reset() {
	*x = CMsgCraftingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCraftingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCraftingResponse) ProtoMessage() {}

func (x *CMsgCraftingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCraftingResponse.ProtoReflect.Descriptor instead.
func (*CMsgCraftingResponse) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgCraftingResponse) GetItemIds() []uint64 {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

type CMsgGCRequestStoreSalesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Currency *uint32 `protobuf:"varint,2,opt,name=currency" json:"currency,omitempty"`
}

func (x *CMsgGCRequestStoreSalesData) Reset() {
	*x = CMsgGCRequestStoreSalesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCRequestStoreSalesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCRequestStoreSalesData) ProtoMessage() {}

func (x *CMsgGCRequestStoreSalesData) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCRequestStoreSalesData.ProtoReflect.Descriptor instead.
func (*CMsgGCRequestStoreSalesData) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgGCRequestStoreSalesData) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgGCRequestStoreSalesData) GetCurrency() uint32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

type CMsgGCRequestStoreSalesDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalePrice      []*CMsgGCRequestStoreSalesDataResponse_Price `protobuf:"bytes,1,rep,name=sale_price,json=salePrice" json:"sale_price,omitempty"`
	Version        *uint32                                      `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	ExpirationTime *uint32                                      `protobuf:"varint,3,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
}

func (x *CMsgGCRequestStoreSalesDataResponse) Reset() {
	*x = CMsgGCRequestStoreSalesDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCRequestStoreSalesDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCRequestStoreSalesDataResponse) ProtoMessage() {}

func (x *CMsgGCRequestStoreSalesDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCRequestStoreSalesDataResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCRequestStoreSalesDataResponse) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgGCRequestStoreSalesDataResponse) GetSalePrice() []*CMsgGCRequestStoreSalesDataResponse_Price {
	if x != nil {
		return x.SalePrice
	}
	return nil
}

func (x *CMsgGCRequestStoreSalesDataResponse) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgGCRequestStoreSalesDataResponse) GetExpirationTime() uint32 {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return 0
}

type CMsgGCRequestStoreSalesDataUpToDateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ExpirationTime *uint32 `protobuf:"varint,2,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
}

func (x *CMsgGCRequestStoreSalesDataUpToDateResponse) Reset() {
	*x = CMsgGCRequestStoreSalesDataUpToDateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCRequestStoreSalesDataUpToDateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCRequestStoreSalesDataUpToDateResponse) ProtoMessage() {}

func (x *CMsgGCRequestStoreSalesDataUpToDateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCRequestStoreSalesDataUpToDateResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCRequestStoreSalesDataUpToDateResponse) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgGCRequestStoreSalesDataUpToDateResponse) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CMsgGCRequestStoreSalesDataUpToDateResponse) GetExpirationTime() uint32 {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return 0
}

type CMsgGCToGCPingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCToGCPingRequest) Reset() {
	*x = CMsgGCToGCPingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToGCPingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToGCPingRequest) ProtoMessage() {}

func (x *CMsgGCToGCPingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToGCPingRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCToGCPingRequest) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{10}
}

type CMsgGCToGCPingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCToGCPingResponse) Reset() {
	*x = CMsgGCToGCPingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToGCPingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToGCPingResponse) ProtoMessage() {}

func (x *CMsgGCToGCPingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToGCPingResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToGCPingResponse) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{11}
}

type CMsgGCToGCGetUserSessionServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *CMsgGCToGCGetUserSessionServer) Reset() {
	*x = CMsgGCToGCGetUserSessionServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToGCGetUserSessionServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToGCGetUserSessionServer) ProtoMessage() {}

func (x *CMsgGCToGCGetUserSessionServer) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToGCGetUserSessionServer.ProtoReflect.Descriptor instead.
func (*CMsgGCToGCGetUserSessionServer) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgGCToGCGetUserSessionServer) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgGCToGCGetUserSessionServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSteamId *uint64 `protobuf:"fixed64,1,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
}

func (x *CMsgGCToGCGetUserSessionServerResponse) Reset() {
	*x = CMsgGCToGCGetUserSessionServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToGCGetUserSessionServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToGCGetUserSessionServerResponse) ProtoMessage() {}

func (x *CMsgGCToGCGetUserSessionServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToGCGetUserSessionServerResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToGCGetUserSessionServerResponse) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgGCToGCGetUserSessionServerResponse) GetServerSteamId() uint64 {
	if x != nil && x.ServerSteamId != nil {
		return *x.ServerSteamId
	}
	return 0
}

type CMsgGCToGCGetUserServerMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MaxSpectators *uint32 `protobuf:"varint,2,opt,name=max_spectators,json=maxSpectators" json:"max_spectators,omitempty"`
}

func (x *CMsgGCToGCGetUserServerMembers) Reset() {
	*x = CMsgGCToGCGetUserServerMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToGCGetUserServerMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToGCGetUserServerMembers) ProtoMessage() {}

func (x *CMsgGCToGCGetUserServerMembers) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToGCGetUserServerMembers.ProtoReflect.Descriptor instead.
func (*CMsgGCToGCGetUserServerMembers) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgGCToGCGetUserServerMembers) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCToGCGetUserServerMembers) GetMaxSpectators() uint32 {
	if x != nil && x.MaxSpectators != nil {
		return *x.MaxSpectators
	}
	return 0
}

type CMsgGCToGCGetUserServerMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberAccountId []uint32 `protobuf:"varint,1,rep,name=member_account_id,json=memberAccountId" json:"member_account_id,omitempty"`
}

func (x *CMsgGCToGCGetUserServerMembersResponse) Reset() {
	*x = CMsgGCToGCGetUserServerMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToGCGetUserServerMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToGCGetUserServerMembersResponse) ProtoMessage() {}

func (x *CMsgGCToGCGetUserServerMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToGCGetUserServerMembersResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToGCGetUserServerMembersResponse) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgGCToGCGetUserServerMembersResponse) GetMemberAccountId() []uint32 {
	if x != nil {
		return x.MemberAccountId
	}
	return nil
}

type CMsgLookupMultipleAccountNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountids []uint32 `protobuf:"varint,1,rep,packed,name=accountids" json:"accountids,omitempty"`
}

func (x *CMsgLookupMultipleAccountNames) Reset() {
	*x = CMsgLookupMultipleAccountNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLookupMultipleAccountNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLookupMultipleAccountNames) ProtoMessage() {}

func (x *CMsgLookupMultipleAccountNames) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLookupMultipleAccountNames.ProtoReflect.Descriptor instead.
func (*CMsgLookupMultipleAccountNames) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgLookupMultipleAccountNames) GetAccountids() []uint32 {
	if x != nil {
		return x.Accountids
	}
	return nil
}

type CMsgLookupMultipleAccountNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*CMsgLookupMultipleAccountNamesResponse_Account `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
}

func (x *CMsgLookupMultipleAccountNamesResponse) Reset() {
	*x = CMsgLookupMultipleAccountNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLookupMultipleAccountNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLookupMultipleAccountNamesResponse) ProtoMessage() {}

func (x *CMsgLookupMultipleAccountNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLookupMultipleAccountNamesResponse.ProtoReflect.Descriptor instead.
func (*CMsgLookupMultipleAccountNamesResponse) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgLookupMultipleAccountNamesResponse) GetAccounts() []*CMsgLookupMultipleAccountNamesResponse_Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type CMsgGCToGCGrantSelfMadeItemToAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemDefIndex *uint32 `protobuf:"varint,1,opt,name=item_def_index,json=itemDefIndex" json:"item_def_index,omitempty"`
	Accountid    *uint32 `protobuf:"varint,2,opt,name=accountid" json:"accountid,omitempty"`
}

func (x *CMsgGCToGCGrantSelfMadeItemToAccount) Reset() {
	*x = CMsgGCToGCGrantSelfMadeItemToAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToGCGrantSelfMadeItemToAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToGCGrantSelfMadeItemToAccount) ProtoMessage() {}

func (x *CMsgGCToGCGrantSelfMadeItemToAccount) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToGCGrantSelfMadeItemToAccount.ProtoReflect.Descriptor instead.
func (*CMsgGCToGCGrantSelfMadeItemToAccount) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgGCToGCGrantSelfMadeItemToAccount) GetItemDefIndex() uint32 {
	if x != nil && x.ItemDefIndex != nil {
		return *x.ItemDefIndex
	}
	return 0
}

func (x *CMsgGCToGCGrantSelfMadeItemToAccount) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CMsgGCToGCThankedByNewUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewUserAccountid     *uint32 `protobuf:"varint,1,opt,name=new_user_accountid,json=newUserAccountid" json:"new_user_accountid,omitempty"`
	ThankedUserAccountid *uint32 `protobuf:"varint,2,opt,name=thanked_user_accountid,json=thankedUserAccountid" json:"thanked_user_accountid,omitempty"`
}

func (x *CMsgGCToGCThankedByNewUser) Reset() {
	*x = CMsgGCToGCThankedByNewUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCToGCThankedByNewUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToGCThankedByNewUser) ProtoMessage() {}

func (x *CMsgGCToGCThankedByNewUser) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToGCThankedByNewUser.ProtoReflect.Descriptor instead.
func (*CMsgGCToGCThankedByNewUser) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgGCToGCThankedByNewUser) GetNewUserAccountid() uint32 {
	if x != nil && x.NewUserAccountid != nil {
		return *x.NewUserAccountid
	}
	return 0
}

func (x *CMsgGCToGCThankedByNewUser) GetThankedUserAccountid() uint32 {
	if x != nil && x.ThankedUserAccountid != nil {
		return *x.ThankedUserAccountid
	}
	return 0
}

type CMsgGCShuffleCrateContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrateItemId    *uint64 `protobuf:"varint,1,opt,name=crate_item_id,json=crateItemId" json:"crate_item_id,omitempty"`
	UserCodeString *string `protobuf:"bytes,2,opt,name=user_code_string,json=userCodeString" json:"user_code_string,omitempty"`
}

func (x *CMsgGCShuffleCrateContents) Reset() {
	*x = CMsgGCShuffleCrateContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCShuffleCrateContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCShuffleCrateContents) ProtoMessage() {}

func (x *CMsgGCShuffleCrateContents) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCShuffleCrateContents.ProtoReflect.Descriptor instead.
func (*CMsgGCShuffleCrateContents) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgGCShuffleCrateContents) GetCrateItemId() uint64 {
	if x != nil && x.CrateItemId != nil {
		return *x.CrateItemId
	}
	return 0
}

func (x *CMsgGCShuffleCrateContents) GetUserCodeString() string {
	if x != nil && x.UserCodeString != nil {
		return *x.UserCodeString
	}
	return ""
}

type CMsgGCQuestObjective_Progress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId          *uint64 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	QuestAttribIndex *uint32 `protobuf:"varint,2,opt,name=quest_attrib_index,json=questAttribIndex" json:"quest_attrib_index,omitempty"`
	Delta            *uint32 `protobuf:"varint,3,opt,name=delta" json:"delta,omitempty"`
	OwnerSteamid     *uint64 `protobuf:"fixed64,4,opt,name=owner_steamid,json=ownerSteamid" json:"owner_steamid,omitempty"`
}

func (x *CMsgGCQuestObjective_Progress) Reset() {
	*x = CMsgGCQuestObjective_Progress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCQuestObjective_Progress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCQuestObjective_Progress) ProtoMessage() {}

func (x *CMsgGCQuestObjective_Progress) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCQuestObjective_Progress.ProtoReflect.Descriptor instead.
func (*CMsgGCQuestObjective_Progress) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgGCQuestObjective_Progress) GetQuestId() uint64 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *CMsgGCQuestObjective_Progress) GetQuestAttribIndex() uint32 {
	if x != nil && x.QuestAttribIndex != nil {
		return *x.QuestAttribIndex
	}
	return 0
}

func (x *CMsgGCQuestObjective_Progress) GetDelta() uint32 {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return 0
}

func (x *CMsgGCQuestObjective_Progress) GetOwnerSteamid() uint64 {
	if x != nil && x.OwnerSteamid != nil {
		return *x.OwnerSteamid
	}
	return 0
}

type CMsgGCQuestObjective_PointsChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId          *uint64 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	OwnerSteamid     *uint64 `protobuf:"fixed64,4,opt,name=owner_steamid,json=ownerSteamid" json:"owner_steamid,omitempty"`
	UpdateBasePoints *bool   `protobuf:"varint,5,opt,name=update_base_points,json=updateBasePoints,def=0" json:"update_base_points,omitempty"`
	Points_0         *uint32 `protobuf:"varint,6,opt,name=points_0,json=points0" json:"points_0,omitempty"`
	Points_1         *uint32 `protobuf:"varint,7,opt,name=points_1,json=points1" json:"points_1,omitempty"`
	Points_2         *uint32 `protobuf:"varint,8,opt,name=points_2,json=points2" json:"points_2,omitempty"`
}

// Default values for CMsgGCQuestObjective_PointsChange fields.
const (
	Default_CMsgGCQuestObjective_PointsChange_UpdateBasePoints = bool(false)
)

func (x *CMsgGCQuestObjective_PointsChange) Reset() {
	*x = CMsgGCQuestObjective_PointsChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCQuestObjective_PointsChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCQuestObjective_PointsChange) ProtoMessage() {}

func (x *CMsgGCQuestObjective_PointsChange) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCQuestObjective_PointsChange.ProtoReflect.Descriptor instead.
func (*CMsgGCQuestObjective_PointsChange) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgGCQuestObjective_PointsChange) GetQuestId() uint64 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *CMsgGCQuestObjective_PointsChange) GetOwnerSteamid() uint64 {
	if x != nil && x.OwnerSteamid != nil {
		return *x.OwnerSteamid
	}
	return 0
}

func (x *CMsgGCQuestObjective_PointsChange) GetUpdateBasePoints() bool {
	if x != nil && x.UpdateBasePoints != nil {
		return *x.UpdateBasePoints
	}
	return Default_CMsgGCQuestObjective_PointsChange_UpdateBasePoints
}

func (x *CMsgGCQuestObjective_PointsChange) GetPoints_0() uint32 {
	if x != nil && x.Points_0 != nil {
		return *x.Points_0
	}
	return 0
}

func (x *CMsgGCQuestObjective_PointsChange) GetPoints_1() uint32 {
	if x != nil && x.Points_1 != nil {
		return *x.Points_1
	}
	return 0
}

func (x *CMsgGCQuestObjective_PointsChange) GetPoints_2() uint32 {
	if x != nil && x.Points_2 != nil {
		return *x.Points_2
	}
	return 0
}

type CMsgGCQuestComplete_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId *uint64 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
}

func (x *CMsgGCQuestComplete_Request) Reset() {
	*x = CMsgGCQuestComplete_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCQuestComplete_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCQuestComplete_Request) ProtoMessage() {}

func (x *CMsgGCQuestComplete_Request) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCQuestComplete_Request.ProtoReflect.Descriptor instead.
func (*CMsgGCQuestComplete_Request) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgGCQuestComplete_Request) GetQuestId() uint64 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

type CMsgGCQuestCompleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCQuestCompleted) Reset() {
	*x = CMsgGCQuestCompleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCQuestCompleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCQuestCompleted) ProtoMessage() {}

func (x *CMsgGCQuestCompleted) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCQuestCompleted.ProtoReflect.Descriptor instead.
func (*CMsgGCQuestCompleted) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{24}
}

type CMsgGCQuestObjective_RequestLoanerItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId *uint64 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
}

func (x *CMsgGCQuestObjective_RequestLoanerItems) Reset() {
	*x = CMsgGCQuestObjective_RequestLoanerItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCQuestObjective_RequestLoanerItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCQuestObjective_RequestLoanerItems) ProtoMessage() {}

func (x *CMsgGCQuestObjective_RequestLoanerItems) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCQuestObjective_RequestLoanerItems.ProtoReflect.Descriptor instead.
func (*CMsgGCQuestObjective_RequestLoanerItems) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgGCQuestObjective_RequestLoanerItems) GetQuestId() uint64 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

type CMsgGCQuestObjective_RequestLoanerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgGCQuestObjective_RequestLoanerResponse) Reset() {
	*x = CMsgGCQuestObjective_RequestLoanerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCQuestObjective_RequestLoanerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCQuestObjective_RequestLoanerResponse) ProtoMessage() {}

func (x *CMsgGCQuestObjective_RequestLoanerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCQuestObjective_RequestLoanerResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCQuestObjective_RequestLoanerResponse) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{26}
}

type CMsgCraftCollectionUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId []uint64 `protobuf:"varint,1,rep,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *CMsgCraftCollectionUpgrade) Reset() {
	*x = CMsgCraftCollectionUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCraftCollectionUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCraftCollectionUpgrade) ProtoMessage() {}

func (x *CMsgCraftCollectionUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCraftCollectionUpgrade.ProtoReflect.Descriptor instead.
func (*CMsgCraftCollectionUpgrade) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgCraftCollectionUpgrade) GetItemId() []uint64 {
	if x != nil {
		return x.ItemId
	}
	return nil
}

type CMsgCraftHalloweenOffering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolId *uint64  `protobuf:"varint,1,opt,name=tool_id,json=toolId" json:"tool_id,omitempty"`
	ItemId []uint64 `protobuf:"varint,2,rep,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *CMsgCraftHalloweenOffering) Reset() {
	*x = CMsgCraftHalloweenOffering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCraftHalloweenOffering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCraftHalloweenOffering) ProtoMessage() {}

func (x *CMsgCraftHalloweenOffering) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCraftHalloweenOffering.ProtoReflect.Descriptor instead.
func (*CMsgCraftHalloweenOffering) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgCraftHalloweenOffering) GetToolId() uint64 {
	if x != nil && x.ToolId != nil {
		return *x.ToolId
	}
	return 0
}

func (x *CMsgCraftHalloweenOffering) GetItemId() []uint64 {
	if x != nil {
		return x.ItemId
	}
	return nil
}

type CMsgCraftCommonStatClock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolId *uint64  `protobuf:"varint,1,opt,name=tool_id,json=toolId" json:"tool_id,omitempty"`
	ItemId []uint64 `protobuf:"varint,2,rep,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *CMsgCraftCommonStatClock) Reset() {
	*x = CMsgCraftCommonStatClock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCraftCommonStatClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCraftCommonStatClock) ProtoMessage() {}

func (x *CMsgCraftCommonStatClock) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCraftCommonStatClock.ProtoReflect.Descriptor instead.
func (*CMsgCraftCommonStatClock) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgCraftCommonStatClock) GetToolId() uint64 {
	if x != nil && x.ToolId != nil {
		return *x.ToolId
	}
	return 0
}

func (x *CMsgCraftCommonStatClock) GetItemId() []uint64 {
	if x != nil {
		return x.ItemId
	}
	return nil
}

type CMsgGCQuestDiscard_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId *uint64 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
}

func (x *CMsgGCQuestDiscard_Request) Reset() {
	*x = CMsgGCQuestDiscard_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCQuestDiscard_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCQuestDiscard_Request) ProtoMessage() {}

func (x *CMsgGCQuestDiscard_Request) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCQuestDiscard_Request.ProtoReflect.Descriptor instead.
func (*CMsgGCQuestDiscard_Request) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgGCQuestDiscard_Request) GetQuestId() uint64 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

type CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType  *uint32 `protobuf:"varint,1,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	ItemId     *uint64 `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	Adjustment *uint32 `protobuf:"varint,3,opt,name=adjustment" json:"adjustment,omitempty"`
}

func (x *CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment) Reset() {
	*x = CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment) ProtoMessage() {}

func (x *CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment.ProtoReflect.Descriptor instead.
func (*CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment) GetEventType() uint32 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

func (x *CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment) GetAdjustment() uint32 {
	if x != nil && x.Adjustment != nil {
		return *x.Adjustment
	}
	return 0
}

type CMsgGCRequestStoreSalesDataResponse_Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemDef *uint32 `protobuf:"varint,1,opt,name=item_def,json=itemDef" json:"item_def,omitempty"`
	Price   *uint32 `protobuf:"varint,2,opt,name=price" json:"price,omitempty"`
}

func (x *CMsgGCRequestStoreSalesDataResponse_Price) Reset() {
	*x = CMsgGCRequestStoreSalesDataResponse_Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGCRequestStoreSalesDataResponse_Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCRequestStoreSalesDataResponse_Price) ProtoMessage() {}

func (x *CMsgGCRequestStoreSalesDataResponse_Price) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCRequestStoreSalesDataResponse_Price.ProtoReflect.Descriptor instead.
func (*CMsgGCRequestStoreSalesDataResponse_Price) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CMsgGCRequestStoreSalesDataResponse_Price) GetItemDef() uint32 {
	if x != nil && x.ItemDef != nil {
		return *x.ItemDef
	}
	return 0
}

func (x *CMsgGCRequestStoreSalesDataResponse_Price) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

type CMsgLookupMultipleAccountNamesResponse_Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Persona   *string `protobuf:"bytes,2,opt,name=persona" json:"persona,omitempty"`
}

func (x *CMsgLookupMultipleAccountNamesResponse_Account) Reset() {
	*x = CMsgLookupMultipleAccountNamesResponse_Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tf2_econ_gcmessages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgLookupMultipleAccountNamesResponse_Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLookupMultipleAccountNamesResponse_Account) ProtoMessage() {}

func (x *CMsgLookupMultipleAccountNamesResponse_Account) ProtoReflect() protoreflect.Message {
	mi := &file_tf2_econ_gcmessages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLookupMultipleAccountNamesResponse_Account.ProtoReflect.Descriptor instead.
func (*CMsgLookupMultipleAccountNamesResponse_Account) Descriptor() ([]byte, []int) {
	return file_tf2_econ_gcmessages_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CMsgLookupMultipleAccountNamesResponse_Account) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgLookupMultipleAccountNamesResponse_Account) GetPersona() string {
	if x != nil && x.Persona != nil {
		return *x.Persona
	}
	return ""
}

var File_tf2_econ_gcmessages_proto protoreflect.FileDescriptor

var file_tf2_econ_gcmessages_proto_rawDesc = []byte{
	0x0a, 0x19, 0x74, 0x66, 0x32, 0x2f, 0x65, 0x63, 0x6f, 0x6e, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x74, 0x66, 0x32,
	0x1a, 0x17, 0x74, 0x66, 0x32, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x12, 0x43, 0x4d, 0x73,
	0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xb7, 0x02,
	0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x45, 0x63, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x7d, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x45, 0x63, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x17, 0x73, 0x74, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x1a, 0x71, 0x0a, 0x17, 0x43, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x22,
	0x4b, 0x0a, 0x31, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x42, 0x0a, 0x27,
	0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x22, 0x49, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x31, 0x0a, 0x14, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x22, 0x53,
	0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0xf1, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x73,
	0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x09, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x38, 0x0a,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65,
	0x66, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x70, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x1e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x50, 0x0a,
	0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22,
	0x66, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x54, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x44, 0x0a,
	0x1e, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x64, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x74, 0x66, 0x32, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a,
	0x41, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x22, 0x6a, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x22, 0x80,
	0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x68, 0x61,
	0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x12, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x74,
	0x68, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x68, 0x61,
	0x6e, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x64, 0x22, 0x6a, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x43, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x63, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xa3, 0x01,
	0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x12, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x30, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x30, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x5f, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x32,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x32, 0x22,
	0x38, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x22, 0x44, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x61,
	0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x1a,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x61, 0x66, 0x74, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x65, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f,
	0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x18,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x72, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x6f, 0x6f, 0x6c, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x1a, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x2a, 0xcb, 0x2f, 0x0a, 0x0a, 0x45, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x4d,
	0x73, 0x67, 0x12, 0x11, 0x0a, 0x0c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x42, 0x61,
	0x73, 0x65, 0x10, 0xe8, 0x07, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x53, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe9, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x72, 0x61, 0x66, 0x74, 0x10, 0xea, 0x07, 0x12, 0x1a, 0x0a,
	0x15, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xeb, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0xec, 0x07, 0x12, 0x24,
	0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0xed, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x4e, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xee, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x61,
	0x74, 0x65, 0x10, 0xef, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xf0, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xf1, 0x07, 0x12,
	0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x61, 0x69, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xf2, 0x07, 0x12,
	0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47, 0x6f, 0x6c, 0x64, 0x65,
	0x6e, 0x57, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x10, 0xf3, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d,
	0x4f, 0x54, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xf4, 0x07, 0x12, 0x20, 0x0a,
	0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d, 0x4f, 0x54, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xf5, 0x07, 0x12,
	0x19, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10, 0xfb, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xfc, 0x07, 0x12, 0x28, 0x0a,
	0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x10, 0xfd, 0x07, 0x12, 0x30, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x44, 0x45, 0x50, 0x52,
	0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xfe, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x10, 0xff, 0x07, 0x12, 0x29, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x80, 0x08, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x10, 0x81, 0x08, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0x82, 0x08, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65,
	0x73, 0x70, 0x61, 0x77, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x85, 0x08, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x10, 0x86, 0x08, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x69, 0x6e,
	0x74, 0x10, 0x87, 0x08, 0x12, 0x19, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x47, 0x69, 0x66, 0x74, 0x57, 0x72, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x88, 0x08, 0x12,
	0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47, 0x69, 0x66, 0x74, 0x57,
	0x72, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0x89, 0x08, 0x12, 0x18, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x10, 0x8a, 0x08, 0x12, 0x28, 0x0a, 0x23,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x47,
	0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x10, 0x8c, 0x08, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x55, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x10, 0x8d, 0x08, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x55, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x8e, 0x08, 0x12, 0x19, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x10,
	0x8f, 0x08, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x55, 0x73,
	0x65, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10,
	0x90, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x6f,
	0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x10, 0x91, 0x08, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67,
	0x4c, 0x6f, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x92, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10,
	0x93, 0x08, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x94, 0x08, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x10, 0x95, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x96, 0x08, 0x12, 0x1d,
	0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x10, 0x99, 0x08, 0x12, 0x24, 0x0a,
	0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x10, 0x9a, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x10, 0x9b, 0x08, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9c, 0x08, 0x12,
	0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x10, 0x9d, 0x08, 0x12, 0x25,
	0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4d, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0x9e, 0x08, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x72, 0x61,
	0x66, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0x9f, 0x08, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x43, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa0, 0x08, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x53, 0x61, 0x78, 0x78, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x10, 0xa1, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x42, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x63, 0x6b, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x10, 0xa2, 0x08, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xa3, 0x08, 0x12, 0x18, 0x0a,
	0x13, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x10, 0xa5, 0x08, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x64, 0x10, 0xa6, 0x08, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x10, 0xa7,
	0x08, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0xa8, 0x08, 0x12, 0x19, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x62, 0x75, 0x73, 0x65, 0x10,
	0xa9, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x62, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xaa, 0x08, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x10, 0xab, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xac, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xad, 0x08,
	0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x10, 0xae, 0x08, 0x12,
	0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x10, 0xaf, 0x08, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0xb0, 0x08, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x10, 0xb1, 0x08, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x10, 0xb2, 0x08, 0x12, 0x18, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x47, 0x69, 0x66, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x10, 0xb3, 0x08, 0x12,
	0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x72, 0x64, 0x10, 0xb5, 0x08, 0x12, 0x1e,
	0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x72, 0x64, 0x10, 0xb6, 0x08, 0x12, 0x24,
	0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53,
	0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0xb7, 0x08, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0xb8, 0x08, 0x12, 0x2c, 0x0a, 0x27, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xb9, 0x08, 0x12, 0x18, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x58, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10,
	0xba, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x58, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0xbb, 0x08, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x5f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0xbc, 0x08, 0x12, 0x2a,
	0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x10, 0xbd, 0x08, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xbe, 0x08, 0x12, 0x28,
	0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x10, 0xbf, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x53, 0x65, 0x74, 0x48, 0x61, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x55, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x10, 0xc0, 0x08,
	0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x10, 0xc1,
	0x08, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xc2, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x58, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0xc3, 0x08, 0x12, 0x25, 0x0a, 0x20,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x6f, 0x67, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x10, 0xc4, 0x08, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e, 0x53, 0x70, 0x65,
	0x6c, 0x6c, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x10, 0xc5, 0x08, 0x12, 0x1d, 0x0a,
	0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4b,
	0x69, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x10, 0xc6, 0x08, 0x12, 0x25, 0x0a, 0x20,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4b, 0x69,
	0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0xc7, 0x08, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x46, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x10, 0xc8, 0x08, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x5f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b,
	0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x10, 0xc9, 0x08, 0x12, 0x25, 0x0a,
	0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x69, 0x76, 0x65,
	0x72, 0x10, 0xca, 0x08, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x10, 0xcc, 0x08, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x10, 0xcd, 0x08, 0x12, 0x2f, 0x0a, 0x2a,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xce, 0x08, 0x12, 0x18, 0x0a,
	0x13, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x61, 0x73, 0x65, 0x10, 0xdc, 0x0b, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10,
	0xdd, 0x0b, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xde, 0x0b, 0x12, 0x21,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xdf,
	0x0b, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x10, 0xe5, 0x0b, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xe6, 0x0b, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xea, 0x0b, 0x12, 0x29, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x10, 0xc1, 0x0c, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x5f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x10, 0xc2, 0x0c, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x42, 0x61, 0x73, 0x65,
	0x10, 0xa4, 0x0d, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0xa5, 0x0d, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa6, 0x0d,
	0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xa7,
	0x0d, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65,
	0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xa8, 0x0d, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x10, 0xa9, 0x0d, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0xaa, 0x0d, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0xac, 0x0d, 0x12, 0x1f, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x44, 0x65, 0x76, 0x5f, 0x4e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x10, 0xd1, 0x0f, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x44, 0x65, 0x76, 0x5f, 0x4e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd2, 0x0f,
	0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x44, 0x65, 0x76, 0x5f,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x6f, 0x6c, 0x6c, 0x4c, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x10, 0xd3, 0x0f, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x10, 0xc4, 0x13, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xc5, 0x13, 0x12, 0x29, 0x0a,
	0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xc6, 0x13, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0xc7, 0x13, 0x12, 0x22, 0x0a, 0x1d, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x10, 0xd0, 0x13, 0x12,
	0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd1, 0x13, 0x12, 0x20, 0x0a, 0x1b, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0xd2, 0x13, 0x12, 0x28, 0x0a,
	0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xd3, 0x13, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x6e, 0x10, 0xcc, 0x13, 0x12, 0x2a, 0x0a, 0x25, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0xcd, 0x13, 0x12, 0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x69, 0x74, 0x10, 0xce, 0x13, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xcf, 0x13, 0x12,
	0x1e, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x44,
	0x69, 0x72, 0x74, 0x79, 0x53, 0x44, 0x4f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x10, 0xd4, 0x13, 0x12,
	0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x44,
	0x69, 0x72, 0x74, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x44, 0x4f, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x10, 0xd5, 0x13, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x51, 0x4c,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0xd6, 0x13, 0x12, 0x28, 0x0a, 0x23, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x10, 0xd9, 0x13, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0xda, 0x13, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x10, 0xdb, 0x13, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x47, 0x43, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0xdc, 0x13, 0x12, 0x21, 0x0a, 0x1c,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0xdd, 0x13, 0x12,
	0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xde, 0x13, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x10, 0xdf,
	0x13, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x10, 0xe0, 0x13, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x10, 0xe3,
	0x13, 0x12, 0x33, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65,
	0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0xe4, 0x13, 0x12, 0x29, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x10, 0xe5,
	0x13, 0x12, 0x31, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65,
	0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0xe6, 0x13, 0x12, 0x2e, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x10, 0xe7, 0x13, 0x12, 0x22, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x10, 0xe8, 0x13, 0x12, 0x2a, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0xe9, 0x13, 0x12, 0x32, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xea, 0x13, 0x12, 0x1c, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x10, 0xeb, 0x13, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0xec, 0x13, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0xed, 0x13, 0x12, 0x2d, 0x0a, 0x28,
	0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xee, 0x13, 0x12, 0x25, 0x0a, 0x20, 0x6b,
	0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x10,
	0xef, 0x13, 0x12, 0x2d, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x47, 0x43, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0xf0,
	0x13, 0x12, 0x2b, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47,
	0x43, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x61, 0x64, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xfb, 0x13, 0x12, 0x21,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x68,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x10, 0xfc,
	0x13, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x53, 0x68, 0x75,
	0x66, 0x66, 0x6c, 0x65, 0x43, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x10, 0xfd, 0x13, 0x12, 0x24, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0xfe, 0x13, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f,
	0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x10, 0xff, 0x13, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x10, 0x80, 0x14, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x82, 0x14, 0x12, 0x2e,
	0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4c, 0x6f, 0x61, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x10, 0x84, 0x14, 0x12, 0x31,
	0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4c, 0x6f, 0x61, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x85,
	0x14, 0x12, 0x26, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x53, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x86, 0x14, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x72, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x87, 0x14, 0x12, 0x23,
	0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x72, 0x61, 0x66, 0x74, 0x48,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x10, 0x88, 0x14, 0x12, 0x21, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x10, 0x89, 0x14, 0x12, 0x1b, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x10, 0x8a, 0x14, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x8b, 0x14, 0x12, 0x1d, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76,
	0x69, 0x7a, 0x65, 0x72, 0x10, 0x8c, 0x14, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x69,
	0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x8d, 0x14, 0x12, 0x21,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x43, 0x72, 0x61, 0x66, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x8e,
	0x14, 0x2a, 0x9b, 0x02, 0x0a, 0x0e, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x47,
	0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45,
	0x47, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x05,
	0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4f,
	0x6e, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x45, 0x47, 0x43, 0x4d, 0x73, 0x67, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x08, 0x2a,
	0x91, 0x02, 0x0a, 0x0c, 0x45, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x50, 0x72, 0x65, 0x52, 0x65, 0x71, 0x10, 0x01, 0x12, 0x23,
	0x0a, 0x1f, 0x6b, 0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x43, 0x61, 0x6e, 0x74, 0x41, 0x66, 0x66, 0x6f, 0x72,
	0x64, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x43, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x43, 0x61, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x10, 0x04,
	0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x43, 0x61, 0x6e, 0x74, 0x41, 0x66, 0x66,
	0x6f, 0x72, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x6b,
	0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x43, 0x61, 0x6e, 0x74, 0x41, 0x66, 0x66, 0x6f, 0x72, 0x64, 0x47, 0x65,
	0x6d, 0x10, 0x06, 0x2a, 0xf3, 0x02, 0x0a, 0x1f, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x49, 0x74, 0x65,
	0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x5f, 0x49, 0x74, 0x65,
	0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x01, 0x12,
	0x3f, 0x0a, 0x3b, 0x6b, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x02,
	0x12, 0x3d, 0x0a, 0x39, 0x6b, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x43, 0x6f, 0x75, 0x6c,
	0x64, 0x4e, 0x6f, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x10, 0x03, 0x12,
	0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x53, 0x4f, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x10, 0x04, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x42, 0x61, 0x63, 0x6b, 0x70,
	0x61, 0x63, 0x6b, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x05, 0x2a, 0xe7, 0x02, 0x0a, 0x1d, 0x45, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x28, 0x6b,
	0x5f, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x00, 0x12, 0x3c, 0x0a, 0x38, 0x6b, 0x5f, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50, 0x75, 0x72, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x01, 0x12, 0x3a, 0x0a, 0x36, 0x6b, 0x5f, 0x49, 0x74, 0x65,
	0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x43, 0x6f, 0x75, 0x6c, 0x64, 0x4e, 0x6f, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x53,
	0x4f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x4e, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0x04, 0x12, 0x35, 0x0a, 0x31,
	0x6b, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x75, 0x72, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x4e, 0x65, 0x78, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x41, 0x50,
	0x49, 0x10, 0x05, 0x42, 0x37, 0x48, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x33, 0x6b, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x74, 0x66, 0x32, 0x80, 0x01, 0x00,
}

var (
	file_tf2_econ_gcmessages_proto_rawDescOnce sync.Once
	file_tf2_econ_gcmessages_proto_rawDescData = file_tf2_econ_gcmessages_proto_rawDesc
)

func file_tf2_econ_gcmessages_proto_rawDescGZIP() []byte {
	file_tf2_econ_gcmessages_proto_rawDescOnce.Do(func() {
		file_tf2_econ_gcmessages_proto_rawDescData = protoimpl.X.CompressGZIP(file_tf2_econ_gcmessages_proto_rawDescData)
	})
	return file_tf2_econ_gcmessages_proto_rawDescData
}

var file_tf2_econ_gcmessages_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_tf2_econ_gcmessages_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_tf2_econ_gcmessages_proto_goTypes = []interface{}{
	(EGCItemMsg)(0),                                                      // 0: tf2.EGCItemMsg
	(EGCMsgResponse)(0),                                                  // 1: tf2.EGCMsgResponse
	(EUnlockStyle)(0),                                                    // 2: tf2.EUnlockStyle
	(EItemPurgatoryResponse_Finalize)(0),                                 // 3: tf2.EItemPurgatoryResponse_Finalize
	(EItemPurgatoryResponse_Refund)(0),                                   // 4: tf2.EItemPurgatoryResponse_Refund
	(*CMsgApplyAutograph)(nil),                                           // 5: tf2.CMsgApplyAutograph
	(*CMsgEconPlayerStrangeCountAdjustment)(nil),                         // 6: tf2.CMsgEconPlayerStrangeCountAdjustment
	(*CMsgRequestItemPurgatory_FinalizePurchase)(nil),                    // 7: tf2.CMsgRequestItemPurgatory_FinalizePurchase
	(*CMsgRequestItemPurgatory_FinalizePurchaseResponse)(nil),            // 8: tf2.CMsgRequestItemPurgatory_FinalizePurchaseResponse
	(*CMsgRequestItemPurgatory_RefundPurchase)(nil),                      // 9: tf2.CMsgRequestItemPurgatory_RefundPurchase
	(*CMsgRequestItemPurgatory_RefundPurchaseResponse)(nil),              // 10: tf2.CMsgRequestItemPurgatory_RefundPurchaseResponse
	(*CMsgCraftingResponse)(nil),                                         // 11: tf2.CMsgCraftingResponse
	(*CMsgGCRequestStoreSalesData)(nil),                                  // 12: tf2.CMsgGCRequestStoreSalesData
	(*CMsgGCRequestStoreSalesDataResponse)(nil),                          // 13: tf2.CMsgGCRequestStoreSalesDataResponse
	(*CMsgGCRequestStoreSalesDataUpToDateResponse)(nil),                  // 14: tf2.CMsgGCRequestStoreSalesDataUpToDateResponse
	(*CMsgGCToGCPingRequest)(nil),                                        // 15: tf2.CMsgGCToGCPingRequest
	(*CMsgGCToGCPingResponse)(nil),                                       // 16: tf2.CMsgGCToGCPingResponse
	(*CMsgGCToGCGetUserSessionServer)(nil),                               // 17: tf2.CMsgGCToGCGetUserSessionServer
	(*CMsgGCToGCGetUserSessionServerResponse)(nil),                       // 18: tf2.CMsgGCToGCGetUserSessionServerResponse
	(*CMsgGCToGCGetUserServerMembers)(nil),                               // 19: tf2.CMsgGCToGCGetUserServerMembers
	(*CMsgGCToGCGetUserServerMembersResponse)(nil),                       // 20: tf2.CMsgGCToGCGetUserServerMembersResponse
	(*CMsgLookupMultipleAccountNames)(nil),                               // 21: tf2.CMsgLookupMultipleAccountNames
	(*CMsgLookupMultipleAccountNamesResponse)(nil),                       // 22: tf2.CMsgLookupMultipleAccountNamesResponse
	(*CMsgGCToGCGrantSelfMadeItemToAccount)(nil),                         // 23: tf2.CMsgGCToGCGrantSelfMadeItemToAccount
	(*CMsgGCToGCThankedByNewUser)(nil),                                   // 24: tf2.CMsgGCToGCThankedByNewUser
	(*CMsgGCShuffleCrateContents)(nil),                                   // 25: tf2.CMsgGCShuffleCrateContents
	(*CMsgGCQuestObjective_Progress)(nil),                                // 26: tf2.CMsgGCQuestObjective_Progress
	(*CMsgGCQuestObjective_PointsChange)(nil),                            // 27: tf2.CMsgGCQuestObjective_PointsChange
	(*CMsgGCQuestComplete_Request)(nil),                                  // 28: tf2.CMsgGCQuestComplete_Request
	(*CMsgGCQuestCompleted)(nil),                                         // 29: tf2.CMsgGCQuestCompleted
	(*CMsgGCQuestObjective_RequestLoanerItems)(nil),                      // 30: tf2.CMsgGCQuestObjective_RequestLoanerItems
	(*CMsgGCQuestObjective_RequestLoanerResponse)(nil),                   // 31: tf2.CMsgGCQuestObjective_RequestLoanerResponse
	(*CMsgCraftCollectionUpgrade)(nil),                                   // 32: tf2.CMsgCraftCollectionUpgrade
	(*CMsgCraftHalloweenOffering)(nil),                                   // 33: tf2.CMsgCraftHalloweenOffering
	(*CMsgCraftCommonStatClock)(nil),                                     // 34: tf2.CMsgCraftCommonStatClock
	(*CMsgGCQuestDiscard_Request)(nil),                                   // 35: tf2.CMsgGCQuestDiscard_Request
	(*CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment)(nil), // 36: tf2.CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment
	(*CMsgGCRequestStoreSalesDataResponse_Price)(nil),                    // 37: tf2.CMsgGCRequestStoreSalesDataResponse.Price
	(*CMsgLookupMultipleAccountNamesResponse_Account)(nil),               // 38: tf2.CMsgLookupMultipleAccountNamesResponse.Account
}
var file_tf2_econ_gcmessages_proto_depIdxs = []int32{
	36, // 0: tf2.CMsgEconPlayerStrangeCountAdjustment.strange_count_adjustments:type_name -> tf2.CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment
	37, // 1: tf2.CMsgGCRequestStoreSalesDataResponse.sale_price:type_name -> tf2.CMsgGCRequestStoreSalesDataResponse.Price
	38, // 2: tf2.CMsgLookupMultipleAccountNamesResponse.accounts:type_name -> tf2.CMsgLookupMultipleAccountNamesResponse.Account
	3,  // [3:3] is the sub-list for method output_type
	3,  // [3:3] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_tf2_econ_gcmessages_proto_init() }
func file_tf2_econ_gcmessages_proto_init() {
	if File_tf2_econ_gcmessages_proto != nil {
		return
	}
	file_tf2_steammessages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tf2_econ_gcmessages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgApplyAutograph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgEconPlayerStrangeCountAdjustment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRequestItemPurgatory_FinalizePurchase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRequestItemPurgatory_FinalizePurchaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRequestItemPurgatory_RefundPurchase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgRequestItemPurgatory_RefundPurchaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCraftingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCRequestStoreSalesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCRequestStoreSalesDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCRequestStoreSalesDataUpToDateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToGCPingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToGCPingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToGCGetUserSessionServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToGCGetUserSessionServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToGCGetUserServerMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToGCGetUserServerMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLookupMultipleAccountNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLookupMultipleAccountNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToGCGrantSelfMadeItemToAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCToGCThankedByNewUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCShuffleCrateContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCQuestObjective_Progress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCQuestObjective_PointsChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCQuestComplete_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCQuestCompleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCQuestObjective_RequestLoanerItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCQuestObjective_RequestLoanerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCraftCollectionUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCraftHalloweenOffering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCraftCommonStatClock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCQuestDiscard_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGCRequestStoreSalesDataResponse_Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tf2_econ_gcmessages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgLookupMultipleAccountNamesResponse_Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tf2_econ_gcmessages_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tf2_econ_gcmessages_proto_goTypes,
		DependencyIndexes: file_tf2_econ_gcmessages_proto_depIdxs,
		EnumInfos:         file_tf2_econ_gcmessages_proto_enumTypes,
		MessageInfos:      file_tf2_econ_gcmessages_proto_msgTypes,
	}.Build()
	File_tf2_econ_gcmessages_proto = out.File
	file_tf2_econ_gcmessages_proto_rawDesc = nil
	file_tf2_econ_gcmessages_proto_goTypes = nil
	file_tf2_econ_gcmessages_proto_depIdxs = nil
}
